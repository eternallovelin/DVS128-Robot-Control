
RobotControl_v_1_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000031c  00800200  00002ba6  00002c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000031b  0080051c  0080051c  00002f56  2**0
                  ALLOC
  3 .debug_aranges 00000280  00000000  00000000  00002f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000943  00000000  00000000  000031d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003cd2  00000000  00000000  00003b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001d49  00000000  00000000  000077eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000027b5  00000000  00000000  00009534  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000650  00000000  00000000  0000bcec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b31  00000000  00000000  0000c33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a70  00000000  00000000  0000ce6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  0000e8dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__vector_25>
      68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      70:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      74:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      7c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      80:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      84:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      88:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      8c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      90:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_36>
      94:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      98:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      9c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      a0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      a4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      a8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      ac:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      b0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      b4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      b8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      bc:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      c0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      c4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      c8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d1 e2       	ldi	r29, 0x21	; 33
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
      dc:	15 e0       	ldi	r17, 0x05	; 5
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	e6 ea       	ldi	r30, 0xA6	; 166
      e4:	fb e2       	ldi	r31, 0x2B	; 43
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0b bf       	out	0x3b, r16	; 59
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
      ec:	07 90       	elpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	ac 31       	cpi	r26, 0x1C	; 28
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
      f6:	18 e0       	ldi	r17, 0x08	; 8
      f8:	ac e1       	ldi	r26, 0x1C	; 28
      fa:	b5 e0       	ldi	r27, 0x05	; 5
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a7 33       	cpi	r26, 0x37	; 55
     102:	b1 07       	cpc	r27, r17
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
     10a:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <__vector_36>:
	return 0;
}

/* Interrupt handler for incoming commands */
ISR(USART1_RX_vect)
{	
     112:	1f 92       	push	r1
     114:	0f 92       	push	r0
     116:	0f b6       	in	r0, 0x3f	; 63
     118:	0f 92       	push	r0
     11a:	0b b6       	in	r0, 0x3b	; 59
     11c:	0f 92       	push	r0
     11e:	11 24       	eor	r1, r1
     120:	2f 93       	push	r18
     122:	3f 93       	push	r19
     124:	4f 93       	push	r20
     126:	5f 93       	push	r21
     128:	6f 93       	push	r22
     12a:	7f 93       	push	r23
     12c:	8f 93       	push	r24
     12e:	9f 93       	push	r25
     130:	af 93       	push	r26
     132:	bf 93       	push	r27
     134:	ef 93       	push	r30
     136:	ff 93       	push	r31
	unsigned int recv = 0;
	recv = UDR1;
     138:	80 91 ce 00 	lds	r24, 0x00CE
     13c:	48 2f       	mov	r20, r24
     13e:	50 e0       	ldi	r21, 0x00	; 0
	PORTC = ~(1<<6);
     140:	8f eb       	ldi	r24, 0xBF	; 191
     142:	88 b9       	out	0x08, r24	; 8
	switch(count)
     144:	80 91 14 08 	lds	r24, 0x0814
     148:	90 91 15 08 	lds	r25, 0x0815
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	91 05       	cpc	r25, r1
     150:	91 f0       	breq	.+36     	; 0x176 <__vector_36+0x64>
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	91 05       	cpc	r25, r1
     156:	20 f0       	brcs	.+8      	; 0x160 <__vector_36+0x4e>
     158:	02 97       	sbiw	r24, 0x02	; 2
     15a:	09 f0       	breq	.+2      	; 0x15e <__vector_36+0x4c>
     15c:	8d c0       	rjmp	.+282    	; 0x278 <__vector_36+0x166>
     15e:	25 c0       	rjmp	.+74     	; 0x1aa <__vector_36+0x98>
	{
		case 0: // It's the header, check if so
			if(recv == 0xff)
     160:	4f 3f       	cpi	r20, 0xFF	; 255
     162:	51 05       	cpc	r21, r1
     164:	09 f0       	breq	.+2      	; 0x168 <__vector_36+0x56>
     166:	88 c0       	rjmp	.+272    	; 0x278 <__vector_36+0x166>
			{
					header_received = 1;
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	90 93 19 08 	sts	0x0819, r25
     170:	80 93 18 08 	sts	0x0818, r24
     174:	10 c0       	rjmp	.+32     	; 0x196 <__vector_36+0x84>
					count++;
			}			
			recv = 0;
			break;
		case 1:
			if(header_received == 1)
     176:	80 91 18 08 	lds	r24, 0x0818
     17a:	90 91 19 08 	lds	r25, 0x0819
     17e:	01 97       	sbiw	r24, 0x01	; 1
     180:	51 f4       	brne	.+20     	; 0x196 <__vector_36+0x84>
			{
				msg += recv;
     182:	80 91 10 08 	lds	r24, 0x0810
     186:	90 91 11 08 	lds	r25, 0x0811
     18a:	48 0f       	add	r20, r24
     18c:	59 1f       	adc	r21, r25
     18e:	50 93 11 08 	sts	0x0811, r21
     192:	40 93 10 08 	sts	0x0810, r20
			}
			count++;
     196:	80 91 14 08 	lds	r24, 0x0814
     19a:	90 91 15 08 	lds	r25, 0x0815
     19e:	01 96       	adiw	r24, 0x01	; 1
     1a0:	90 93 15 08 	sts	0x0815, r25
     1a4:	80 93 14 08 	sts	0x0814, r24
     1a8:	67 c0       	rjmp	.+206    	; 0x278 <__vector_36+0x166>
			recv = 0;
			break;
		case 2:
			if(header_received == 1)
     1aa:	80 91 18 08 	lds	r24, 0x0818
     1ae:	90 91 19 08 	lds	r25, 0x0819
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	09 f0       	breq	.+2      	; 0x1b8 <__vector_36+0xa6>
     1b6:	58 c0       	rjmp	.+176    	; 0x268 <__vector_36+0x156>
			{
				msg += (recv << 8);
     1b8:	20 91 10 08 	lds	r18, 0x0810
     1bc:	30 91 11 08 	lds	r19, 0x0811
     1c0:	94 2f       	mov	r25, r20
     1c2:	88 27       	eor	r24, r24
     1c4:	82 0f       	add	r24, r18
     1c6:	93 1f       	adc	r25, r19
     1c8:	90 93 11 08 	sts	0x0811, r25
     1cc:	80 93 10 08 	sts	0x0810, r24
				speed = msg & 0x3FF;
     1d0:	80 91 10 08 	lds	r24, 0x0810
     1d4:	90 91 11 08 	lds	r25, 0x0811
     1d8:	93 70       	andi	r25, 0x03	; 3
     1da:	90 93 17 08 	sts	0x0817, r25
     1de:	80 93 16 08 	sts	0x0816, r24
				cmd = (msg >> 10) & 0x7;
     1e2:	80 91 10 08 	lds	r24, 0x0810
     1e6:	90 91 11 08 	lds	r25, 0x0811
     1ea:	89 2f       	mov	r24, r25
     1ec:	99 27       	eor	r25, r25
     1ee:	86 95       	lsr	r24
     1f0:	86 95       	lsr	r24
     1f2:	87 70       	andi	r24, 0x07	; 7
     1f4:	90 70       	andi	r25, 0x00	; 0
     1f6:	90 93 1b 08 	sts	0x081B, r25
     1fa:	80 93 1a 08 	sts	0x081A, r24
				time = (msg >> 13) & 0x7;
     1fe:	80 91 10 08 	lds	r24, 0x0810
     202:	90 91 11 08 	lds	r25, 0x0811
     206:	89 2f       	mov	r24, r25
     208:	99 27       	eor	r25, r25
     20a:	82 95       	swap	r24
     20c:	86 95       	lsr	r24
     20e:	87 70       	andi	r24, 0x07	; 7
     210:	90 93 13 08 	sts	0x0813, r25
     214:	80 93 12 08 	sts	0x0812, r24
				if(speed > 1023)
     218:	80 91 16 08 	lds	r24, 0x0816
     21c:	90 91 17 08 	lds	r25, 0x0817
     220:	80 50       	subi	r24, 0x00	; 0
     222:	94 40       	sbci	r25, 0x04	; 4
     224:	30 f0       	brcs	.+12     	; 0x232 <__vector_36+0x120>
					speed = 1023;
     226:	8f ef       	ldi	r24, 0xFF	; 255
     228:	93 e0       	ldi	r25, 0x03	; 3
     22a:	90 93 17 08 	sts	0x0817, r25
     22e:	80 93 16 08 	sts	0x0816, r24
				if(time > 4)
     232:	80 91 12 08 	lds	r24, 0x0812
     236:	90 91 13 08 	lds	r25, 0x0813
     23a:	05 97       	sbiw	r24, 0x05	; 5
     23c:	30 f0       	brcs	.+12     	; 0x24a <__vector_36+0x138>
					time = 4;
     23e:	84 e0       	ldi	r24, 0x04	; 4
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	90 93 13 08 	sts	0x0813, r25
     246:	80 93 12 08 	sts	0x0812, r24
				if(cmd == 0)
     24a:	80 91 1a 08 	lds	r24, 0x081A
     24e:	90 91 1b 08 	lds	r25, 0x081B
     252:	89 2b       	or	r24, r25
     254:	19 f4       	brne	.+6      	; 0x25c <__vector_36+0x14a>
				{
					cancel_command();
     256:	0e 94 31 02 	call	0x462	; 0x462 <cancel_command>
     25a:	06 c0       	rjmp	.+12     	; 0x268 <__vector_36+0x156>
				}
				else
				{
					flag = 1;
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	90 93 0f 08 	sts	0x080F, r25
     264:	80 93 0e 08 	sts	0x080E, r24
				}
			}
			msg = 0;
     268:	10 92 11 08 	sts	0x0811, r1
     26c:	10 92 10 08 	sts	0x0810, r1
			count = 0;
     270:	10 92 15 08 	sts	0x0815, r1
     274:	10 92 14 08 	sts	0x0814, r1
			recv = 0;
			break;
		
	}
	PORTC = (1<<0);
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	88 b9       	out	0x08, r24	; 8
	
}
     27c:	ff 91       	pop	r31
     27e:	ef 91       	pop	r30
     280:	bf 91       	pop	r27
     282:	af 91       	pop	r26
     284:	9f 91       	pop	r25
     286:	8f 91       	pop	r24
     288:	7f 91       	pop	r23
     28a:	6f 91       	pop	r22
     28c:	5f 91       	pop	r21
     28e:	4f 91       	pop	r20
     290:	3f 91       	pop	r19
     292:	2f 91       	pop	r18
     294:	0f 90       	pop	r0
     296:	0b be       	out	0x3b, r0	; 59
     298:	0f 90       	pop	r0
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	0f 90       	pop	r0
     29e:	1f 90       	pop	r1
     2a0:	18 95       	reti

000002a2 <main>:
volatile unsigned int cmd, speed, time;
volatile int flag;

int main(void)
{
	msg = count = flag = header_received = 0;
     2a2:	10 92 19 08 	sts	0x0819, r1
     2a6:	10 92 18 08 	sts	0x0818, r1
     2aa:	10 92 0f 08 	sts	0x080F, r1
     2ae:	10 92 0e 08 	sts	0x080E, r1
     2b2:	80 91 0e 08 	lds	r24, 0x080E
     2b6:	90 91 0f 08 	lds	r25, 0x080F
     2ba:	90 93 15 08 	sts	0x0815, r25
     2be:	80 93 14 08 	sts	0x0814, r24
     2c2:	80 91 14 08 	lds	r24, 0x0814
     2c6:	90 91 15 08 	lds	r25, 0x0815
     2ca:	90 93 11 08 	sts	0x0811, r25
     2ce:	80 93 10 08 	sts	0x0810, r24
	
	DDRC  = 0x7F;
     2d2:	8f e7       	ldi	r24, 0x7F	; 127
     2d4:	87 b9       	out	0x07, r24	; 7

	PORTD &= ~0x80;	//PORT_LINK_PLUGIN = 0;   // no pull up
     2d6:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~0x20;	//PORT_ENABLE_RXD_LINK_PC = 0;
     2d8:	5d 98       	cbi	0x0b, 5	; 11
	PORTD |= 0x40;	//PORT_ENABLE_RXD_LINK_ZIGBEE = 1;
     2da:	5e 9a       	sbi	0x0b, 6	; 11

	zgb_initialize( 0 ); // Not using device index
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <zgb_initialize>
	dyn_init();
     2e4:	0e 94 65 04 	call	0x8ca	; 0x8ca <dyn_init>
	//set_sleep_mode(SLEEP_MODE_IDLE);
	//sei();	// Interrupt Enable	
	
	while(1)
	{
		sleep_mode();
     2e8:	83 b7       	in	r24, 0x33	; 51
     2ea:	81 60       	ori	r24, 0x01	; 1
     2ec:	83 bf       	out	0x33, r24	; 51
     2ee:	88 95       	sleep
     2f0:	83 b7       	in	r24, 0x33	; 51
     2f2:	8e 7f       	andi	r24, 0xFE	; 254
     2f4:	83 bf       	out	0x33, r24	; 51
		if(flag)
     2f6:	80 91 0e 08 	lds	r24, 0x080E
     2fa:	90 91 0f 08 	lds	r25, 0x080F
     2fe:	89 2b       	or	r24, r25
     300:	99 f3       	breq	.-26     	; 0x2e8 <main+0x46>
		{
			dyn_exec(cmd,speed,time);
     302:	80 91 1a 08 	lds	r24, 0x081A
     306:	90 91 1b 08 	lds	r25, 0x081B
     30a:	60 91 16 08 	lds	r22, 0x0816
     30e:	70 91 17 08 	lds	r23, 0x0817
     312:	40 91 12 08 	lds	r20, 0x0812
     316:	50 91 13 08 	lds	r21, 0x0813
     31a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <dyn_exec>
			flag = 0;
     31e:	10 92 0f 08 	sts	0x080F, r1
     322:	10 92 0e 08 	sts	0x080E, r1
     326:	e0 cf       	rjmp	.-64     	; 0x2e8 <main+0x46>

00000328 <check_delay>:
}

/* Must check what time value has been passed, since the max delay time is 4192 milliseconds (4.192 seconds)
If the time value is larger, several delay_ms commands will be passed, according to the value */
void check_delay(int* delays, unsigned int time)
{
     328:	fc 01       	movw	r30, r24
	// First value is the number of delay_ms commands to be issued,
	//  the second value is the delay amount for the last delay_ms
	delays[1] = time % 4; // Get the remainder, that is the time value for the last delay_ms to be called
     32a:	cb 01       	movw	r24, r22
     32c:	83 70       	andi	r24, 0x03	; 3
     32e:	90 70       	andi	r25, 0x00	; 0
     330:	93 83       	std	Z+3, r25	; 0x03
     332:	82 83       	std	Z+2, r24	; 0x02
	delays[0] = ((time - delays[1])/4); // Get the number of full delay_ms commands
     334:	68 1b       	sub	r22, r24
     336:	79 0b       	sbc	r23, r25
     338:	76 95       	lsr	r23
     33a:	67 95       	ror	r22
     33c:	76 95       	lsr	r23
     33e:	67 95       	ror	r22
     340:	71 83       	std	Z+1, r23	; 0x01
     342:	60 83       	st	Z, r22
	
}
     344:	08 95       	ret

00000346 <delay>:

void delay(unsigned int time)
{
     346:	ac 01       	movw	r20, r24

	if(time == 0)
     348:	00 97       	sbiw	r24, 0x00	; 0
     34a:	49 f0       	breq	.+18     	; 0x35e <delay+0x18>
     34c:	11 c0       	rjmp	.+34     	; 0x370 <delay+0x2a>
     34e:	80 e1       	ldi	r24, 0x10	; 16
     350:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     352:	f9 01       	movw	r30, r18
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <delay+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     358:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     35a:	d9 f7       	brne	.-10     	; 0x352 <delay+0xc>
     35c:	02 c0       	rjmp	.+4      	; 0x362 <delay+0x1c>
     35e:	20 e9       	ldi	r18, 0x90	; 144
     360:	31 e0       	ldi	r19, 0x01	; 1
	{
		while(stop_delay == 0)
     362:	80 91 1c 05 	lds	r24, 0x051C
     366:	90 91 1d 05 	lds	r25, 0x051D
     36a:	89 2b       	or	r24, r25
     36c:	81 f3       	breq	.-32     	; 0x34e <delay+0x8>
     36e:	0f c0       	rjmp	.+30     	; 0x38e <delay+0x48>
		}
		stop_delay = 0;
	}
	else
	{
		if(time > 9)
     370:	8a 30       	cpi	r24, 0x0A	; 10
     372:	91 05       	cpc	r25, r1
     374:	10 f0       	brcs	.+4      	; 0x37a <delay+0x34>
     376:	43 e0       	ldi	r20, 0x03	; 3
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	60 e9       	ldi	r22, 0x90	; 144
     380:	71 e0       	ldi	r23, 0x01	; 1
		time = 3; // wrap around. 
		unsigned int num_times;
		for(num_times=0;num_times<time;num_times++)
		{
			if(stop_delay == 1)
     382:	80 91 1c 05 	lds	r24, 0x051C
     386:	90 91 1d 05 	lds	r25, 0x051D
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	29 f4       	brne	.+10     	; 0x398 <delay+0x52>
			{
				stop_delay = 0;
     38e:	10 92 1d 05 	sts	0x051D, r1
     392:	10 92 1c 05 	sts	0x051C, r1
     396:	08 95       	ret
				break;
     398:	80 e1       	ldi	r24, 0x10	; 16
     39a:	97 e2       	ldi	r25, 0x27	; 39
     39c:	fb 01       	movw	r30, r22
     39e:	31 97       	sbiw	r30, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <delay+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3a4:	d9 f7       	brne	.-10     	; 0x39c <delay+0x56>
	else
	{
		if(time > 9)
		time = 3; // wrap around. 
		unsigned int num_times;
		for(num_times=0;num_times<time;num_times++)
     3a6:	2f 5f       	subi	r18, 0xFF	; 255
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
     3aa:	24 17       	cp	r18, r20
     3ac:	35 07       	cpc	r19, r21
     3ae:	48 f3       	brcs	.-46     	; 0x382 <delay+0x3c>
     3b0:	08 95       	ret

000003b2 <set_stop_delay>:
	
}

void set_stop_delay(int flag)
{
	stop_delay = flag;
     3b2:	90 93 1d 05 	sts	0x051D, r25
     3b6:	80 93 1c 05 	sts	0x051C, r24
}
     3ba:	08 95       	ret

000003bc <confirm>:

void confirm()
{
	zgb_tx_data(1);
     3bc:	61 e0       	ldi	r22, 0x01	; 1
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <zgb_tx_data>
}
     3c8:	08 95       	ret

000003ca <check_if_moving>:
		confirm();
	}
}

int check_if_moving()
{
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
	int front_left = dxl_read_word (FRONT_LEFT, MOVING );
     3d6:	8a e0       	ldi	r24, 0x0A	; 10
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	66 e2       	ldi	r22, 0x26	; 38
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	0e 94 43 07 	call	0xe86	; 0xe86 <dxl_read_word>
     3e2:	7c 01       	movw	r14, r24
	int front_right = dxl_read_word( FRONT_RIGHT, MOVING );
     3e4:	82 e0       	ldi	r24, 0x02	; 2
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	66 e2       	ldi	r22, 0x26	; 38
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	0e 94 43 07 	call	0xe86	; 0xe86 <dxl_read_word>
     3f0:	8c 01       	movw	r16, r24
	int back_left = dxl_read_word( BACK_LEFT, MOVING );
     3f2:	84 e0       	ldi	r24, 0x04	; 4
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	66 e2       	ldi	r22, 0x26	; 38
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	0e 94 43 07 	call	0xe86	; 0xe86 <dxl_read_word>
     3fe:	ec 01       	movw	r28, r24
	int back_right = dxl_read_word( BACK_LEFT, MOVING );
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	66 e2       	ldi	r22, 0x26	; 38
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	0e 94 43 07 	call	0xe86	; 0xe86 <dxl_read_word>
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	89 2b       	or	r24, r25
     412:	11 f0       	breq	.+4      	; 0x418 <check_if_moving+0x4e>
     414:	41 e0       	ldi	r20, 0x01	; 1
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	cd 2b       	or	r28, r29
     41e:	11 f0       	breq	.+4      	; 0x424 <check_if_moving+0x5a>
     420:	21 e0       	ldi	r18, 0x01	; 1
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	42 2b       	or	r20, r18
     426:	53 2b       	or	r21, r19
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	ef 28       	or	r14, r15
     42c:	09 f0       	breq	.+2      	; 0x430 <check_if_moving+0x66>
     42e:	21 e0       	ldi	r18, 0x01	; 1
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	01 2b       	or	r16, r17
     434:	09 f0       	breq	.+2      	; 0x438 <check_if_moving+0x6e>
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	28 2b       	or	r18, r24
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	24 2b       	or	r18, r20
     43e:	35 2b       	or	r19, r21
	int is_moving = (front_left != 0) | (front_right != 0) | (back_left != 0) | (back_right != 0);
	
	return is_moving;
}
     440:	c9 01       	movw	r24, r18
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	0f 91       	pop	r16
     44a:	ff 90       	pop	r15
     44c:	ef 90       	pop	r14
     44e:	08 95       	ret

00000450 <dyn_stop>:
	dxl_txrx_packet();
}

void dyn_stop()
{
	dxl_write_word(BROADCAST_ID, MOVING_SPEED_L, 0);
     450:	8e ef       	ldi	r24, 0xFE	; 254
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	60 e2       	ldi	r22, 0x20	; 32
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	0e 94 30 07 	call	0xe60	; 0xe60 <dxl_write_word>
}
     460:	08 95       	ret

00000462 <cancel_command>:

void cancel_command()
{
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
	PORTC = ~(1<<1);
     466:	8d ef       	ldi	r24, 0xFD	; 253
     468:	88 b9       	out	0x08, r24	; 8
	//int status = check_if_moving();
	PORTC = ~(1<<2);
     46a:	8b ef       	ldi	r24, 0xFB	; 251
     46c:	88 b9       	out	0x08, r24	; 8
	if(is_executing_cmd == 1)
     46e:	c0 91 1e 05 	lds	r28, 0x051E
     472:	d0 91 1f 05 	lds	r29, 0x051F
     476:	c1 30       	cpi	r28, 0x01	; 1
     478:	d1 05       	cpc	r29, r1
     47a:	89 f4       	brne	.+34     	; 0x49e <cancel_command+0x3c>
	{
		PORTC = ~(1<<3);
     47c:	87 ef       	ldi	r24, 0xF7	; 247
     47e:	88 b9       	out	0x08, r24	; 8
	dxl_txrx_packet();
}

void dyn_stop()
{
	dxl_write_word(BROADCAST_ID, MOVING_SPEED_L, 0);
     480:	8e ef       	ldi	r24, 0xFE	; 254
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	60 e2       	ldi	r22, 0x20	; 32
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	0e 94 30 07 	call	0xe60	; 0xe60 <dxl_write_word>
	PORTC = ~(1<<2);
	if(is_executing_cmd == 1)
	{
		PORTC = ~(1<<3);
		dyn_stop();
		PORTC = ~(1<<4);
     490:	8f ee       	ldi	r24, 0xEF	; 239
     492:	88 b9       	out	0x08, r24	; 8
		stop_delay = 1;
     494:	d0 93 1d 05 	sts	0x051D, r29
     498:	c0 93 1c 05 	sts	0x051C, r28
     49c:	08 c0       	rjmp	.+16     	; 0x4ae <cancel_command+0x4c>
	}
	else
	{
		PORTC = ~(1<<5);
     49e:	8f ed       	ldi	r24, 0xDF	; 223
     4a0:	88 b9       	out	0x08, r24	; 8
	stop_delay = flag;
}

void confirm()
{
	zgb_tx_data(1);
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <zgb_tx_data>
	else
	{
		PORTC = ~(1<<5);
		confirm();
	}
	PORTC = ~(1<<6);
     4ae:	8f eb       	ldi	r24, 0xBF	; 191
     4b0:	88 b9       	out	0x08, r24	; 8
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <send_dxl_broadcast>:
/**
  * Sends a broadcast message to the four servo motors. The values represent the movement speed, 
  * ranging 0-1023 and comprising two bytes
  */
void send_dxl_broadcast(int front_left, int front_right, int back_left, int back_right)
{
     4b8:	af 92       	push	r10
     4ba:	bf 92       	push	r11
     4bc:	cf 92       	push	r12
     4be:	df 92       	push	r13
     4c0:	ef 92       	push	r14
     4c2:	ff 92       	push	r15
     4c4:	0f 93       	push	r16
     4c6:	1f 93       	push	r17
     4c8:	df 93       	push	r29
     4ca:	cf 93       	push	r28
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	28 97       	sbiw	r28, 0x08	; 8
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	f8 94       	cli
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	cd bf       	out	0x3d, r28	; 61
	int index;
	int values[4] = {front_left, front_right, back_left, back_right};
     4dc:	9a 83       	std	Y+2, r25	; 0x02
     4de:	89 83       	std	Y+1, r24	; 0x01
     4e0:	7c 83       	std	Y+4, r23	; 0x04
     4e2:	6b 83       	std	Y+3, r22	; 0x03
     4e4:	5e 83       	std	Y+6, r21	; 0x06
     4e6:	4d 83       	std	Y+5, r20	; 0x05
     4e8:	38 87       	std	Y+8, r19	; 0x08
     4ea:	2f 83       	std	Y+7, r18	; 0x07
	dxl_set_txpacket_id(BROADCAST_ID);
     4ec:	8e ef       	ldi	r24, 0xFE	; 254
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 ae 05 	call	0xb5c	; 0xb5c <dxl_set_txpacket_id>
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
     4f4:	83 e8       	ldi	r24, 0x83	; 131
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 b1 05 	call	0xb62	; 0xb62 <dxl_set_txpacket_instruction>
	dxl_set_txpacket_parameter(0, MOVING_SPEED_L);
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	60 e2       	ldi	r22, 0x20	; 32
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	0e 94 b4 05 	call	0xb68	; 0xb68 <dxl_set_txpacket_parameter>
	dxl_set_txpacket_parameter(1, 2);
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	62 e0       	ldi	r22, 0x02	; 2
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	0e 94 b4 05 	call	0xb68	; 0xb68 <dxl_set_txpacket_parameter>
     514:	cc 24       	eor	r12, r12
     516:	dd 24       	eor	r13, r13
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	e9 2e       	mov	r14, r25
     51c:	f1 2c       	mov	r15, r1
	for (index=0;index<4;index++) // Fill with parameters for each servo moror 	
	{
		dxl_set_txpacket_parameter(2+3*index, ids[index]);
		dxl_set_txpacket_parameter(2+3*index+1, dxl_get_lowbyte(values[index]));
     51e:	5e 01       	movw	r10, r28
     520:	08 94       	sec
     522:	a1 1c       	adc	r10, r1
     524:	b1 1c       	adc	r11, r1
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, MOVING_SPEED_L);
	dxl_set_txpacket_parameter(1, 2);
	for (index=0;index<4;index++) // Fill with parameters for each servo moror 	
	{
		dxl_set_txpacket_parameter(2+3*index, ids[index]);
     526:	f6 01       	movw	r30, r12
     528:	e7 5f       	subi	r30, 0xF7	; 247
     52a:	fb 4f       	sbci	r31, 0xFB	; 251
     52c:	60 81       	ld	r22, Z
     52e:	71 81       	ldd	r23, Z+1	; 0x01
     530:	c7 01       	movw	r24, r14
     532:	0e 94 b4 05 	call	0xb68	; 0xb68 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(2+3*index+1, dxl_get_lowbyte(values[index]));
     536:	f5 01       	movw	r30, r10
     538:	ec 0d       	add	r30, r12
     53a:	fd 1d       	adc	r31, r13
     53c:	00 81       	ld	r16, Z
     53e:	11 81       	ldd	r17, Z+1	; 0x01
     540:	c8 01       	movw	r24, r16
     542:	0e 94 d6 05 	call	0xbac	; 0xbac <dxl_get_lowbyte>
     546:	bc 01       	movw	r22, r24
     548:	c7 01       	movw	r24, r14
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	0e 94 b4 05 	call	0xb68	; 0xb68 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(2+3*index+2, dxl_get_highbyte(values[index]));
     550:	c8 01       	movw	r24, r16
     552:	0e 94 da 05 	call	0xbb4	; 0xbb4 <dxl_get_highbyte>
     556:	bc 01       	movw	r22, r24
     558:	c7 01       	movw	r24, r14
     55a:	02 96       	adiw	r24, 0x02	; 2
     55c:	0e 94 b4 05 	call	0xb68	; 0xb68 <dxl_set_txpacket_parameter>
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	c8 0e       	add	r12, r24
     566:	d9 1e       	adc	r13, r25
     568:	83 e0       	ldi	r24, 0x03	; 3
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	e8 0e       	add	r14, r24
     56e:	f9 1e       	adc	r15, r25
	int values[4] = {front_left, front_right, back_left, back_right};
	dxl_set_txpacket_id(BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, MOVING_SPEED_L);
	dxl_set_txpacket_parameter(1, 2);
	for (index=0;index<4;index++) // Fill with parameters for each servo moror 	
     570:	98 e0       	ldi	r25, 0x08	; 8
     572:	c9 16       	cp	r12, r25
     574:	d1 04       	cpc	r13, r1
     576:	b9 f6       	brne	.-82     	; 0x526 <send_dxl_broadcast+0x6e>
	{
		dxl_set_txpacket_parameter(2+3*index, ids[index]);
		dxl_set_txpacket_parameter(2+3*index+1, dxl_get_lowbyte(values[index]));
		dxl_set_txpacket_parameter(2+3*index+2, dxl_get_highbyte(values[index]));
	}
	dxl_set_txpacket_length((2+1)*4+4);
     578:	80 e1       	ldi	r24, 0x10	; 16
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 b9 05 	call	0xb72	; 0xb72 <dxl_set_txpacket_length>
	dxl_txrx_packet();
     580:	0e 94 13 07 	call	0xe26	; 0xe26 <dxl_txrx_packet>
}
     584:	28 96       	adiw	r28, 0x08	; 8
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	cf 91       	pop	r28
     592:	df 91       	pop	r29
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	ff 90       	pop	r15
     59a:	ef 90       	pop	r14
     59c:	df 90       	pop	r13
     59e:	cf 90       	pop	r12
     5a0:	bf 90       	pop	r11
     5a2:	af 90       	pop	r10
     5a4:	08 95       	ret

000005a6 <dyn_turn_right>:
		confirm();
	}
}

void dyn_turn_right(int direction, unsigned int speed,unsigned int time)
{
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	eb 01       	movw	r28, r22
     5b8:	6a 01       	movw	r12, r20
	switch(direction)
     5ba:	00 97       	sbiw	r24, 0x00	; 0
     5bc:	19 f0       	breq	.+6      	; 0x5c4 <dyn_turn_right+0x1e>
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	c1 f5       	brne	.+112    	; 0x632 <dyn_turn_right+0x8c>
     5c2:	1d c0       	rjmp	.+58     	; 0x5fe <dyn_turn_right+0x58>
	{
		case 0:
			send_dxl_broadcast(CW_SPEED_L + speed,CCW_SPEED_L + (speed)*TURN_WEIGHT,CW_SPEED_L + speed,CCW_SPEED_L + (speed)*TURN_WEIGHT);
     5c4:	e1 2c       	mov	r14, r1
     5c6:	24 e0       	ldi	r18, 0x04	; 4
     5c8:	f2 2e       	mov	r15, r18
     5ca:	e6 0e       	add	r14, r22
     5cc:	f7 1e       	adc	r15, r23
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 18 10 	call	0x2030	; 0x2030 <__floatunsisf>
     5d6:	23 e3       	ldi	r18, 0x33	; 51
     5d8:	33 e3       	ldi	r19, 0x33	; 51
     5da:	43 e3       	ldi	r20, 0x33	; 51
     5dc:	5f e3       	ldi	r21, 0x3F	; 63
     5de:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__addsf3>
     5ee:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fixsfsi>
     5f2:	8b 01       	movw	r16, r22
     5f4:	9c 01       	movw	r18, r24
     5f6:	c7 01       	movw	r24, r14
     5f8:	b8 01       	movw	r22, r16
     5fa:	a7 01       	movw	r20, r14
     5fc:	17 c0       	rjmp	.+46     	; 0x62c <dyn_turn_right+0x86>
			break;
		case 1:
			send_dxl_broadcast(CCW_SPEED_L + speed,CW_SPEED_L + (speed)*TURN_WEIGHT,CCW_SPEED_L + speed,CW_SPEED_L + (speed)*TURN_WEIGHT);
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 18 10 	call	0x2030	; 0x2030 <__floatunsisf>
     606:	23 e3       	ldi	r18, 0x33	; 51
     608:	33 e3       	ldi	r19, 0x33	; 51
     60a:	43 e3       	ldi	r20, 0x33	; 51
     60c:	5f e3       	ldi	r21, 0x3F	; 63
     60e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	40 e8       	ldi	r20, 0x80	; 128
     618:	54 e4       	ldi	r21, 0x44	; 68
     61a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__addsf3>
     61e:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fixsfsi>
     622:	8b 01       	movw	r16, r22
     624:	9c 01       	movw	r18, r24
     626:	ce 01       	movw	r24, r28
     628:	b8 01       	movw	r22, r16
     62a:	ae 01       	movw	r20, r28
     62c:	98 01       	movw	r18, r16
     62e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <send_dxl_broadcast>
			break;
	}
				
	delay(time);
     632:	c6 01       	movw	r24, r12
     634:	0e 94 a3 01 	call	0x346	; 0x346 <delay>
	
	if(time != 0)
     638:	cd 28       	or	r12, r13
     63a:	71 f0       	breq	.+28     	; 0x658 <dyn_turn_right+0xb2>
	dxl_txrx_packet();
}

void dyn_stop()
{
	dxl_write_word(BROADCAST_ID, MOVING_SPEED_L, 0);
     63c:	8e ef       	ldi	r24, 0xFE	; 254
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	60 e2       	ldi	r22, 0x20	; 32
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	0e 94 30 07 	call	0xe60	; 0xe60 <dxl_write_word>
	stop_delay = flag;
}

void confirm()
{
	zgb_tx_data(1);
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <zgb_tx_data>
	if(time != 0)
	{
		dyn_stop();
		confirm();
	}
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	df 90       	pop	r13
     666:	cf 90       	pop	r12
     668:	08 95       	ret

0000066a <dyn_turn_left>:
		confirm();
	}
}

void dyn_turn_left(int direction, unsigned int speed,unsigned int time)
{
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	eb 01       	movw	r28, r22
     67c:	6a 01       	movw	r12, r20
	switch(direction)
     67e:	00 97       	sbiw	r24, 0x00	; 0
     680:	e9 f0       	breq	.+58     	; 0x6bc <dyn_turn_left+0x52>
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	a9 f5       	brne	.+106    	; 0x6f0 <dyn_turn_left+0x86>
	{
		case 1:
			send_dxl_broadcast(CCW_SPEED_L + (speed)*TURN_WEIGHT, CW_SPEED_L + speed, CCW_SPEED_L + (speed)*TURN_WEIGHT,CW_SPEED_L + speed);
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 18 10 	call	0x2030	; 0x2030 <__floatunsisf>
     68e:	23 e3       	ldi	r18, 0x33	; 51
     690:	33 e3       	ldi	r19, 0x33	; 51
     692:	43 e3       	ldi	r20, 0x33	; 51
     694:	5f e3       	ldi	r21, 0x3F	; 63
     696:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__addsf3>
     6a6:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fixsfsi>
     6aa:	7b 01       	movw	r14, r22
     6ac:	8c 01       	movw	r16, r24
     6ae:	9e 01       	movw	r18, r28
     6b0:	20 50       	subi	r18, 0x00	; 0
     6b2:	3c 4f       	sbci	r19, 0xFC	; 252
     6b4:	cb 01       	movw	r24, r22
     6b6:	b9 01       	movw	r22, r18
     6b8:	a7 01       	movw	r20, r14
     6ba:	18 c0       	rjmp	.+48     	; 0x6ec <dyn_turn_left+0x82>
			break;
		case 0:
			send_dxl_broadcast(CW_SPEED_L + (speed)*TURN_WEIGHT, CCW_SPEED_L + speed, CW_SPEED_L + (speed)*TURN_WEIGHT, CCW_SPEED_L + speed);
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 18 10 	call	0x2030	; 0x2030 <__floatunsisf>
     6c4:	23 e3       	ldi	r18, 0x33	; 51
     6c6:	33 e3       	ldi	r19, 0x33	; 51
     6c8:	43 e3       	ldi	r20, 0x33	; 51
     6ca:	5f e3       	ldi	r21, 0x3F	; 63
     6cc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e8       	ldi	r20, 0x80	; 128
     6d6:	54 e4       	ldi	r21, 0x44	; 68
     6d8:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__addsf3>
     6dc:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fixsfsi>
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	cb 01       	movw	r24, r22
     6e6:	be 01       	movw	r22, r28
     6e8:	a9 01       	movw	r20, r18
     6ea:	9e 01       	movw	r18, r28
     6ec:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <send_dxl_broadcast>
			break;
	}
	delay(time);
     6f0:	c6 01       	movw	r24, r12
     6f2:	0e 94 a3 01 	call	0x346	; 0x346 <delay>
	if(time != 0)
     6f6:	cd 28       	or	r12, r13
     6f8:	71 f0       	breq	.+28     	; 0x716 <dyn_turn_left+0xac>
	dxl_txrx_packet();
}

void dyn_stop()
{
	dxl_write_word(BROADCAST_ID, MOVING_SPEED_L, 0);
     6fa:	8e ef       	ldi	r24, 0xFE	; 254
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	60 e2       	ldi	r22, 0x20	; 32
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	0e 94 30 07 	call	0xe60	; 0xe60 <dxl_write_word>
	stop_delay = flag;
}

void confirm()
{
	zgb_tx_data(1);
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <zgb_tx_data>
	if(time != 0)
	{
		dyn_stop();
		confirm();
	}
}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	08 95       	ret

00000728 <dyn_backward>:
	}
	
}

void dyn_backward(unsigned int speed,unsigned int time)
{
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	fc 01       	movw	r30, r24
     72e:	8b 01       	movw	r16, r22
	send_dxl_broadcast(CW_SPEED_L + speed,CCW_SPEED_L + speed,CW_SPEED_L + speed,CCW_SPEED_L + speed );
     730:	ac 01       	movw	r20, r24
     732:	40 50       	subi	r20, 0x00	; 0
     734:	5c 4f       	sbci	r21, 0xFC	; 252
     736:	ca 01       	movw	r24, r20
     738:	bf 01       	movw	r22, r30
     73a:	9f 01       	movw	r18, r30
     73c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <send_dxl_broadcast>
	delay(time);
     740:	c8 01       	movw	r24, r16
     742:	0e 94 a3 01 	call	0x346	; 0x346 <delay>

	if(time != 0)
     746:	01 2b       	or	r16, r17
     748:	71 f0       	breq	.+28     	; 0x766 <dyn_backward+0x3e>
	dxl_txrx_packet();
}

void dyn_stop()
{
	dxl_write_word(BROADCAST_ID, MOVING_SPEED_L, 0);
     74a:	8e ef       	ldi	r24, 0xFE	; 254
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	60 e2       	ldi	r22, 0x20	; 32
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	0e 94 30 07 	call	0xe60	; 0xe60 <dxl_write_word>
	stop_delay = flag;
}

void confirm()
{
	zgb_tx_data(1);
     75a:	61 e0       	ldi	r22, 0x01	; 1
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <zgb_tx_data>
	if(time != 0)
	{
		dyn_stop();
		confirm();
	}
}
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <dyn_forward>:
	}
	PORTC = ~(1<<6);
}

void dyn_forward(unsigned int speed,unsigned int time)
{
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	fc 01       	movw	r30, r24
     772:	8b 01       	movw	r16, r22
	
	send_dxl_broadcast(CCW_SPEED_L+speed, CW_SPEED_L+speed, CCW_SPEED_L+speed, CW_SPEED_L+speed);
     774:	9c 01       	movw	r18, r24
     776:	20 50       	subi	r18, 0x00	; 0
     778:	3c 4f       	sbci	r19, 0xFC	; 252
     77a:	b9 01       	movw	r22, r18
     77c:	af 01       	movw	r20, r30
     77e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <send_dxl_broadcast>
	delay(time);
     782:	c8 01       	movw	r24, r16
     784:	0e 94 a3 01 	call	0x346	; 0x346 <delay>
	if(time != 0)
     788:	01 2b       	or	r16, r17
     78a:	71 f0       	breq	.+28     	; 0x7a8 <dyn_forward+0x3c>
	dxl_txrx_packet();
}

void dyn_stop()
{
	dxl_write_word(BROADCAST_ID, MOVING_SPEED_L, 0);
     78c:	8e ef       	ldi	r24, 0xFE	; 254
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	60 e2       	ldi	r22, 0x20	; 32
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	0e 94 30 07 	call	0xe60	; 0xe60 <dxl_write_word>
	stop_delay = flag;
}

void confirm()
{
	zgb_tx_data(1);
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <zgb_tx_data>
	{
		dyn_stop();
		confirm();
	}
	
}
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	08 95       	ret

000007ae <dyn_exec>:
	return 0;
}

int dyn_exec(unsigned int cmd,unsigned int speed,unsigned int time)
{
	stop_delay = 0;
     7ae:	10 92 1d 05 	sts	0x051D, r1
     7b2:	10 92 1c 05 	sts	0x051C, r1
	switch(cmd)
     7b6:	83 30       	cpi	r24, 0x03	; 3
     7b8:	91 05       	cpc	r25, r1
     7ba:	39 f1       	breq	.+78     	; 0x80a <dyn_exec+0x5c>
     7bc:	84 30       	cpi	r24, 0x04	; 4
     7be:	91 05       	cpc	r25, r1
     7c0:	38 f4       	brcc	.+14     	; 0x7d0 <dyn_exec+0x22>
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	91 05       	cpc	r25, r1
     7c6:	69 f0       	breq	.+26     	; 0x7e2 <dyn_exec+0x34>
     7c8:	02 97       	sbiw	r24, 0x02	; 2
     7ca:	09 f0       	breq	.+2      	; 0x7ce <dyn_exec+0x20>
     7cc:	45 c0       	rjmp	.+138    	; 0x858 <dyn_exec+0xaa>
     7ce:	12 c0       	rjmp	.+36     	; 0x7f4 <dyn_exec+0x46>
     7d0:	85 30       	cpi	r24, 0x05	; 5
     7d2:	91 05       	cpc	r25, r1
     7d4:	41 f1       	breq	.+80     	; 0x826 <dyn_exec+0x78>
     7d6:	85 30       	cpi	r24, 0x05	; 5
     7d8:	91 05       	cpc	r25, r1
     7da:	f0 f0       	brcs	.+60     	; 0x818 <dyn_exec+0x6a>
     7dc:	06 97       	sbiw	r24, 0x06	; 6
     7de:	e1 f5       	brne	.+120    	; 0x858 <dyn_exec+0xaa>
     7e0:	2d c0       	rjmp	.+90     	; 0x83c <dyn_exec+0x8e>
	{
		case 1: // Forward
			is_executing_cmd = 1;
     7e2:	90 93 1f 05 	sts	0x051F, r25
     7e6:	80 93 1e 05 	sts	0x051E, r24
			dyn_forward(speed, time);
     7ea:	cb 01       	movw	r24, r22
     7ec:	ba 01       	movw	r22, r20
     7ee:	0e 94 b6 03 	call	0x76c	; 0x76c <dyn_forward>
     7f2:	2e c0       	rjmp	.+92     	; 0x850 <dyn_exec+0xa2>
			is_executing_cmd = 0;
			break;
		case 2: // Backward
			is_executing_cmd = 1;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	90 93 1f 05 	sts	0x051F, r25
     7fc:	80 93 1e 05 	sts	0x051E, r24
			dyn_backward(speed, time);
     800:	cb 01       	movw	r24, r22
     802:	ba 01       	movw	r22, r20
     804:	0e 94 94 03 	call	0x728	; 0x728 <dyn_backward>
     808:	23 c0       	rjmp	.+70     	; 0x850 <dyn_exec+0xa2>
			is_executing_cmd = 0;
			break;
		case 3: // Turn forward Left 
			is_executing_cmd = 1;
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	90 93 1f 05 	sts	0x051F, r25
     812:	80 93 1e 05 	sts	0x051E, r24
     816:	0f c0       	rjmp	.+30     	; 0x836 <dyn_exec+0x88>
			dyn_turn_left(1,speed, time);
			is_executing_cmd = 0;
			break;
		case 4: // Turn forward right 
			is_executing_cmd = 1;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	90 93 1f 05 	sts	0x051F, r25
     820:	80 93 1e 05 	sts	0x051E, r24
     824:	13 c0       	rjmp	.+38     	; 0x84c <dyn_exec+0x9e>
			dyn_turn_right(1,speed,time);
			is_executing_cmd = 0;
			break;
		case 5: // Turn backward left
			is_executing_cmd = 1;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	90 93 1f 05 	sts	0x051F, r25
     82e:	80 93 1e 05 	sts	0x051E, r24
			dyn_turn_left(0,speed,time);
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 35 03 	call	0x66a	; 0x66a <dyn_turn_left>
     83a:	0a c0       	rjmp	.+20     	; 0x850 <dyn_exec+0xa2>
			is_executing_cmd = 0;
			break;
		case 6: // Turn backward right
			is_executing_cmd = 1;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	90 93 1f 05 	sts	0x051F, r25
     844:	80 93 1e 05 	sts	0x051E, r24
			dyn_turn_right(0, speed, time);
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <dyn_turn_right>
			is_executing_cmd = 0;
     850:	10 92 1f 05 	sts	0x051F, r1
     854:	10 92 1e 05 	sts	0x051E, r1
		default:
			break;
			
	}
	return 0;
}
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	08 95       	ret

0000085e <test_robot_turning>:

int test_robot_turning()
{
	while(1)
	{
		dyn_forward(600,2);
     85e:	88 e5       	ldi	r24, 0x58	; 88
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	62 e0       	ldi	r22, 0x02	; 2
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	0e 94 b6 03 	call	0x76c	; 0x76c <dyn_forward>
		dyn_turn_left(1,600,2);
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	68 e5       	ldi	r22, 0x58	; 88
     870:	72 e0       	ldi	r23, 0x02	; 2
     872:	42 e0       	ldi	r20, 0x02	; 2
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	0e 94 35 03 	call	0x66a	; 0x66a <dyn_turn_left>
		dyn_turn_right(1,600,2);
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	68 e5       	ldi	r22, 0x58	; 88
     880:	72 e0       	ldi	r23, 0x02	; 2
     882:	42 e0       	ldi	r20, 0x02	; 2
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <dyn_turn_right>
		dyn_backward(600,2);
     88a:	88 e5       	ldi	r24, 0x58	; 88
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	62 e0       	ldi	r22, 0x02	; 2
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	0e 94 94 03 	call	0x728	; 0x728 <dyn_backward>
     896:	e3 cf       	rjmp	.-58     	; 0x85e <test_robot_turning>

00000898 <set_wheel_mode>:
	return INIT_SUCCESS;

}

int set_wheel_mode(int id)
{
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	8c 01       	movw	r16, r24
	int comm_status;		
	dxl_write_word(id, CW_ANGLE_LIMIT_L, 0);
     89e:	66 e0       	ldi	r22, 0x06	; 6
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	40 e0       	ldi	r20, 0x00	; 0
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	0e 94 30 07 	call	0xe60	; 0xe60 <dxl_write_word>
	comm_status = dxl_get_result();
     8aa:	0e 94 a9 05 	call	0xb52	; 0xb52 <dxl_get_result>
	
	dxl_write_word(id, CCW_ANGLE_LIMIT_L, 0);
     8ae:	c8 01       	movw	r24, r16
     8b0:	68 e0       	ldi	r22, 0x08	; 8
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	0e 94 30 07 	call	0xe60	; 0xe60 <dxl_write_word>
	comm_status = dxl_get_result();
     8bc:	0e 94 a9 05 	call	0xb52	; 0xb52 <dxl_get_result>

	return CW_CCW_ANGLE_SUCCESS;

}
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	08 95       	ret

000008ca <dyn_init>:
		printf("Instruction code error!\n");
}

int dyn_init()
{
	int dxl_res = dxl_initialize( 0, DEFAULT_BAUDNUM ); // Not using device index
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	62 e2       	ldi	r22, 0x22	; 34
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	0e 94 aa 07 	call	0xf54	; 0xf54 <dxl_initialize>
	if(dxl_res == 0) // Failed to init dxl 
     8d6:	89 2b       	or	r24, r25
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <dyn_init+0x16>
     8da:	2f ef       	ldi	r18, 0xFF	; 255
     8dc:	3f ef       	ldi	r19, 0xFF	; 255
     8de:	12 c0       	rjmp	.+36     	; 0x904 <dyn_init+0x3a>
		return DXL_FAIL;
	set_wheel_mode(FRONT_LEFT);
     8e0:	8a e0       	ldi	r24, 0x0A	; 10
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 4c 04 	call	0x898	; 0x898 <set_wheel_mode>
	set_wheel_mode(FRONT_RIGHT);
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 4c 04 	call	0x898	; 0x898 <set_wheel_mode>
	set_wheel_mode(BACK_LEFT);
     8f0:	84 e0       	ldi	r24, 0x04	; 4
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 4c 04 	call	0x898	; 0x898 <set_wheel_mode>
	set_wheel_mode(BACK_RIGHT);
     8f8:	86 e0       	ldi	r24, 0x06	; 6
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 4c 04 	call	0x898	; 0x898 <set_wheel_mode>
     900:	21 e0       	ldi	r18, 0x01	; 1
     902:	30 e0       	ldi	r19, 0x00	; 0
	return INIT_SUCCESS;

}
     904:	c9 01       	movw	r24, r18
     906:	08 95       	ret

00000908 <print_error_code>:
}

// Print error bit of status packet
void print_error_code()
{
	if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 bc 05 	call	0xb78	; 0xb78 <dxl_get_rxpacket_error>
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	21 f4       	brne	.+8      	; 0x91c <print_error_code+0x14>
		printf("Input voltage error!\n");
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	92 e0       	ldi	r25, 0x02	; 2
     918:	0e 94 f6 12 	call	0x25ec	; 0x25ec <puts>

	if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 bc 05 	call	0xb78	; 0xb78 <dxl_get_rxpacket_error>
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	21 f4       	brne	.+8      	; 0x930 <print_error_code+0x28>
		printf("Angle limit error!\n");
     928:	85 e1       	ldi	r24, 0x15	; 21
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
     930:	84 e0       	ldi	r24, 0x04	; 4
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 bc 05 	call	0xb78	; 0xb78 <dxl_get_rxpacket_error>
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	21 f4       	brne	.+8      	; 0x944 <print_error_code+0x3c>
		printf("Overheat error!\n");
     93c:	88 e2       	ldi	r24, 0x28	; 40
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	0e 94 f6 12 	call	0x25ec	; 0x25ec <puts>

	if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
     944:	88 e0       	ldi	r24, 0x08	; 8
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 bc 05 	call	0xb78	; 0xb78 <dxl_get_rxpacket_error>
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	21 f4       	brne	.+8      	; 0x958 <print_error_code+0x50>
		printf("Out of range error!\n");
     950:	88 e3       	ldi	r24, 0x38	; 56
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 f6 12 	call	0x25ec	; 0x25ec <puts>

	if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
     958:	80 e1       	ldi	r24, 0x10	; 16
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 bc 05 	call	0xb78	; 0xb78 <dxl_get_rxpacket_error>
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	21 f4       	brne	.+8      	; 0x96c <print_error_code+0x64>
		printf("Checksum error!\n");
     964:	8c e4       	ldi	r24, 0x4C	; 76
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	0e 94 f6 12 	call	0x25ec	; 0x25ec <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
     96c:	80 e2       	ldi	r24, 0x20	; 32
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 bc 05 	call	0xb78	; 0xb78 <dxl_get_rxpacket_error>
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	21 f4       	brne	.+8      	; 0x980 <print_error_code+0x78>
		printf("Overload error!\n");
     978:	8c e5       	ldi	r24, 0x5C	; 92
     97a:	92 e0       	ldi	r25, 0x02	; 2
     97c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <puts>

	if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
     980:	80 e4       	ldi	r24, 0x40	; 64
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 bc 05 	call	0xb78	; 0xb78 <dxl_get_rxpacket_error>
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	21 f4       	brne	.+8      	; 0x994 <print_error_code+0x8c>
		printf("Instruction code error!\n");
     98c:	8c e6       	ldi	r24, 0x6C	; 108
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	0e 94 f6 12 	call	0x25ec	; 0x25ec <puts>
     994:	08 95       	ret

00000996 <print_comm_status>:
int ids[4] = {FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT}; 
	
// Print communication result
void print_comm_status(int comm_status)
{
	switch(comm_status)
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	91 05       	cpc	r25, r1
     99a:	a9 f0       	breq	.+42     	; 0x9c6 <print_comm_status+0x30>
     99c:	85 30       	cpi	r24, 0x05	; 5
     99e:	91 05       	cpc	r25, r1
     9a0:	34 f4       	brge	.+12     	; 0x9ae <print_comm_status+0x18>
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	91 05       	cpc	r25, r1
     9a6:	61 f0       	breq	.+24     	; 0x9c0 <print_comm_status+0x2a>
     9a8:	03 97       	sbiw	r24, 0x03	; 3
     9aa:	e1 f4       	brne	.+56     	; 0x9e4 <print_comm_status+0x4e>
     9ac:	0f c0       	rjmp	.+30     	; 0x9cc <print_comm_status+0x36>
     9ae:	86 30       	cpi	r24, 0x06	; 6
     9b0:	91 05       	cpc	r25, r1
     9b2:	91 f0       	breq	.+36     	; 0x9d8 <print_comm_status+0x42>
     9b4:	86 30       	cpi	r24, 0x06	; 6
     9b6:	91 05       	cpc	r25, r1
     9b8:	64 f0       	brlt	.+24     	; 0x9d2 <print_comm_status+0x3c>
     9ba:	07 97       	sbiw	r24, 0x07	; 7
     9bc:	99 f4       	brne	.+38     	; 0x9e4 <print_comm_status+0x4e>
     9be:	0f c0       	rjmp	.+30     	; 0x9de <print_comm_status+0x48>
	{
	case COMM_TXFAIL:
		printf("COMM_TXFAIL: Failed transmit instruction packet!\n");
     9c0:	84 e8       	ldi	r24, 0x84	; 132
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	11 c0       	rjmp	.+34     	; 0x9e8 <print_comm_status+0x52>
		break;

	case COMM_TXERROR:
		printf("COMM_TXERROR: Incorrect instruction packet!\n");
     9c6:	85 eb       	ldi	r24, 0xB5	; 181
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	0e c0       	rjmp	.+28     	; 0x9e8 <print_comm_status+0x52>
		break;

	case COMM_RXFAIL:
		printf("COMM_RXFAIL: Failed get status packet from device!\n");
     9cc:	81 ee       	ldi	r24, 0xE1	; 225
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	0b c0       	rjmp	.+22     	; 0x9e8 <print_comm_status+0x52>
		break;

	case COMM_RXWAITING:
		printf("COMM_RXWAITING: Now recieving status packet!\n");
     9d2:	84 e1       	ldi	r24, 0x14	; 20
     9d4:	93 e0       	ldi	r25, 0x03	; 3
     9d6:	08 c0       	rjmp	.+16     	; 0x9e8 <print_comm_status+0x52>
		break;

	case COMM_RXTIMEOUT:
		printf("COMM_RXTIMEOUT: There is no status packet!\n");
     9d8:	81 e4       	ldi	r24, 0x41	; 65
     9da:	93 e0       	ldi	r25, 0x03	; 3
     9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <print_comm_status+0x52>
		break;

	case COMM_RXCORRUPT:
		printf("COMM_RXCORRUPT: Incorrect status packet!\n");
     9de:	8c e6       	ldi	r24, 0x6C	; 108
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <print_comm_status+0x52>
		break;

	default:
		printf("This is unknown error code!\n");
     9e4:	85 e9       	ldi	r24, 0x95	; 149
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	0e 94 f6 12 	call	0x25ec	; 0x25ec <puts>
     9ec:	08 95       	ret

000009ee <test_dxl>:
	return CW_CCW_ANGLE_SUCCESS;

}

int test_dxl(int id)
{
     9ee:	4f 92       	push	r4
     9f0:	5f 92       	push	r5
     9f2:	6f 92       	push	r6
     9f4:	7f 92       	push	r7
     9f6:	8f 92       	push	r8
     9f8:	9f 92       	push	r9
     9fa:	af 92       	push	r10
     9fc:	bf 92       	push	r11
     9fe:	cf 92       	push	r12
     a00:	df 92       	push	r13
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	7c 01       	movw	r14, r24
	int step = 50; // Increase speed by step
	int comm_status;
	int moving;	
	int begin = 1;

	printf("Testing dxl motor movement. Step is %d.. \r\n", step);
     a10:	00 d0       	rcall	.+0      	; 0xa12 <test_dxl+0x24>
     a12:	0f 92       	push	r0
     a14:	81 eb       	ldi	r24, 0xB1	; 177
     a16:	93 e0       	ldi	r25, 0x03	; 3
     a18:	ed b7       	in	r30, 0x3d	; 61
     a1a:	fe b7       	in	r31, 0x3e	; 62
     a1c:	92 83       	std	Z+2, r25	; 0x02
     a1e:	81 83       	std	Z+1, r24	; 0x01
     a20:	82 e3       	ldi	r24, 0x32	; 50
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	94 83       	std	Z+4, r25	; 0x04
     a26:	83 83       	std	Z+3, r24	; 0x03
     a28:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <printf>
     a2c:	20 e1       	ldi	r18, 0x10	; 16
     a2e:	37 e2       	ldi	r19, 0x27	; 39
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	40 e9       	ldi	r20, 0x90	; 144
     a3a:	51 e0       	ldi	r21, 0x01	; 1
     a3c:	ca 01       	movw	r24, r20
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <test_dxl+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a42:	21 50       	subi	r18, 0x01	; 1
     a44:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a46:	d1 f7       	brne	.-12     	; 0xa3c <test_dxl+0x4e>
     a48:	00 e0       	ldi	r16, 0x00	; 0
     a4a:	10 e0       	ldi	r17, 0x00	; 0
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	ae 2e       	mov	r10, r30
     a50:	b1 2c       	mov	r11, r1
		{
			speed = CCW_SPEED_L + step;
			speed_limit = CCW_SPEED_H;
		}

		printf("Starting test: direction is %d\r\n",direction);			
     a52:	7d ed       	ldi	r23, 0xDD	; 221
     a54:	47 2e       	mov	r4, r23
     a56:	73 e0       	ldi	r23, 0x03	; 3
     a58:	57 2e       	mov	r5, r23
		for(int sp = speed;sp <= speed_limit; sp += step)
		{
			printf("Speed: %d\n", sp);			
     a5a:	6e ef       	ldi	r22, 0xFE	; 254
     a5c:	66 2e       	mov	r6, r22
     a5e:	63 e0       	ldi	r22, 0x03	; 3
     a60:	76 2e       	mov	r7, r22
     a62:	50 e9       	ldi	r21, 0x90	; 144
     a64:	85 2e       	mov	r8, r21
     a66:	51 e0       	ldi	r21, 0x01	; 1
     a68:	95 2e       	mov	r9, r21
	_delay_ms(1000);
	
	while(1)
	{
		// Check next movement direction to test
		if(direction == 0) // CW
     a6a:	01 15       	cp	r16, r1
     a6c:	11 05       	cpc	r17, r1
     a6e:	39 f0       	breq	.+14     	; 0xa7e <test_dxl+0x90>
     a70:	c2 e3       	ldi	r28, 0x32	; 50
     a72:	d0 e0       	ldi	r29, 0x00	; 0
     a74:	4f ef       	ldi	r20, 0xFF	; 255
     a76:	c4 2e       	mov	r12, r20
     a78:	43 e0       	ldi	r20, 0x03	; 3
     a7a:	d4 2e       	mov	r13, r20
     a7c:	0b c0       	rjmp	.+22     	; 0xa94 <test_dxl+0xa6>
		{
			speed = CW_SPEED_L + step;
			speed_limit = CW_SPEED_H;
			if(begin == 0)
     a7e:	ab 28       	or	r10, r11
     a80:	09 f4       	brne	.+2      	; 0xa84 <test_dxl+0x96>
     a82:	54 c0       	rjmp	.+168    	; 0xb2c <test_dxl+0x13e>
				break;
     a84:	c2 e3       	ldi	r28, 0x32	; 50
     a86:	d4 e0       	ldi	r29, 0x04	; 4
     a88:	3f ef       	ldi	r19, 0xFF	; 255
     a8a:	c3 2e       	mov	r12, r19
     a8c:	37 e0       	ldi	r19, 0x07	; 7
     a8e:	d3 2e       	mov	r13, r19
     a90:	aa 24       	eor	r10, r10
     a92:	bb 24       	eor	r11, r11
		{
			speed = CCW_SPEED_L + step;
			speed_limit = CCW_SPEED_H;
		}

		printf("Starting test: direction is %d\r\n",direction);			
     a94:	00 d0       	rcall	.+0      	; 0xa96 <test_dxl+0xa8>
     a96:	0f 92       	push	r0
     a98:	ed b7       	in	r30, 0x3d	; 61
     a9a:	fe b7       	in	r31, 0x3e	; 62
     a9c:	52 82       	std	Z+2, r5	; 0x02
     a9e:	41 82       	std	Z+1, r4	; 0x01
     aa0:	14 83       	std	Z+4, r17	; 0x04
     aa2:	03 83       	std	Z+3, r16	; 0x03
     aa4:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <printf>
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	2b c0       	rjmp	.+86     	; 0xb08 <test_dxl+0x11a>
		for(int sp = speed;sp <= speed_limit; sp += step)
		{
			printf("Speed: %d\n", sp);			
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <test_dxl+0xc6>
     ab4:	0f 92       	push	r0
     ab6:	ed b7       	in	r30, 0x3d	; 61
     ab8:	fe b7       	in	r31, 0x3e	; 62
     aba:	72 82       	std	Z+2, r7	; 0x02
     abc:	61 82       	std	Z+1, r6	; 0x01
     abe:	d4 83       	std	Z+4, r29	; 0x04
     ac0:	c3 83       	std	Z+3, r28	; 0x03
     ac2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <printf>
									
			// Check if last movement command has been executed
			moving = dxl_read_byte( id, MOVING );
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	c7 01       	movw	r24, r14
     ad0:	66 e2       	ldi	r22, 0x26	; 38
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	0e 94 79 07 	call	0xef2	; 0xef2 <dxl_read_byte>
			comm_status = dxl_get_result();
     ad8:	0e 94 a9 05 	call	0xb52	; 0xb52 <dxl_get_result>
			if( comm_status == COMM_RXSUCCESS )	
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	91 05       	cpc	r25, r1
     ae0:	81 f4       	brne	.+32     	; 0xb02 <test_dxl+0x114>
			{			
				dxl_write_word(id, MOVING_SPEED_L, sp);					
     ae2:	c7 01       	movw	r24, r14
     ae4:	60 e2       	ldi	r22, 0x20	; 32
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	ae 01       	movw	r20, r28
     aea:	0e 94 30 07 	call	0xe60	; 0xe60 <dxl_write_word>
				print_error_code();
     aee:	0e 94 84 04 	call	0x908	; 0x908 <print_error_code>
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	9f ef       	ldi	r25, 0xFF	; 255
     af6:	f4 01       	movw	r30, r8
     af8:	31 97       	sbiw	r30, 0x01	; 1
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <test_dxl+0x10a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     afc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     afe:	d9 f7       	brne	.-10     	; 0xaf6 <test_dxl+0x108>
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <test_dxl+0x118>
				
				_delay_ms(5000000);
			}
			else
				print_comm_status(comm_status);
     b02:	0e 94 cb 04 	call	0x996	; 0x996 <print_comm_status>
			speed = CCW_SPEED_L + step;
			speed_limit = CCW_SPEED_H;
		}

		printf("Starting test: direction is %d\r\n",direction);			
		for(int sp = speed;sp <= speed_limit; sp += step)
     b06:	e2 96       	adiw	r28, 0x32	; 50
     b08:	cc 16       	cp	r12, r28
     b0a:	dd 06       	cpc	r13, r29
     b0c:	94 f6       	brge	.-92     	; 0xab2 <test_dxl+0xc4>
				_delay_ms(5000000);
			}
			else
				print_comm_status(comm_status);
		}
		dxl_write_word(id, MOVING_SPEED_L, 0);
     b0e:	c7 01       	movw	r24, r14
     b10:	60 e2       	ldi	r22, 0x20	; 32
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	50 e0       	ldi	r21, 0x00	; 0
     b18:	0e 94 30 07 	call	0xe60	; 0xe60 <dxl_write_word>
		direction = (direction + 1)%2;
     b1c:	c8 01       	movw	r24, r16
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	62 e0       	ldi	r22, 0x02	; 2
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	0e 94 86 12 	call	0x250c	; 0x250c <__divmodhi4>
     b28:	8c 01       	movw	r16, r24
     b2a:	9f cf       	rjmp	.-194    	; 0xa6a <test_dxl+0x7c>

	}

	return 0;
}
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	df 90       	pop	r13
     b3e:	cf 90       	pop	r12
     b40:	bf 90       	pop	r11
     b42:	af 90       	pop	r10
     b44:	9f 90       	pop	r9
     b46:	8f 90       	pop	r8
     b48:	7f 90       	pop	r7
     b4a:	6f 90       	pop	r6
     b4c:	5f 90       	pop	r5
     b4e:	4f 90       	pop	r4
     b50:	08 95       	ret

00000b52 <dxl_get_result>:
}

int dxl_get_result()
{
	return gbCommStatus;
}
     b52:	80 91 11 04 	lds	r24, 0x0411
     b56:	90 91 12 04 	lds	r25, 0x0412
     b5a:	08 95       	ret

00000b5c <dxl_set_txpacket_id>:

void dxl_set_txpacket_id( int id )
{
	gbInstructionPacket[ID] = (unsigned char)id;
     b5c:	80 93 22 05 	sts	0x0522, r24
}
     b60:	08 95       	ret

00000b62 <dxl_set_txpacket_instruction>:

void dxl_set_txpacket_instruction( int instruction )
{
	gbInstructionPacket[INSTRUCTION] = (unsigned char)instruction;
     b62:	80 93 24 05 	sts	0x0524, r24
}
     b66:	08 95       	ret

00000b68 <dxl_set_txpacket_parameter>:

void dxl_set_txpacket_parameter( int index, int value )
{
	gbInstructionPacket[PARAMETER+index] = (unsigned char)value;
     b68:	fc 01       	movw	r30, r24
     b6a:	e0 5e       	subi	r30, 0xE0	; 224
     b6c:	fa 4f       	sbci	r31, 0xFA	; 250
     b6e:	65 83       	std	Z+5, r22	; 0x05
}
     b70:	08 95       	ret

00000b72 <dxl_set_txpacket_length>:

void dxl_set_txpacket_length( int length )
{
	gbInstructionPacket[LENGTH] = (unsigned char)length;
     b72:	80 93 23 05 	sts	0x0523, r24
}
     b76:	08 95       	ret

00000b78 <dxl_get_rxpacket_error>:

int dxl_get_rxpacket_error( int errbit )
{
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	90 91 c4 05 	lds	r25, 0x05C4
     b80:	98 23       	and	r25, r24
     b82:	11 f0       	breq	.+4      	; 0xb88 <dxl_get_rxpacket_error+0x10>
     b84:	21 e0       	ldi	r18, 0x01	; 1
     b86:	30 e0       	ldi	r19, 0x00	; 0
	if( gbStatusPacket[ERRBIT] & (unsigned char)errbit )
		return 1;

	return 0;
}
     b88:	c9 01       	movw	r24, r18
     b8a:	08 95       	ret

00000b8c <dxl_get_rxpacket_length>:

int dxl_get_rxpacket_length()
{
	return (int)gbStatusPacket[LENGTH];
}
     b8c:	80 91 c3 05 	lds	r24, 0x05C3
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	08 95       	ret

00000b94 <dxl_get_rxpacket_parameter>:

int dxl_get_rxpacket_parameter( int index )
{
     b94:	fc 01       	movw	r30, r24
     b96:	e0 54       	subi	r30, 0x40	; 64
     b98:	fa 4f       	sbci	r31, 0xFA	; 250
	return (int)gbStatusPacket[PARAMETER+index];
}
     b9a:	85 81       	ldd	r24, Z+5	; 0x05
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	08 95       	ret

00000ba0 <dxl_makeword>:
int dxl_makeword( int lowbyte, int highbyte )
{
	unsigned short word;

	word = highbyte;
	word = word << 8;
     ba0:	36 2f       	mov	r19, r22
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	28 0f       	add	r18, r24
     ba6:	39 1f       	adc	r19, r25
	word = word + lowbyte;
	return (int)word;
}
     ba8:	c9 01       	movw	r24, r18
     baa:	08 95       	ret

00000bac <dxl_get_lowbyte>:

int dxl_get_lowbyte( int word )
{
     bac:	28 2f       	mov	r18, r24
     bae:	30 e0       	ldi	r19, 0x00	; 0
	unsigned short temp;

	temp = word & 0xff;
	return (int)temp;
}
     bb0:	c9 01       	movw	r24, r18
     bb2:	08 95       	ret

00000bb4 <dxl_get_highbyte>:

int dxl_get_highbyte( int word )
{
	unsigned short temp;

	temp = word & 0xff00;
     bb4:	80 70       	andi	r24, 0x00	; 0
	temp = temp >> 8;
	return (int)temp;
}
     bb6:	89 2f       	mov	r24, r25
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	08 95       	ret

00000bbc <dxl_rx_packet>:

	gbCommStatus = COMM_TXSUCCESS;
}

void dxl_rx_packet()
{
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
	unsigned char i, j, nRead;
	unsigned char checksum = 0;

	if( giBusUsing == 0 )
     bc4:	80 91 08 06 	lds	r24, 0x0608
     bc8:	90 91 09 06 	lds	r25, 0x0609
     bcc:	89 2b       	or	r24, r25
     bce:	09 f4       	brne	.+2      	; 0xbd2 <dxl_rx_packet+0x16>
     bd0:	bb c0       	rjmp	.+374    	; 0xd48 <dxl_rx_packet+0x18c>
		return;

	if( gbInstructionPacket[ID] == BROADCAST_ID )
     bd2:	80 91 22 05 	lds	r24, 0x0522
     bd6:	8e 3f       	cpi	r24, 0xFE	; 254
     bd8:	09 f4       	brne	.+2      	; 0xbdc <dxl_rx_packet+0x20>
     bda:	ac c0       	rjmp	.+344    	; 0xd34 <dxl_rx_packet+0x178>
		gbCommStatus = COMM_RXSUCCESS;
		giBusUsing = 0;
		return;
	}
	
	if( gbCommStatus == COMM_TXSUCCESS )
     bdc:	80 91 11 04 	lds	r24, 0x0411
     be0:	90 91 12 04 	lds	r25, 0x0412
     be4:	89 2b       	or	r24, r25
     be6:	29 f4       	brne	.+10     	; 0xbf2 <dxl_rx_packet+0x36>
	{
		gbRxGetLength = 0;
     be8:	10 92 07 06 	sts	0x0607, r1
		gbRxPacketLength = 6;
     bec:	86 e0       	ldi	r24, 0x06	; 6
     bee:	80 93 06 06 	sts	0x0606, r24
	}
	
	nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
     bf2:	80 91 07 06 	lds	r24, 0x0607
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	60 91 06 06 	lds	r22, 0x0606
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	68 1b       	sub	r22, r24
     c00:	79 0b       	sbc	r23, r25
     c02:	80 54       	subi	r24, 0x40	; 64
     c04:	9a 4f       	sbci	r25, 0xFA	; 250
     c06:	0e 94 61 09 	call	0x12c2	; 0x12c2 <dxl_hal_rx>
	gbRxGetLength += nRead;
     c0a:	90 91 07 06 	lds	r25, 0x0607
     c0e:	98 0f       	add	r25, r24
     c10:	90 93 07 06 	sts	0x0607, r25
	if( gbRxGetLength < gbRxPacketLength )
     c14:	80 91 06 06 	lds	r24, 0x0606
     c18:	98 17       	cp	r25, r24
     c1a:	20 f4       	brcc	.+8      	; 0xc24 <dxl_rx_packet+0x68>
	{
		if( dxl_hal_timeout() == 1 )
     c1c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <dxl_hal_timeout>
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	71 f0       	breq	.+28     	; 0xc40 <dxl_rx_packet+0x84>
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
     c24:	70 91 07 06 	lds	r23, 0x0607
     c28:	47 2f       	mov	r20, r23
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	da 01       	movw	r26, r20
     c2e:	11 97       	sbiw	r26, 0x01	; 1
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
     c30:	8a 01       	movw	r16, r20
     c32:	02 50       	subi	r16, 0x02	; 2
     c34:	10 40       	sbci	r17, 0x00	; 0
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	ed 01       	movw	r28, r26
     c3a:	c0 54       	subi	r28, 0x40	; 64
     c3c:	da 4f       	sbci	r29, 0xFA	; 250
     c3e:	18 c0       	rjmp	.+48     	; 0xc70 <dxl_rx_packet+0xb4>
	gbRxGetLength += nRead;
	if( gbRxGetLength < gbRxPacketLength )
	{
		if( dxl_hal_timeout() == 1 )
		{
			if(gbRxGetLength == 0)
     c40:	80 91 07 06 	lds	r24, 0x0607
     c44:	88 23       	and	r24, r24
     c46:	09 f0       	breq	.+2      	; 0xc4a <dxl_rx_packet+0x8e>
     c48:	72 c0       	rjmp	.+228    	; 0xd2e <dxl_rx_packet+0x172>
				gbCommStatus = COMM_RXTIMEOUT;
     c4a:	86 e0       	ldi	r24, 0x06	; 6
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	74 c0       	rjmp	.+232    	; 0xd38 <dxl_rx_packet+0x17c>
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
     c50:	f9 01       	movw	r30, r18
     c52:	e0 54       	subi	r30, 0x40	; 64
     c54:	fa 4f       	sbci	r31, 0xFA	; 250
     c56:	80 81       	ld	r24, Z
     c58:	8f 3f       	cpi	r24, 0xFF	; 255
     c5a:	19 f4       	brne	.+6      	; 0xc62 <dxl_rx_packet+0xa6>
     c5c:	81 81       	ldd	r24, Z+1	; 0x01
     c5e:	8f 3f       	cpi	r24, 0xFF	; 255
     c60:	61 f0       	breq	.+24     	; 0xc7a <dxl_rx_packet+0xbe>
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
     c62:	20 17       	cp	r18, r16
     c64:	31 07       	cpc	r19, r17
     c66:	19 f4       	brne	.+6      	; 0xc6e <dxl_rx_packet+0xb2>
     c68:	88 81       	ld	r24, Y
     c6a:	8f 3f       	cpi	r24, 0xFF	; 255
     c6c:	31 f0       	breq	.+12     	; 0xc7a <dxl_rx_packet+0xbe>
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
     c6e:	6f 5f       	subi	r22, 0xFF	; 255
     c70:	26 2f       	mov	r18, r22
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	2a 17       	cp	r18, r26
     c76:	3b 07       	cpc	r19, r27
     c78:	5c f3       	brlt	.-42     	; 0xc50 <dxl_rx_packet+0x94>
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
		{
			break;
		}
	}	
	if( i > 0 )
     c7a:	66 23       	and	r22, r22
     c7c:	a1 f0       	breq	.+40     	; 0xca6 <dxl_rx_packet+0xea>
     c7e:	90 e0       	ldi	r25, 0x00	; 0
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
     c80:	42 1b       	sub	r20, r18
     c82:	53 0b       	sbc	r21, r19
     c84:	08 c0       	rjmp	.+16     	; 0xc96 <dxl_rx_packet+0xda>
			gbStatusPacket[j] = gbStatusPacket[j + i];
     c86:	e0 54       	subi	r30, 0x40	; 64
     c88:	fa 4f       	sbci	r31, 0xFA	; 250
     c8a:	df 01       	movw	r26, r30
     c8c:	a2 0f       	add	r26, r18
     c8e:	b3 1f       	adc	r27, r19
     c90:	8c 91       	ld	r24, X
     c92:	80 83       	st	Z, r24
			break;
		}
	}	
	if( i > 0 )
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
     c94:	9f 5f       	subi	r25, 0xFF	; 255
     c96:	e9 2f       	mov	r30, r25
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	e4 17       	cp	r30, r20
     c9c:	f5 07       	cpc	r31, r21
     c9e:	9c f3       	brlt	.-26     	; 0xc86 <dxl_rx_packet+0xca>
			gbStatusPacket[j] = gbStatusPacket[j + i];
			
		gbRxGetLength -= i;		
     ca0:	76 1b       	sub	r23, r22
     ca2:	70 93 07 06 	sts	0x0607, r23
	}

	if( gbRxGetLength < gbRxPacketLength )
     ca6:	20 91 07 06 	lds	r18, 0x0607
     caa:	80 91 06 06 	lds	r24, 0x0606
     cae:	28 17       	cp	r18, r24
     cb0:	30 f1       	brcs	.+76     	; 0xcfe <dxl_rx_packet+0x142>
		gbCommStatus = COMM_RXWAITING;
		return;
	}

	// Check id pairing
	if( gbInstructionPacket[ID] != gbStatusPacket[ID])
     cb2:	90 91 22 05 	lds	r25, 0x0522
     cb6:	80 91 c2 05 	lds	r24, 0x05C2
     cba:	98 17       	cp	r25, r24
     cbc:	c1 f5       	brne	.+112    	; 0xd2e <dxl_rx_packet+0x172>
		gbCommStatus = COMM_RXCORRUPT;
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
     cbe:	60 91 c3 05 	lds	r22, 0x05C3
     cc2:	6c 5f       	subi	r22, 0xFC	; 252
     cc4:	60 93 06 06 	sts	0x0606, r22
	if( gbRxGetLength < gbRxPacketLength )
     cc8:	26 17       	cp	r18, r22
     cca:	90 f4       	brcc	.+36     	; 0xcf0 <dxl_rx_packet+0x134>
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
     ccc:	82 2f       	mov	r24, r18
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	68 1b       	sub	r22, r24
     cd4:	79 0b       	sbc	r23, r25
     cd6:	80 54       	subi	r24, 0x40	; 64
     cd8:	9a 4f       	sbci	r25, 0xFA	; 250
     cda:	0e 94 61 09 	call	0x12c2	; 0x12c2 <dxl_hal_rx>
		gbRxGetLength += nRead;
     cde:	90 91 07 06 	lds	r25, 0x0607
     ce2:	98 0f       	add	r25, r24
     ce4:	90 93 07 06 	sts	0x0607, r25
		if( gbRxGetLength < gbRxPacketLength )
     ce8:	80 91 06 06 	lds	r24, 0x0606
     cec:	98 17       	cp	r25, r24
     cee:	38 f0       	brcs	.+14     	; 0xcfe <dxl_rx_packet+0x142>
			return;
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
     cf0:	80 91 c3 05 	lds	r24, 0x05C3
     cf4:	a8 2f       	mov	r26, r24
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0c c0       	rjmp	.+24     	; 0xd16 <dxl_rx_packet+0x15a>
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
		if( gbRxGetLength < gbRxPacketLength )
		{
			gbCommStatus = COMM_RXWAITING;
     cfe:	85 e0       	ldi	r24, 0x05	; 5
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	90 93 12 04 	sts	0x0412, r25
     d06:	80 93 11 04 	sts	0x0411, r24
     d0a:	1e c0       	rjmp	.+60     	; 0xd48 <dxl_rx_packet+0x18c>
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
		checksum += gbStatusPacket[i+2];
     d0c:	e0 54       	subi	r30, 0x40	; 64
     d0e:	fa 4f       	sbci	r31, 0xFA	; 250
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	98 0f       	add	r25, r24
			return;
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
     d14:	2f 5f       	subi	r18, 0xFF	; 255
     d16:	e2 2f       	mov	r30, r18
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	ae 17       	cp	r26, r30
     d1c:	bf 07       	cpc	r27, r31
     d1e:	b4 f7       	brge	.-20     	; 0xd0c <dxl_rx_packet+0x150>
		checksum += gbStatusPacket[i+2];
	checksum = ~checksum;

	if( gbStatusPacket[gbStatusPacket[LENGTH]+3] != checksum )
     d20:	a0 54       	subi	r26, 0x40	; 64
     d22:	ba 4f       	sbci	r27, 0xFA	; 250
     d24:	90 95       	com	r25
     d26:	13 96       	adiw	r26, 0x03	; 3
     d28:	8c 91       	ld	r24, X
     d2a:	89 17       	cp	r24, r25
     d2c:	19 f0       	breq	.+6      	; 0xd34 <dxl_rx_packet+0x178>
	{
		gbCommStatus = COMM_RXCORRUPT;
     d2e:	87 e0       	ldi	r24, 0x07	; 7
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <dxl_rx_packet+0x17c>
		giBusUsing = 0;
		return;
	}
	
	gbCommStatus = COMM_RXSUCCESS;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	90 93 12 04 	sts	0x0412, r25
     d3c:	80 93 11 04 	sts	0x0411, r24
	giBusUsing = 0;
     d40:	10 92 09 06 	sts	0x0609, r1
     d44:	10 92 08 06 	sts	0x0608, r1
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	08 95       	ret

00000d52 <dxl_tx_packet>:
{
	dxl_hal_close();
}

void dxl_tx_packet()
{
     d52:	1f 93       	push	r17
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;

	if( giBusUsing == 1 )
     d54:	80 91 08 06 	lds	r24, 0x0608
     d58:	90 91 09 06 	lds	r25, 0x0609
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <dxl_tx_packet+0x10>
     d60:	60 c0       	rjmp	.+192    	; 0xe22 <dxl_tx_packet+0xd0>
		return;
	
	giBusUsing = 1;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	90 93 09 06 	sts	0x0609, r25
     d6a:	80 93 08 06 	sts	0x0608, r24

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
     d6e:	80 91 23 05 	lds	r24, 0x0523
     d72:	89 39       	cpi	r24, 0x99	; 153
     d74:	40 f4       	brcc	.+16     	; 0xd86 <dxl_tx_packet+0x34>
		gbCommStatus = COMM_TXERROR;
		giBusUsing = 0;
		return;
	}
	
	if( gbInstructionPacket[INSTRUCTION] != INST_PING
     d76:	90 91 24 05 	lds	r25, 0x0524
     d7a:	89 2f       	mov	r24, r25
     d7c:	81 50       	subi	r24, 0x01	; 1
     d7e:	86 30       	cpi	r24, 0x06	; 6
     d80:	28 f0       	brcs	.+10     	; 0xd8c <dxl_tx_packet+0x3a>
     d82:	93 38       	cpi	r25, 0x83	; 131
     d84:	19 f0       	breq	.+6      	; 0xd8c <dxl_tx_packet+0x3a>
		&& gbInstructionPacket[INSTRUCTION] != INST_REG_WRITE
		&& gbInstructionPacket[INSTRUCTION] != INST_ACTION
		&& gbInstructionPacket[INSTRUCTION] != INST_RESET
		&& gbInstructionPacket[INSTRUCTION] != INST_SYNC_WRITE )
	{
		gbCommStatus = COMM_TXERROR;
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	31 c0       	rjmp	.+98     	; 0xdee <dxl_tx_packet+0x9c>
		giBusUsing = 0;
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	80 93 20 05 	sts	0x0520, r24
	gbInstructionPacket[1] = 0xff;
     d92:	80 93 21 05 	sts	0x0521, r24
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
     d96:	80 91 23 05 	lds	r24, 0x0523
     d9a:	a8 2f       	mov	r26, r24
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	05 c0       	rjmp	.+10     	; 0xdae <dxl_tx_packet+0x5c>
		checksum += gbInstructionPacket[i+2];
     da4:	e0 5e       	subi	r30, 0xE0	; 224
     da6:	fa 4f       	sbci	r31, 0xFA	; 250
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	98 0f       	add	r25, r24
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
     dac:	2f 5f       	subi	r18, 0xFF	; 255
     dae:	e2 2f       	mov	r30, r18
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	ae 17       	cp	r26, r30
     db4:	bf 07       	cpc	r27, r31
     db6:	b4 f7       	brge	.-20     	; 0xda4 <dxl_tx_packet+0x52>
		checksum += gbInstructionPacket[i+2];
	gbInstructionPacket[gbInstructionPacket[LENGTH]+3] = ~checksum;
     db8:	a0 5e       	subi	r26, 0xE0	; 224
     dba:	ba 4f       	sbci	r27, 0xFA	; 250
     dbc:	90 95       	com	r25
     dbe:	13 96       	adiw	r26, 0x03	; 3
     dc0:	9c 93       	st	X, r25
	
	if( gbCommStatus == COMM_RXTIMEOUT || gbCommStatus == COMM_RXCORRUPT )
     dc2:	80 91 11 04 	lds	r24, 0x0411
     dc6:	90 91 12 04 	lds	r25, 0x0412
     dca:	06 97       	sbiw	r24, 0x06	; 6
     dcc:	02 97       	sbiw	r24, 0x02	; 2
     dce:	10 f4       	brcc	.+4      	; 0xdd4 <dxl_tx_packet+0x82>
		dxl_hal_clear();
     dd0:	0e 94 31 08 	call	0x1062	; 0x1062 <dxl_hal_clear>

	TxNumByte = gbInstructionPacket[LENGTH] + 4;
     dd4:	10 91 23 05 	lds	r17, 0x0523
     dd8:	1c 5f       	subi	r17, 0xFC	; 252
	RealTxNumByte = dxl_hal_tx( (unsigned char*)gbInstructionPacket, TxNumByte );
     dda:	80 e2       	ldi	r24, 0x20	; 32
     ddc:	95 e0       	ldi	r25, 0x05	; 5
     dde:	61 2f       	mov	r22, r17
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	0e 94 36 08 	call	0x106c	; 0x106c <dxl_hal_tx>

	if( TxNumByte != RealTxNumByte )
     de6:	18 17       	cp	r17, r24
     de8:	59 f0       	breq	.+22     	; 0xe00 <dxl_tx_packet+0xae>
	{
		gbCommStatus = COMM_TXFAIL;
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	90 93 12 04 	sts	0x0412, r25
     df2:	80 93 11 04 	sts	0x0411, r24
		giBusUsing = 0;
     df6:	10 92 09 06 	sts	0x0609, r1
     dfa:	10 92 08 06 	sts	0x0608, r1
     dfe:	11 c0       	rjmp	.+34     	; 0xe22 <dxl_tx_packet+0xd0>
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] == INST_READ )
     e00:	80 91 24 05 	lds	r24, 0x0524
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	29 f4       	brne	.+10     	; 0xe12 <dxl_tx_packet+0xc0>
		dxl_hal_set_timeout( gbInstructionPacket[PARAMETER+1] + 6 );
     e08:	80 91 26 05 	lds	r24, 0x0526
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	06 96       	adiw	r24, 0x06	; 6
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <dxl_tx_packet+0xc4>
	else
		dxl_hal_set_timeout( 6 );
     e12:	86 e0       	ldi	r24, 0x06	; 6
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <dxl_hal_set_timeout>

	gbCommStatus = COMM_TXSUCCESS;
     e1a:	10 92 12 04 	sts	0x0412, r1
     e1e:	10 92 11 04 	sts	0x0411, r1
}
     e22:	1f 91       	pop	r17
     e24:	08 95       	ret

00000e26 <dxl_txrx_packet>:
	gbCommStatus = COMM_RXSUCCESS;
	giBusUsing = 0;
}

void dxl_txrx_packet()
{
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
	dxl_tx_packet();
     e2a:	0e 94 a9 06 	call	0xd52	; 0xd52 <dxl_tx_packet>

	if( gbCommStatus != COMM_TXSUCCESS )
     e2e:	80 91 11 04 	lds	r24, 0x0411
     e32:	90 91 12 04 	lds	r25, 0x0412
     e36:	89 2b       	or	r24, r25
     e38:	81 f4       	brne	.+32     	; 0xe5a <dxl_txrx_packet+0x34>
		return;	
     e3a:	c0 e0       	ldi	r28, 0x00	; 0
     e3c:	d0 e0       	ldi	r29, 0x00	; 0
	
	int times = 0;
	do{
		dxl_rx_packet();		
     e3e:	0e 94 de 05 	call	0xbbc	; 0xbbc <dxl_rx_packet>
		times++;
	}while( gbCommStatus == COMM_RXWAITING && times < 100);
     e42:	80 91 11 04 	lds	r24, 0x0411
     e46:	90 91 12 04 	lds	r25, 0x0412
     e4a:	05 97       	sbiw	r24, 0x05	; 5
     e4c:	21 f4       	brne	.+8      	; 0xe56 <dxl_txrx_packet+0x30>
		return;	
	
	int times = 0;
	do{
		dxl_rx_packet();		
		times++;
     e4e:	21 96       	adiw	r28, 0x01	; 1
	}while( gbCommStatus == COMM_RXWAITING && times < 100);
     e50:	c4 36       	cpi	r28, 0x64	; 100
     e52:	d1 05       	cpc	r29, r1
     e54:	a1 f7       	brne	.-24     	; 0xe3e <dxl_txrx_packet+0x18>
	dxl_hal_clear();	
     e56:	0e 94 31 08 	call	0x1062	; 0x1062 <dxl_hal_clear>
}
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <dxl_write_word>:

void dxl_write_word( int id, int address, int value )
{
	//while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
     e60:	80 93 22 05 	sts	0x0522, r24
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
     e64:	83 e0       	ldi	r24, 0x03	; 3
     e66:	80 93 24 05 	sts	0x0524, r24
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
     e6a:	60 93 25 05 	sts	0x0525, r22

int dxl_get_lowbyte( int word )
{
	unsigned short temp;

	temp = word & 0xff;
     e6e:	ca 01       	movw	r24, r20
	//while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
     e70:	40 93 26 05 	sts	0x0526, r20

int dxl_get_highbyte( int word )
{
	unsigned short temp;

	temp = word & 0xff00;
     e74:	80 70       	andi	r24, 0x00	; 0

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
     e76:	90 93 27 05 	sts	0x0527, r25
	gbInstructionPacket[LENGTH] = 5;
     e7a:	85 e0       	ldi	r24, 0x05	; 5
     e7c:	80 93 23 05 	sts	0x0523, r24
	
	dxl_txrx_packet();
     e80:	0e 94 13 07 	call	0xe26	; 0xe26 <dxl_txrx_packet>
}
     e84:	08 95       	ret

00000e86 <dxl_read_word>:
	
	dxl_txrx_packet();
}

int dxl_read_word( int id, int address )
{
     e86:	28 2f       	mov	r18, r24
	while(giBusUsing);
     e88:	80 91 08 06 	lds	r24, 0x0608
     e8c:	90 91 09 06 	lds	r25, 0x0609
     e90:	89 2b       	or	r24, r25
     e92:	b9 f4       	brne	.+46     	; 0xec2 <dxl_read_word+0x3c>

	gbInstructionPacket[ID] = (unsigned char)id;
     e94:	20 93 22 05 	sts	0x0522, r18
	gbInstructionPacket[INSTRUCTION] = INST_READ;
     e98:	82 e0       	ldi	r24, 0x02	; 2
     e9a:	80 93 24 05 	sts	0x0524, r24
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
     e9e:	60 93 25 05 	sts	0x0525, r22
	gbInstructionPacket[PARAMETER+1] = 2;
     ea2:	80 93 26 05 	sts	0x0526, r24
	gbInstructionPacket[LENGTH] = 4;
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	80 93 23 05 	sts	0x0523, r24
	
	dxl_txrx_packet();
     eac:	0e 94 13 07 	call	0xe26	; 0xe26 <dxl_txrx_packet>
int dxl_makeword( int lowbyte, int highbyte )
{
	unsigned short word;

	word = highbyte;
	word = word << 8;
     eb0:	30 91 c6 05 	lds	r19, 0x05C6
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	80 91 c5 05 	lds	r24, 0x05C5
     eba:	28 0f       	add	r18, r24
     ebc:	31 1d       	adc	r19, r1
	gbInstructionPacket[LENGTH] = 4;
	
	dxl_txrx_packet();

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}
     ebe:	c9 01       	movw	r24, r18
     ec0:	08 95       	ret
     ec2:	ff cf       	rjmp	.-2      	; 0xec2 <dxl_read_word+0x3c>

00000ec4 <dxl_write_byte>:

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
     ec4:	28 2f       	mov	r18, r24
	while(giBusUsing);
     ec6:	80 91 08 06 	lds	r24, 0x0608
     eca:	90 91 09 06 	lds	r25, 0x0609
     ece:	89 2b       	or	r24, r25
     ed0:	79 f4       	brne	.+30     	; 0xef0 <dxl_write_byte+0x2c>

	gbInstructionPacket[ID] = (unsigned char)id;
     ed2:	20 93 22 05 	sts	0x0522, r18
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	80 93 24 05 	sts	0x0524, r24
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
     edc:	60 93 25 05 	sts	0x0525, r22
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
     ee0:	40 93 26 05 	sts	0x0526, r20
	gbInstructionPacket[LENGTH] = 4;
     ee4:	84 e0       	ldi	r24, 0x04	; 4
     ee6:	80 93 23 05 	sts	0x0523, r24
	
	dxl_txrx_packet();
     eea:	0e 94 13 07 	call	0xe26	; 0xe26 <dxl_txrx_packet>
}
     eee:	08 95       	ret
     ef0:	ff cf       	rjmp	.-2      	; 0xef0 <dxl_write_byte+0x2c>

00000ef2 <dxl_read_byte>:
	
	dxl_txrx_packet();
}

int dxl_read_byte( int id, int address )
{
     ef2:	28 2f       	mov	r18, r24
	while(giBusUsing);
     ef4:	80 91 08 06 	lds	r24, 0x0608
     ef8:	90 91 09 06 	lds	r25, 0x0609
     efc:	89 2b       	or	r24, r25
     efe:	99 f4       	brne	.+38     	; 0xf26 <dxl_read_byte+0x34>

	gbInstructionPacket[ID] = (unsigned char)id;
     f00:	20 93 22 05 	sts	0x0522, r18
	gbInstructionPacket[INSTRUCTION] = INST_READ;
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	80 93 24 05 	sts	0x0524, r24
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
     f0a:	60 93 25 05 	sts	0x0525, r22
	gbInstructionPacket[PARAMETER+1] = 1;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	80 93 26 05 	sts	0x0526, r24
	gbInstructionPacket[LENGTH] = 4;
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	80 93 23 05 	sts	0x0523, r24
	
	dxl_txrx_packet();
     f1a:	0e 94 13 07 	call	0xe26	; 0xe26 <dxl_txrx_packet>

	return (int)gbStatusPacket[PARAMETER];
}
     f1e:	80 91 c5 05 	lds	r24, 0x05C5
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	08 95       	ret
     f26:	ff cf       	rjmp	.-2      	; 0xf26 <dxl_read_byte+0x34>

00000f28 <dxl_ping>:
	temp = temp >> 8;
	return (int)temp;
}

void dxl_ping( int id )
{
     f28:	28 2f       	mov	r18, r24
	while(giBusUsing);
     f2a:	80 91 08 06 	lds	r24, 0x0608
     f2e:	90 91 09 06 	lds	r25, 0x0609
     f32:	89 2b       	or	r24, r25
     f34:	59 f4       	brne	.+22     	; 0xf4c <dxl_ping+0x24>

	gbInstructionPacket[ID] = (unsigned char)id;
     f36:	20 93 22 05 	sts	0x0522, r18
	gbInstructionPacket[INSTRUCTION] = INST_PING;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	80 93 24 05 	sts	0x0524, r24
	gbInstructionPacket[LENGTH] = 2;
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	80 93 23 05 	sts	0x0523, r24
	
	dxl_txrx_packet();
     f46:	0e 94 13 07 	call	0xe26	; 0xe26 <dxl_txrx_packet>
}
     f4a:	08 95       	ret
     f4c:	ff cf       	rjmp	.-2      	; 0xf4c <dxl_ping+0x24>

00000f4e <dxl_terminate>:
	return 1;
}

void dxl_terminate()
{
	dxl_hal_close();
     f4e:	0e 94 30 08 	call	0x1060	; 0x1060 <dxl_hal_close>
}
     f52:	08 95       	ret

00000f54 <dxl_initialize>:
int gbCommStatus = COMM_RXSUCCESS;
int giBusUsing = 0;


int dxl_initialize( int devIndex, int baudnum )
{
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	8c 01       	movw	r16, r24
	float baudrate;	
	baudrate = 2000000.0f / (float)(baudnum + 1);
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
     f5a:	6f 5f       	subi	r22, 0xFF	; 255
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	88 27       	eor	r24, r24
     f60:	77 fd       	sbrc	r23, 7
     f62:	80 95       	com	r24
     f64:	98 2f       	mov	r25, r24
     f66:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__floatsisf>
     f6a:	9b 01       	movw	r18, r22
     f6c:	ac 01       	movw	r20, r24
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	74 e2       	ldi	r23, 0x24	; 36
     f72:	84 ef       	ldi	r24, 0xF4	; 244
     f74:	99 e4       	ldi	r25, 0x49	; 73
     f76:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
     f7a:	ab 01       	movw	r20, r22
     f7c:	bc 01       	movw	r22, r24
     f7e:	c8 01       	movw	r24, r16
     f80:	0e 94 d7 07 	call	0xfae	; 0xfae <dxl_hal_open>
     f84:	89 2b       	or	r24, r25
     f86:	19 f4       	brne	.+6      	; 0xf8e <dxl_initialize+0x3a>
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	0c c0       	rjmp	.+24     	; 0xfa6 <dxl_initialize+0x52>
		return 0;

	gbCommStatus = COMM_RXSUCCESS;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	90 93 12 04 	sts	0x0412, r25
     f96:	80 93 11 04 	sts	0x0411, r24
	giBusUsing = 0;
     f9a:	10 92 09 06 	sts	0x0609, r1
     f9e:	10 92 08 06 	sts	0x0608, r1
     fa2:	21 e0       	ldi	r18, 0x01	; 1
     fa4:	30 e0       	ldi	r19, 0x00	; 0
	return 1;
}
     fa6:	c9 01       	movw	r24, r18
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	08 95       	ret

00000fae <dxl_hal_open>:
void dxl_hal_put_queue( unsigned char data );
unsigned char dxl_hal_get_queue(void);


int dxl_hal_open(int devIndex, float baudrate)
{
     fae:	ef 92       	push	r14
     fb0:	ff 92       	push	r15
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	7a 01       	movw	r14, r20
     fb8:	8b 01       	movw	r16, r22
	//Bit 4: Frame Error
	//Bit 3: Data OverRun
	//Bit 2: Parity Error
	//Bit 1: Double The USART Transmission Speed
	//Bit 0: Multi-Processor Communication Mode
	UCSR0A = 0b01000010;
     fba:	82 e4       	ldi	r24, 0x42	; 66
     fbc:	80 93 c0 00 	sts	0x00C0, r24
	// bit7: enable rx interrupt
    // bit6: enable tx interrupt
    // bit4: enable rx
    // bit3: enable tx
    // bit2: set sendding size(0 = 8bit)
	UCSR0B = 0b10011000;
     fc0:	88 e9       	ldi	r24, 0x98	; 152
     fc2:	80 93 c1 00 	sts	0x00C1, r24
	// set UART register C
	// bit6: communication mode (1 = synchronize, 0 = asynchronize)
    // bit5,bit4: parity bit(00 = no parity) 
    // bit3: stop bit(0 = stop bit 1, 1 = stop bit 2)
    // bit2,bit1: data size(11 = 8bit)
	UCSR0C = 0b00000110;
     fc6:	86 e0       	ldi	r24, 0x06	; 6
     fc8:	80 93 c2 00 	sts	0x00C2, r24
	
	// Set baudrate
	Divisor = (unsigned short)(2000000.0 / baudrate) - 1;
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	74 e2       	ldi	r23, 0x24	; 36
     fd0:	84 ef       	ldi	r24, 0xF4	; 244
     fd2:	99 e4       	ldi	r25, 0x49	; 73
     fd4:	a8 01       	movw	r20, r16
     fd6:	97 01       	movw	r18, r14
     fd8:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
     fdc:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__fixunssfsi>
     fe0:	61 50       	subi	r22, 0x01	; 1
     fe2:	70 40       	sbci	r23, 0x00	; 0
	UBRR0H = (unsigned char)((Divisor & 0xFF00) >> 8);
     fe4:	70 93 c5 00 	sts	0x00C5, r23
	UBRR0L = (unsigned char)(Divisor & 0x00FF);
     fe8:	60 93 c4 00 	sts	0x00C4, r22

	gfByteTransTime_us = 1000000.0 / (double)baudrate * 12.0;
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	74 e2       	ldi	r23, 0x24	; 36
     ff0:	84 e7       	ldi	r24, 0x74	; 116
     ff2:	99 e4       	ldi	r25, 0x49	; 73
     ff4:	a8 01       	movw	r20, r16
     ff6:	97 01       	movw	r18, r14
     ff8:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e4       	ldi	r20, 0x40	; 64
    1002:	51 e4       	ldi	r21, 0x41	; 65
    1004:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
    1008:	60 93 1e 08 	sts	0x081E, r22
    100c:	70 93 1f 08 	sts	0x081F, r23
    1010:	80 93 20 08 	sts	0x0820, r24
    1014:	90 93 21 08 	sts	0x0821, r25
	gwReturnDelayCountNum = (unsigned int)(250.0 / gfByteTransTime_us);
    1018:	20 91 1e 08 	lds	r18, 0x081E
    101c:	30 91 1f 08 	lds	r19, 0x081F
    1020:	40 91 20 08 	lds	r20, 0x0820
    1024:	50 91 21 08 	lds	r21, 0x0821
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	8a e7       	ldi	r24, 0x7A	; 122
    102e:	93 e4       	ldi	r25, 0x43	; 67
    1030:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
    1034:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__fixunssfsi>
    1038:	70 93 1d 08 	sts	0x081D, r23
    103c:	60 93 1c 08 	sts	0x081C, r22
	
	// initialize
	DIR_RXD;
    1040:	72 98       	cbi	0x0e, 2	; 14
    1042:	73 9a       	sbi	0x0e, 3	; 14
	UDR0 = 0xFF;
    1044:	8f ef       	ldi	r24, 0xFF	; 255
    1046:	80 93 c6 00 	sts	0x00C6, r24
	gbDxlBufferHead = 0;
    104a:	10 92 0a 07 	sts	0x070A, r1
	gbDxlBufferTail = 0;
    104e:	10 92 0b 07 	sts	0x070B, r1
	return 1;
}
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	08 95       	ret

00001060 <dxl_hal_close>:

void dxl_hal_close(void)
{
	// Closing device
}
    1060:	08 95       	ret

00001062 <dxl_hal_clear>:

void dxl_hal_clear(void)
{
	// Clear communication buffer
	gbDxlBufferHead = gbDxlBufferTail;
    1062:	80 91 0b 07 	lds	r24, 0x070B
    1066:	80 93 0a 07 	sts	0x070A, r24
}
    106a:	08 95       	ret

0000106c <dxl_hal_tx>:

int dxl_hal_tx( unsigned char *pPacket, int numPacket )
{
    106c:	ac 01       	movw	r20, r24
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data transmitted. -1 is error.	
	int count;
	
	cli();
    106e:	f8 94       	cli
	DIR_TXD;
    1070:	73 98       	cbi	0x0e, 3	; 14
    1072:	72 9a       	sbi	0x0e, 2	; 14
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	11 c0       	rjmp	.+34     	; 0x109c <dxl_hal_tx+0x30>
	for( count=0; count<numPacket; count++ )
	{
		while(!bit_is_set(UCSR0A,5));
    107a:	80 91 c0 00 	lds	r24, 0x00C0
    107e:	85 ff       	sbrs	r24, 5
    1080:	fc cf       	rjmp	.-8      	; 0x107a <dxl_hal_tx+0xe>
		
		UCSR0A |= 0x40;
    1082:	80 91 c0 00 	lds	r24, 0x00C0
    1086:	80 64       	ori	r24, 0x40	; 64
    1088:	80 93 c0 00 	sts	0x00C0, r24
		UDR0 = pPacket[count];
    108c:	fa 01       	movw	r30, r20
    108e:	e2 0f       	add	r30, r18
    1090:	f3 1f       	adc	r31, r19
    1092:	80 81       	ld	r24, Z
    1094:	80 93 c6 00 	sts	0x00C6, r24
	// Return: number of data transmitted. -1 is error.	
	int count;
	
	cli();
	DIR_TXD;
	for( count=0; count<numPacket; count++ )
    1098:	2f 5f       	subi	r18, 0xFF	; 255
    109a:	3f 4f       	sbci	r19, 0xFF	; 255
    109c:	26 17       	cp	r18, r22
    109e:	37 07       	cpc	r19, r23
    10a0:	64 f3       	brlt	.-40     	; 0x107a <dxl_hal_tx+0xe>
		while(!bit_is_set(UCSR0A,5));
		
		UCSR0A |= 0x40;
		UDR0 = pPacket[count];
	}
	while( !bit_is_set(UCSR0A,6) );
    10a2:	80 91 c0 00 	lds	r24, 0x00C0
    10a6:	86 ff       	sbrs	r24, 6
    10a8:	fc cf       	rjmp	.-8      	; 0x10a2 <dxl_hal_tx+0x36>
	DIR_RXD;
    10aa:	72 98       	cbi	0x0e, 2	; 14
    10ac:	73 9a       	sbi	0x0e, 3	; 14
	sei();
    10ae:	78 94       	sei
	return count;
}
    10b0:	c9 01       	movw	r24, r18
    10b2:	08 95       	ret

000010b4 <dxl_hal_set_timeout>:

void dxl_hal_set_timeout( int NumRcvByte )
{
	// Start stop watch
	// NumRcvByte: number of recieving data(to calculate maximum waiting time)
	gwCountNum = 0;	
    10b4:	10 92 25 08 	sts	0x0825, r1
    10b8:	10 92 24 08 	sts	0x0824, r1
	gwTimeoutCountNum = (NumRcvByte + 10) + gwReturnDelayCountNum;
    10bc:	20 91 1c 08 	lds	r18, 0x081C
    10c0:	30 91 1d 08 	lds	r19, 0x081D
    10c4:	26 5f       	subi	r18, 0xF6	; 246
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
    10c8:	28 0f       	add	r18, r24
    10ca:	39 1f       	adc	r19, r25
    10cc:	30 93 23 08 	sts	0x0823, r19
    10d0:	20 93 22 08 	sts	0x0822, r18
}
    10d4:	08 95       	ret

000010d6 <dxl_hal_timeout>:

int dxl_hal_timeout(void)
{
    10d6:	af 92       	push	r10
    10d8:	bf 92       	push	r11
    10da:	cf 92       	push	r12
    10dc:	df 92       	push	r13
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
	// Check timeout
	// Return: 0 is false, 1 is true(timeout occurred)
	gwCountNum++;
    10e6:	80 91 24 08 	lds	r24, 0x0824
    10ea:	90 91 25 08 	lds	r25, 0x0825
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	90 93 25 08 	sts	0x0825, r25
    10f4:	80 93 24 08 	sts	0x0824, r24
		
	if( gwCountNum > gwTimeoutCountNum )
    10f8:	20 91 24 08 	lds	r18, 0x0824
    10fc:	30 91 25 08 	lds	r19, 0x0825
    1100:	80 91 22 08 	lds	r24, 0x0822
    1104:	90 91 23 08 	lds	r25, 0x0823
    1108:	82 17       	cp	r24, r18
    110a:	93 07       	cpc	r25, r19
    110c:	18 f4       	brcc	.+6      	; 0x1114 <dxl_hal_timeout+0x3e>
    110e:	21 e0       	ldi	r18, 0x01	; 1
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	74 c0       	rjmp	.+232    	; 0x11fc <dxl_hal_timeout+0x126>
	{
		return 1;
	}
	
	_delay_us(gfByteTransTime_us);
    1114:	a0 90 1e 08 	lds	r10, 0x081E
    1118:	b0 90 1f 08 	lds	r11, 0x081F
    111c:	c0 90 20 08 	lds	r12, 0x0820
    1120:	d0 90 21 08 	lds	r13, 0x0821
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1124:	c6 01       	movw	r24, r12
    1126:	b5 01       	movw	r22, r10
    1128:	2b ea       	ldi	r18, 0xAB	; 171
    112a:	3a ea       	ldi	r19, 0xAA	; 170
    112c:	4a ea       	ldi	r20, 0xAA	; 170
    112e:	50 e4       	ldi	r21, 0x40	; 64
    1130:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
    1134:	7b 01       	movw	r14, r22
    1136:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__ltsf2>
    1144:	88 23       	and	r24, r24
    1146:	14 f4       	brge	.+4      	; 0x114c <dxl_hal_timeout+0x76>
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	54 c0       	rjmp	.+168    	; 0x11f4 <dxl_hal_timeout+0x11e>
		__ticks = 1;
	else if (__tmp > 255)
    114c:	c8 01       	movw	r24, r16
    114e:	b7 01       	movw	r22, r14
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	4f e7       	ldi	r20, 0x7F	; 127
    1156:	53 e4       	ldi	r21, 0x43	; 67
    1158:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__gtsf2>
    115c:	18 16       	cp	r1, r24
    115e:	0c f0       	brlt	.+2      	; 0x1162 <dxl_hal_timeout+0x8c>
    1160:	45 c0       	rjmp	.+138    	; 0x11ec <dxl_hal_timeout+0x116>
	{
		_delay_ms(__us / 1000.0);
    1162:	c6 01       	movw	r24, r12
    1164:	b5 01       	movw	r22, r10
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	4a e7       	ldi	r20, 0x7A	; 122
    116c:	54 e4       	ldi	r21, 0x44	; 68
    116e:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
    1172:	5b 01       	movw	r10, r22
    1174:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	4a e7       	ldi	r20, 0x7A	; 122
    117c:	55 e4       	ldi	r21, 0x45	; 69
    117e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
    1182:	7b 01       	movw	r14, r22
    1184:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e8       	ldi	r20, 0x80	; 128
    118c:	5f e3       	ldi	r21, 0x3F	; 63
    118e:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__ltsf2>
    1192:	88 23       	and	r24, r24
    1194:	1c f4       	brge	.+6      	; 0x119c <dxl_hal_timeout+0xc6>
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	24 c0       	rjmp	.+72     	; 0x11e4 <dxl_hal_timeout+0x10e>
		__ticks = 1;
	else if (__tmp > 65535)
    119c:	c8 01       	movw	r24, r16
    119e:	b7 01       	movw	r22, r14
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	3f ef       	ldi	r19, 0xFF	; 255
    11a4:	4f e7       	ldi	r20, 0x7F	; 127
    11a6:	57 e4       	ldi	r21, 0x47	; 71
    11a8:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__gtsf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	b4 f4       	brge	.+44     	; 0x11dc <dxl_hal_timeout+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b0:	c6 01       	movw	r24, r12
    11b2:	b5 01       	movw	r22, r10
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e2       	ldi	r20, 0x20	; 32
    11ba:	51 e4       	ldi	r21, 0x41	; 65
    11bc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__mulsf3>
    11c0:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__fixunssfsi>
    11c4:	80 e9       	ldi	r24, 0x90	; 144
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <dxl_hal_timeout+0xfe>
    11ca:	fc 01       	movw	r30, r24
    11cc:	31 97       	sbiw	r30, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <dxl_hal_timeout+0xf6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d0:	61 50       	subi	r22, 0x01	; 1
    11d2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d4:	61 15       	cp	r22, r1
    11d6:	71 05       	cpc	r23, r1
    11d8:	c1 f7       	brne	.-16     	; 0x11ca <dxl_hal_timeout+0xf4>
    11da:	0e c0       	rjmp	.+28     	; 0x11f8 <dxl_hal_timeout+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11dc:	c8 01       	movw	r24, r16
    11de:	b7 01       	movw	r22, r14
    11e0:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__fixunssfsi>
    11e4:	cb 01       	movw	r24, r22
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <dxl_hal_timeout+0x110>
    11ea:	06 c0       	rjmp	.+12     	; 0x11f8 <dxl_hal_timeout+0x122>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11ec:	c8 01       	movw	r24, r16
    11ee:	b7 01       	movw	r22, r14
    11f0:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11f4:	6a 95       	dec	r22
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <dxl_hal_timeout+0x11e>
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
	return 0;
}
    11fc:	c9 01       	movw	r24, r18
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	ef 90       	pop	r14
    1206:	df 90       	pop	r13
    1208:	cf 90       	pop	r12
    120a:	bf 90       	pop	r11
    120c:	af 90       	pop	r10
    120e:	08 95       	ret

00001210 <dxl_hal_get_qstate>:

int dxl_hal_get_qstate(void)
{
	short NumByte;
	
	if( gbDxlBufferHead == gbDxlBufferTail )
    1210:	90 91 0a 07 	lds	r25, 0x070A
    1214:	80 91 0b 07 	lds	r24, 0x070B
    1218:	98 17       	cp	r25, r24
    121a:	19 f4       	brne	.+6      	; 0x1222 <dxl_hal_get_qstate+0x12>
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	17 c0       	rjmp	.+46     	; 0x1250 <dxl_hal_get_qstate+0x40>
		NumByte = 0;
	else if( gbDxlBufferHead < gbDxlBufferTail )
    1222:	90 91 0a 07 	lds	r25, 0x070A
    1226:	80 91 0b 07 	lds	r24, 0x070B
    122a:	98 17       	cp	r25, r24
    122c:	38 f4       	brcc	.+14     	; 0x123c <dxl_hal_get_qstate+0x2c>
		NumByte = gbDxlBufferTail - gbDxlBufferHead;
    122e:	80 91 0b 07 	lds	r24, 0x070B
    1232:	90 91 0a 07 	lds	r25, 0x070A
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	08 c0       	rjmp	.+16     	; 0x124c <dxl_hal_get_qstate+0x3c>
	else
		NumByte = MAXNUM_DXLBUFF - (gbDxlBufferHead - gbDxlBufferTail);
    123c:	80 91 0b 07 	lds	r24, 0x070B
    1240:	90 91 0a 07 	lds	r25, 0x070A
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	20 50       	subi	r18, 0x00	; 0
    124a:	3f 4f       	sbci	r19, 0xFF	; 255
    124c:	29 1b       	sub	r18, r25
    124e:	31 09       	sbc	r19, r1
	
	return (int)NumByte;
}
    1250:	c9 01       	movw	r24, r18
    1252:	08 95       	ret

00001254 <dxl_hal_put_queue>:

void dxl_hal_put_queue( unsigned char data )
{
    1254:	1f 93       	push	r17
    1256:	18 2f       	mov	r17, r24
	if( dxl_hal_get_qstate() == (MAXNUM_DXLBUFF-1) )
    1258:	0e 94 08 09 	call	0x1210	; 0x1210 <dxl_hal_get_qstate>
    125c:	8f 3f       	cpi	r24, 0xFF	; 255
    125e:	91 05       	cpc	r25, r1
    1260:	91 f0       	breq	.+36     	; 0x1286 <dxl_hal_put_queue+0x32>
		return;
		
	gbDxlBuffer[gbDxlBufferTail] = data;
    1262:	e0 91 0b 07 	lds	r30, 0x070B
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	e6 5f       	subi	r30, 0xF6	; 246
    126a:	f9 4f       	sbci	r31, 0xF9	; 249
    126c:	10 83       	st	Z, r17

	if( gbDxlBufferTail == (MAXNUM_DXLBUFF-1) )
    126e:	80 91 0b 07 	lds	r24, 0x070B
    1272:	8f 3f       	cpi	r24, 0xFF	; 255
    1274:	19 f4       	brne	.+6      	; 0x127c <dxl_hal_put_queue+0x28>
		gbDxlBufferTail = 0;
    1276:	10 92 0b 07 	sts	0x070B, r1
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <dxl_hal_put_queue+0x32>
	else
		gbDxlBufferTail++;
    127c:	80 91 0b 07 	lds	r24, 0x070B
    1280:	8f 5f       	subi	r24, 0xFF	; 255
    1282:	80 93 0b 07 	sts	0x070B, r24
}
    1286:	1f 91       	pop	r17
    1288:	08 95       	ret

0000128a <dxl_hal_get_queue>:

unsigned char dxl_hal_get_queue(void)
{
	unsigned char data;
	
	if( gbDxlBufferHead == gbDxlBufferTail )
    128a:	90 91 0a 07 	lds	r25, 0x070A
    128e:	80 91 0b 07 	lds	r24, 0x070B
    1292:	98 17       	cp	r25, r24
    1294:	11 f4       	brne	.+4      	; 0x129a <dxl_hal_get_queue+0x10>
    1296:	ef ef       	ldi	r30, 0xFF	; 255
    1298:	12 c0       	rjmp	.+36     	; 0x12be <dxl_hal_get_queue+0x34>
		return 0xff;
		
	data = gbDxlBuffer[gbDxlBufferHead];
    129a:	e0 91 0a 07 	lds	r30, 0x070A
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	e6 5f       	subi	r30, 0xF6	; 246
    12a2:	f9 4f       	sbci	r31, 0xF9	; 249
    12a4:	e0 81       	ld	r30, Z
		
	if( gbDxlBufferHead == (MAXNUM_DXLBUFF-1) )
    12a6:	80 91 0a 07 	lds	r24, 0x070A
    12aa:	8f 3f       	cpi	r24, 0xFF	; 255
    12ac:	19 f4       	brne	.+6      	; 0x12b4 <dxl_hal_get_queue+0x2a>
		gbDxlBufferHead = 0;
    12ae:	10 92 0a 07 	sts	0x070A, r1
    12b2:	05 c0       	rjmp	.+10     	; 0x12be <dxl_hal_get_queue+0x34>
	else
		gbDxlBufferHead++;
    12b4:	80 91 0a 07 	lds	r24, 0x070A
    12b8:	8f 5f       	subi	r24, 0xFF	; 255
    12ba:	80 93 0a 07 	sts	0x070A, r24
		
	return data;
}
    12be:	8e 2f       	mov	r24, r30
    12c0:	08 95       	ret

000012c2 <dxl_hal_rx>:
	sei();
	return count;
}

int dxl_hal_rx( unsigned char *pPacket, int numPacket )
{
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	7c 01       	movw	r14, r24
    12d0:	eb 01       	movw	r28, r22
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data recieved. -1 is error.
	int count, numgetbyte;
	
	if( gbDxlBufferHead == gbDxlBufferTail )
    12d2:	90 91 0a 07 	lds	r25, 0x070A
    12d6:	80 91 0b 07 	lds	r24, 0x070B
    12da:	98 17       	cp	r25, r24
    12dc:	19 f4       	brne	.+6      	; 0x12e4 <dxl_hal_rx+0x22>
    12de:	00 e0       	ldi	r16, 0x00	; 0
    12e0:	10 e0       	ldi	r17, 0x00	; 0
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <dxl_hal_rx+0x4a>
		return 0;
	
	numgetbyte = dxl_hal_get_qstate();
    12e4:	0e 94 08 09 	call	0x1210	; 0x1210 <dxl_hal_get_qstate>
    12e8:	8c 01       	movw	r16, r24
    12ea:	c8 17       	cp	r28, r24
    12ec:	d9 07       	cpc	r29, r25
    12ee:	0c f4       	brge	.+2      	; 0x12f2 <dxl_hal_rx+0x30>
    12f0:	8e 01       	movw	r16, r28
    12f2:	c0 e0       	ldi	r28, 0x00	; 0
    12f4:	d0 e0       	ldi	r29, 0x00	; 0
    12f6:	07 c0       	rjmp	.+14     	; 0x1306 <dxl_hal_rx+0x44>
	if( numgetbyte > numPacket )
		numgetbyte = numPacket;
	
	for( count=0; count<numgetbyte; count++ )
		pPacket[count] = dxl_hal_get_queue();
    12f8:	0e 94 45 09 	call	0x128a	; 0x128a <dxl_hal_get_queue>
    12fc:	f7 01       	movw	r30, r14
    12fe:	ec 0f       	add	r30, r28
    1300:	fd 1f       	adc	r31, r29
    1302:	80 83       	st	Z, r24
	
	numgetbyte = dxl_hal_get_qstate();
	if( numgetbyte > numPacket )
		numgetbyte = numPacket;
	
	for( count=0; count<numgetbyte; count++ )
    1304:	21 96       	adiw	r28, 0x01	; 1
    1306:	c0 17       	cp	r28, r16
    1308:	d1 07       	cpc	r29, r17
    130a:	b4 f3       	brlt	.-20     	; 0x12f8 <dxl_hal_rx+0x36>
		pPacket[count] = dxl_hal_get_queue();
	
	return numgetbyte;
}
    130c:	c8 01       	movw	r24, r16
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	08 95       	ret

0000131c <__vector_25>:
		
	return data;
}

SIGNAL(USART0_RX_vect)
{
    131c:	1f 92       	push	r1
    131e:	0f 92       	push	r0
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	0f 92       	push	r0
    1324:	0b b6       	in	r0, 0x3b	; 59
    1326:	0f 92       	push	r0
    1328:	11 24       	eor	r1, r1
    132a:	2f 93       	push	r18
    132c:	3f 93       	push	r19
    132e:	4f 93       	push	r20
    1330:	5f 93       	push	r21
    1332:	6f 93       	push	r22
    1334:	7f 93       	push	r23
    1336:	8f 93       	push	r24
    1338:	9f 93       	push	r25
    133a:	af 93       	push	r26
    133c:	bf 93       	push	r27
    133e:	ef 93       	push	r30
    1340:	ff 93       	push	r31
	dxl_hal_put_queue( UDR0 );
    1342:	80 91 c6 00 	lds	r24, 0x00C6
    1346:	0e 94 2a 09 	call	0x1254	; 0x1254 <dxl_hal_put_queue>
    134a:	ff 91       	pop	r31
    134c:	ef 91       	pop	r30
    134e:	bf 91       	pop	r27
    1350:	af 91       	pop	r26
    1352:	9f 91       	pop	r25
    1354:	8f 91       	pop	r24
    1356:	7f 91       	pop	r23
    1358:	6f 91       	pop	r22
    135a:	5f 91       	pop	r21
    135c:	4f 91       	pop	r20
    135e:	3f 91       	pop	r19
    1360:	2f 91       	pop	r18
    1362:	0f 90       	pop	r0
    1364:	0b be       	out	0x3b, r0	; 59
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	0f 90       	pop	r0
    136c:	1f 90       	pop	r1
    136e:	18 95       	reti

00001370 <zgb_rx_data>:
	return gbRcvFlag;
}

long zgb_rx_data(void)
{
	gbRcvFlag = 0;
    1370:	10 92 27 08 	sts	0x0827, r1
    1374:	60 91 28 08 	lds	r22, 0x0828
    1378:	70 91 29 08 	lds	r23, 0x0829
	return gwRcvData;
}
    137c:	80 91 2a 08 	lds	r24, 0x082A
    1380:	90 91 2b 08 	lds	r25, 0x082B
    1384:	08 95       	ret

00001386 <zgb_rx_check>:
int zgb_rx_check(void)
{
	int RcvNum;
	int i, j;

	if(gbRcvFlag == 1)
    1386:	80 91 27 08 	lds	r24, 0x0827
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	19 f4       	brne	.+6      	; 0x1394 <zgb_rx_check+0xe>
    138e:	21 e0       	ldi	r18, 0x01	; 1
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8f c0       	rjmp	.+286    	; 0x14b2 <zgb_rx_check+0x12c>
		return 1;
	// Fill packet buffer
	if(gbRcvPacketNum < DATA_SIZE)
    1394:	80 91 26 08 	lds	r24, 0x0826
    1398:	85 30       	cpi	r24, 0x05	; 5
    139a:	98 f4       	brcc	.+38     	; 0x13c2 <zgb_rx_check+0x3c>
	{
		RcvNum = zgb_hal_rx( &gbRcvPacket[gbRcvPacketNum], (DATA_SIZE - gbRcvPacketNum) );
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	65 e0       	ldi	r22, 0x05	; 5
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	68 1b       	sub	r22, r24
    13a4:	79 0b       	sbc	r23, r25
    13a6:	84 5d       	subi	r24, 0xD4	; 212
    13a8:	97 4f       	sbci	r25, 0xF7	; 247
    13aa:	0e 94 36 0b 	call	0x166c	; 0x166c <zgb_hal_rx>
    13ae:	9c 01       	movw	r18, r24
		if( RcvNum != -1 )
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	2f 3f       	cpi	r18, 0xFF	; 255
    13b4:	38 07       	cpc	r19, r24
    13b6:	29 f0       	breq	.+10     	; 0x13c2 <zgb_rx_check+0x3c>
			gbRcvPacketNum += RcvNum;
    13b8:	80 91 26 08 	lds	r24, 0x0826
    13bc:	82 0f       	add	r24, r18
    13be:	80 93 26 08 	sts	0x0826, r24
	}
	// Find header
	
	if(gbRcvPacketNum >= 1)
    13c2:	90 91 26 08 	lds	r25, 0x0826
    13c6:	99 23       	and	r25, r25
    13c8:	89 f1       	breq	.+98     	; 0x142c <zgb_rx_check+0xa6>
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
	{
		for( i=0; i<gbRcvPacketNum; i++ )
    13ce:	69 2f       	mov	r22, r25
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	08 c0       	rjmp	.+16     	; 0x13e4 <zgb_rx_check+0x5e>
		{
			if(gbRcvPacket[i] == 0xff)
    13d4:	f9 01       	movw	r30, r18
    13d6:	e4 5d       	subi	r30, 0xD4	; 212
    13d8:	f7 4f       	sbci	r31, 0xF7	; 247
    13da:	80 81       	ld	r24, Z
    13dc:	8f 3f       	cpi	r24, 0xFF	; 255
    13de:	29 f0       	breq	.+10     	; 0x13ea <zgb_rx_check+0x64>
	}
	// Find header
	
	if(gbRcvPacketNum >= 1)
	{
		for( i=0; i<gbRcvPacketNum; i++ )
    13e0:	2f 5f       	subi	r18, 0xFF	; 255
    13e2:	3f 4f       	sbci	r19, 0xFF	; 255
    13e4:	26 17       	cp	r18, r22
    13e6:	37 07       	cpc	r19, r23
    13e8:	ac f3       	brlt	.-22     	; 0x13d4 <zgb_rx_check+0x4e>
			if(gbRcvPacket[i] == 0xff)
			{
				break;
			}
		}
		if(i > 0)
    13ea:	21 15       	cp	r18, r1
    13ec:	31 05       	cpc	r19, r1
    13ee:	f1 f0       	breq	.+60     	; 0x142c <zgb_rx_check+0xa6>
		{
			if(i == gbRcvPacketNum)
    13f0:	26 17       	cp	r18, r22
    13f2:	37 07       	cpc	r19, r23
    13f4:	49 f4       	brne	.+18     	; 0x1408 <zgb_rx_check+0x82>
			{
				// Can not find header
				if(gbRcvPacket[i - 1] == 0xff)
    13f6:	a9 01       	movw	r20, r18
    13f8:	41 50       	subi	r20, 0x01	; 1
    13fa:	50 40       	sbci	r21, 0x00	; 0
    13fc:	fa 01       	movw	r30, r20
    13fe:	e4 5d       	subi	r30, 0xD4	; 212
    1400:	f7 4f       	sbci	r31, 0xF7	; 247
    1402:	80 81       	ld	r24, Z
    1404:	8f 3f       	cpi	r24, 0xFF	; 255
    1406:	09 f0       	breq	.+2      	; 0x140a <zgb_rx_check+0x84>
    1408:	a9 01       	movw	r20, r18
    140a:	da 01       	movw	r26, r20
    140c:	a4 5d       	subi	r26, 0xD4	; 212
    140e:	b7 4f       	sbci	r27, 0xF7	; 247
    1410:	ec e2       	ldi	r30, 0x2C	; 44
    1412:	f8 e0       	ldi	r31, 0x08	; 8
    1414:	9a 01       	movw	r18, r20
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <zgb_rx_check+0x9a>
			}

			// Remove data before header
			for( j=i; j<gbRcvPacketNum; j++)
			{
				gbRcvPacket[j - i] = gbRcvPacket[j];
    1418:	8d 91       	ld	r24, X+
    141a:	81 93       	st	Z+, r24
				if(gbRcvPacket[i - 1] == 0xff)
					i--;
			}

			// Remove data before header
			for( j=i; j<gbRcvPacketNum; j++)
    141c:	2f 5f       	subi	r18, 0xFF	; 255
    141e:	3f 4f       	sbci	r19, 0xFF	; 255
    1420:	26 17       	cp	r18, r22
    1422:	37 07       	cpc	r19, r23
    1424:	cc f3       	brlt	.-14     	; 0x1418 <zgb_rx_check+0x92>
			{
				gbRcvPacket[j - i] = gbRcvPacket[j];
			}
			gbRcvPacketNum -= i;
    1426:	94 1b       	sub	r25, r20
    1428:	90 93 26 08 	sts	0x0826, r25
		}
	}
	// Verify packet
	if(gbRcvPacketNum == DATA_SIZE)
    142c:	80 91 26 08 	lds	r24, 0x0826
    1430:	85 30       	cpi	r24, 0x05	; 5
    1432:	d9 f5       	brne	.+118    	; 0x14aa <zgb_rx_check+0x124>
	{
		if(gbRcvPacket[0] == 0xff)
    1434:	80 91 2c 08 	lds	r24, 0x082C
    1438:	8f 3f       	cpi	r24, 0xFF	; 255
    143a:	99 f5       	brne	.+102    	; 0x14a2 <zgb_rx_check+0x11c>
		{
			gwRcvData = gbRcvPacket[1] + ((unsigned long)gbRcvPacket[2]<<8) + ((unsigned long)gbRcvPacket[3] << 16) + ((unsigned long)gbRcvPacket[4] << 24);
    143c:	20 91 2e 08 	lds	r18, 0x082E
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	54 2f       	mov	r21, r20
    1448:	43 2f       	mov	r20, r19
    144a:	32 2f       	mov	r19, r18
    144c:	22 27       	eor	r18, r18
    144e:	80 91 2f 08 	lds	r24, 0x082F
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a0 e0       	ldi	r26, 0x00	; 0
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	dc 01       	movw	r26, r24
    145a:	99 27       	eor	r25, r25
    145c:	88 27       	eor	r24, r24
    145e:	28 0f       	add	r18, r24
    1460:	39 1f       	adc	r19, r25
    1462:	4a 1f       	adc	r20, r26
    1464:	5b 1f       	adc	r21, r27
    1466:	80 91 2d 08 	lds	r24, 0x082D
    146a:	28 0f       	add	r18, r24
    146c:	31 1d       	adc	r19, r1
    146e:	41 1d       	adc	r20, r1
    1470:	51 1d       	adc	r21, r1
    1472:	80 91 30 08 	lds	r24, 0x0830
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a0 e0       	ldi	r26, 0x00	; 0
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	b8 2f       	mov	r27, r24
    147e:	aa 27       	eor	r26, r26
    1480:	99 27       	eor	r25, r25
    1482:	88 27       	eor	r24, r24
    1484:	28 0f       	add	r18, r24
    1486:	39 1f       	adc	r19, r25
    1488:	4a 1f       	adc	r20, r26
    148a:	5b 1f       	adc	r21, r27
    148c:	20 93 28 08 	sts	0x0828, r18
    1490:	30 93 29 08 	sts	0x0829, r19
    1494:	40 93 2a 08 	sts	0x082A, r20
    1498:	50 93 2b 08 	sts	0x082B, r21
			gbRcvFlag = 1;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 93 27 08 	sts	0x0827, r24
		}

		gbRcvPacket[0] = 0x00;
    14a2:	10 92 2c 08 	sts	0x082C, r1
		gbRcvPacketNum = 0;
    14a6:	10 92 26 08 	sts	0x0826, r1
	}
	return gbRcvFlag;
    14aa:	80 91 27 08 	lds	r24, 0x0827
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
}
    14b2:	c9 01       	movw	r24, r18
    14b4:	08 95       	ret

000014b6 <zgb_tx_data>:
{
	zgb_hal_close();
}

int zgb_tx_data(unsigned long data)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <zgb_tx_data+0x6>
    14bc:	0f 92       	push	r0
    14be:	0f 92       	push	r0
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
	unsigned char packet[DATA_SIZE];
	unsigned char mask = 0xff;
	// First byte is header; 0xff
	packet[0] = 0xff;
    14c4:	2f ef       	ldi	r18, 0xFF	; 255
    14c6:	29 83       	std	Y+1, r18	; 0x01
	// Next 4 bytes are data
	packet[1] = data & mask;
    14c8:	6a 83       	std	Y+2, r22	; 0x02
	packet[2] = (data >> 8) & mask;
    14ca:	27 2f       	mov	r18, r23
    14cc:	38 2f       	mov	r19, r24
    14ce:	49 2f       	mov	r20, r25
    14d0:	55 27       	eor	r21, r21
    14d2:	2b 83       	std	Y+3, r18	; 0x03
	packet[3] = (data >> 16) & mask;
    14d4:	9c 01       	movw	r18, r24
    14d6:	44 27       	eor	r20, r20
    14d8:	55 27       	eor	r21, r21
    14da:	2c 83       	std	Y+4, r18	; 0x04
	packet[4] = (data >> 24) & mask;
    14dc:	69 2f       	mov	r22, r25
    14de:	77 27       	eor	r23, r23
    14e0:	88 27       	eor	r24, r24
    14e2:	99 27       	eor	r25, r25
    14e4:	6d 83       	std	Y+5, r22	; 0x05
	
	if( zgb_hal_tx( packet, DATA_SIZE) != DATA_SIZE )
    14e6:	ce 01       	movw	r24, r28
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	65 e0       	ldi	r22, 0x05	; 5
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	0e 94 ca 0a 	call	0x1594	; 0x1594 <zgb_hal_tx>
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	05 97       	sbiw	r24, 0x05	; 5
    14f8:	11 f4       	brne	.+4      	; 0x14fe <zgb_tx_data+0x48>
    14fa:	21 e0       	ldi	r18, 0x01	; 1
    14fc:	30 e0       	ldi	r19, 0x00	; 0
		return 0;

	return 1;
}
    14fe:	c9 01       	movw	r24, r18
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <zgb_terminate>:
	return 1;
}

void zgb_terminate(void)
{
	zgb_hal_close();
    1510:	0e 94 c9 0a 	call	0x1592	; 0x1592 <zgb_hal_close>
}
    1514:	08 95       	ret

00001516 <zgb_initialize>:
unsigned long gwRcvData;
unsigned char gbRcvFlag;

int zgb_initialize( int devIndex )
{
	if( zgb_hal_open( devIndex, 57600 ) == 0) // Always fixed baudrate
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	61 e6       	ldi	r22, 0x61	; 97
    151c:	77 e4       	ldi	r23, 0x47	; 71
    151e:	0e 94 a6 0a 	call	0x154c	; 0x154c <zgb_hal_open>
    1522:	89 2b       	or	r24, r25
    1524:	19 f4       	brne	.+6      	; 0x152c <zgb_initialize+0x16>
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	0e c0       	rjmp	.+28     	; 0x1548 <zgb_initialize+0x32>
		return 0;

	gbRcvFlag = 0;
    152c:	10 92 27 08 	sts	0x0827, r1
	gwRcvData = 0;
    1530:	10 92 28 08 	sts	0x0828, r1
    1534:	10 92 29 08 	sts	0x0829, r1
    1538:	10 92 2a 08 	sts	0x082A, r1
    153c:	10 92 2b 08 	sts	0x082B, r1
	gbRcvPacketNum = 0;
    1540:	10 92 26 08 	sts	0x0826, r1
    1544:	21 e0       	ldi	r18, 0x01	; 1
    1546:	30 e0       	ldi	r19, 0x00	; 0
	return 1;
}
    1548:	c9 01       	movw	r24, r18
    154a:	08 95       	ret

0000154c <zgb_hal_open>:
int zgb_hal_get_qstate(void);
void zgb_hal_put_queue( unsigned char data );
unsigned char zgb_hal_get_queue(void);

int zgb_hal_open( int devIndex, float baudrate )
{
    154c:	9a 01       	movw	r18, r20
    154e:	ab 01       	movw	r20, r22
	//Bit 4: Frame Error
	//Bit 3: Data OverRun
	//Bit 2: Parity Error
	//Bit 1: Double The USART Transmission Speed
	//Bit 0: Multi-Processor Communication Mode
	UCSR1A = 0b01000010;
    1550:	82 e4       	ldi	r24, 0x42	; 66
    1552:	80 93 c8 00 	sts	0x00C8, r24
	// bit7: enable rx interrupt
    // bit6: enable tx interrupt
    // bit4: enable rx
    // bit3: enable tx
    // bit2: set sendding size(0 = 8bit)
	UCSR1B = 0b10011000;
    1556:	88 e9       	ldi	r24, 0x98	; 152
    1558:	80 93 c9 00 	sts	0x00C9, r24
	// set UART register C
	// bit6: communication mode (1 = synchronize, 0 = asynchronize)
    // bit5,bit4: parity bit(00 = no parity) 
    // bit3: stop bit(0 = stop bit 1, 1 = stop bit 2)
    // bit2,bit1: data size(11 = 8bit)
	UCSR1C = 0b00000110;
    155c:	86 e0       	ldi	r24, 0x06	; 6
    155e:	80 93 ca 00 	sts	0x00CA, r24
	
	// Set baudrate
	Divisor = (unsigned short)(2000000.0 / baudrate) - 1;
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	74 e2       	ldi	r23, 0x24	; 36
    1566:	84 ef       	ldi	r24, 0xF4	; 244
    1568:	99 e4       	ldi	r25, 0x49	; 73
    156a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
    156e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__fixunssfsi>
    1572:	61 50       	subi	r22, 0x01	; 1
    1574:	70 40       	sbci	r23, 0x00	; 0
	UBRR0H = (unsigned char)((Divisor & 0xFF00) >> 8);
    1576:	70 93 c5 00 	sts	0x00C5, r23
	UBRR0L = (unsigned char)(Divisor & 0x00FF);
    157a:	60 93 c4 00 	sts	0x00C4, r22
	
	// initialize
	UDR1 = 0xFF;
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	80 93 ce 00 	sts	0x00CE, r24
	gbZgbBufferHead = 0;
    1584:	10 92 0c 08 	sts	0x080C, r1
	gbZgbBufferTail = 0;
    1588:	10 92 0d 08 	sts	0x080D, r1
	return 1;
}
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	08 95       	ret

00001592 <zgb_hal_close>:

void zgb_hal_close(void)
{
	// Closing device

}
    1592:	08 95       	ret

00001594 <zgb_hal_tx>:

int zgb_hal_tx( unsigned char *pPacket, int numPacket )
{
    1594:	ac 01       	movw	r20, r24
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	0c c0       	rjmp	.+24     	; 0x15b4 <zgb_hal_tx+0x20>
	// Return: number of data transmitted. -1 is error.
	int count;
	
	for( count=0; count<numPacket; count++ )
	{
		while(!bit_is_set(UCSR1A,5));
    159c:	80 91 c8 00 	lds	r24, 0x00C8
    15a0:	85 ff       	sbrs	r24, 5
    15a2:	fc cf       	rjmp	.-8      	; 0x159c <zgb_hal_tx+0x8>
		UDR1 = pPacket[count];
    15a4:	fa 01       	movw	r30, r20
    15a6:	e2 0f       	add	r30, r18
    15a8:	f3 1f       	adc	r31, r19
    15aa:	80 81       	ld	r24, Z
    15ac:	80 93 ce 00 	sts	0x00CE, r24
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data transmitted. -1 is error.
	int count;
	
	for( count=0; count<numPacket; count++ )
    15b0:	2f 5f       	subi	r18, 0xFF	; 255
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	26 17       	cp	r18, r22
    15b6:	37 07       	cpc	r19, r23
    15b8:	8c f3       	brlt	.-30     	; 0x159c <zgb_hal_tx+0x8>
		while(!bit_is_set(UCSR1A,5));
		UDR1 = pPacket[count];
	}
	
	return count;
}
    15ba:	c9 01       	movw	r24, r18
    15bc:	08 95       	ret

000015be <zgb_hal_get_qstate>:

int zgb_hal_get_qstate(void)
{
	short NumByte;
	
	if( gbZgbBufferHead == gbZgbBufferTail )
    15be:	90 91 0c 08 	lds	r25, 0x080C
    15c2:	80 91 0d 08 	lds	r24, 0x080D
    15c6:	98 17       	cp	r25, r24
    15c8:	19 f4       	brne	.+6      	; 0x15d0 <zgb_hal_get_qstate+0x12>
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	17 c0       	rjmp	.+46     	; 0x15fe <zgb_hal_get_qstate+0x40>
		NumByte = 0;
	else if( gbZgbBufferHead < gbZgbBufferTail )
    15d0:	90 91 0c 08 	lds	r25, 0x080C
    15d4:	80 91 0d 08 	lds	r24, 0x080D
    15d8:	98 17       	cp	r25, r24
    15da:	38 f4       	brcc	.+14     	; 0x15ea <zgb_hal_get_qstate+0x2c>
		NumByte = gbZgbBufferTail - gbZgbBufferHead;
    15dc:	80 91 0d 08 	lds	r24, 0x080D
    15e0:	90 91 0c 08 	lds	r25, 0x080C
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	08 c0       	rjmp	.+16     	; 0x15fa <zgb_hal_get_qstate+0x3c>
	else
		NumByte = MAXNUM_ZGBBUFF - (gbZgbBufferHead - gbZgbBufferTail);
    15ea:	80 91 0d 08 	lds	r24, 0x080D
    15ee:	90 91 0c 08 	lds	r25, 0x080C
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	20 50       	subi	r18, 0x00	; 0
    15f8:	3f 4f       	sbci	r19, 0xFF	; 255
    15fa:	29 1b       	sub	r18, r25
    15fc:	31 09       	sbc	r19, r1
	
	return (int)NumByte;
}
    15fe:	c9 01       	movw	r24, r18
    1600:	08 95       	ret

00001602 <zgb_hal_put_queue>:

void zgb_hal_put_queue( unsigned char data )
{
    1602:	1f 93       	push	r17
    1604:	18 2f       	mov	r17, r24
	if( zgb_hal_get_qstate() == (MAXNUM_ZGBBUFF-1) )
    1606:	0e 94 df 0a 	call	0x15be	; 0x15be <zgb_hal_get_qstate>
    160a:	8f 3f       	cpi	r24, 0xFF	; 255
    160c:	91 05       	cpc	r25, r1
    160e:	91 f0       	breq	.+36     	; 0x1634 <zgb_hal_put_queue+0x32>
		return;
	
	gbZgbBuffer[gbZgbBufferTail] = data;
    1610:	e0 91 0d 08 	lds	r30, 0x080D
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	e4 5f       	subi	r30, 0xF4	; 244
    1618:	f8 4f       	sbci	r31, 0xF8	; 248
    161a:	10 83       	st	Z, r17

	if( gbZgbBufferTail == (MAXNUM_ZGBBUFF-1) )
    161c:	80 91 0d 08 	lds	r24, 0x080D
    1620:	8f 3f       	cpi	r24, 0xFF	; 255
    1622:	19 f4       	brne	.+6      	; 0x162a <zgb_hal_put_queue+0x28>
		gbZgbBufferTail = 0;
    1624:	10 92 0d 08 	sts	0x080D, r1
    1628:	05 c0       	rjmp	.+10     	; 0x1634 <zgb_hal_put_queue+0x32>
	else
		gbZgbBufferTail++;
    162a:	80 91 0d 08 	lds	r24, 0x080D
    162e:	8f 5f       	subi	r24, 0xFF	; 255
    1630:	80 93 0d 08 	sts	0x080D, r24
}
    1634:	1f 91       	pop	r17
    1636:	08 95       	ret

00001638 <zgb_hal_get_queue>:

unsigned char zgb_hal_get_queue(void)
{
	unsigned char data;
	
	if( zgb_hal_get_qstate() == 0 )
    1638:	0e 94 df 0a 	call	0x15be	; 0x15be <zgb_hal_get_qstate>
    163c:	89 2b       	or	r24, r25
    163e:	11 f4       	brne	.+4      	; 0x1644 <zgb_hal_get_queue+0xc>
    1640:	ef ef       	ldi	r30, 0xFF	; 255
    1642:	12 c0       	rjmp	.+36     	; 0x1668 <zgb_hal_get_queue+0x30>
		return 0xff;
		
	data = gbZgbBuffer[gbZgbBufferHead];
    1644:	e0 91 0c 08 	lds	r30, 0x080C
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	e4 5f       	subi	r30, 0xF4	; 244
    164c:	f8 4f       	sbci	r31, 0xF8	; 248
    164e:	e0 81       	ld	r30, Z
		
	if( gbZgbBufferHead == (MAXNUM_ZGBBUFF-1) )
    1650:	80 91 0c 08 	lds	r24, 0x080C
    1654:	8f 3f       	cpi	r24, 0xFF	; 255
    1656:	19 f4       	brne	.+6      	; 0x165e <zgb_hal_get_queue+0x26>
		gbZgbBufferHead = 0;
    1658:	10 92 0c 08 	sts	0x080C, r1
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <zgb_hal_get_queue+0x30>
	else
		gbZgbBufferHead++;
    165e:	80 91 0c 08 	lds	r24, 0x080C
    1662:	8f 5f       	subi	r24, 0xFF	; 255
    1664:	80 93 0c 08 	sts	0x080C, r24
		
	return data;
}
    1668:	8e 2f       	mov	r24, r30
    166a:	08 95       	ret

0000166c <zgb_hal_rx>:
	
	return count;
}

int zgb_hal_rx( unsigned char *pPacket, int numPacket )
{
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	7c 01       	movw	r14, r24
    167a:	eb 01       	movw	r28, r22
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data recieved. -1 is error.
	int count, numgetbyte;
	
	numgetbyte = zgb_hal_get_qstate();
    167c:	0e 94 df 0a 	call	0x15be	; 0x15be <zgb_hal_get_qstate>
    1680:	8c 01       	movw	r16, r24
    1682:	c8 17       	cp	r28, r24
    1684:	d9 07       	cpc	r29, r25
    1686:	0c f4       	brge	.+2      	; 0x168a <zgb_hal_rx+0x1e>
    1688:	8e 01       	movw	r16, r28
    168a:	c0 e0       	ldi	r28, 0x00	; 0
    168c:	d0 e0       	ldi	r29, 0x00	; 0
    168e:	07 c0       	rjmp	.+14     	; 0x169e <zgb_hal_rx+0x32>
	if( numgetbyte > numPacket )
		numgetbyte = numPacket;
	
	for( count=0; count<numgetbyte; count++ )
		pPacket[count] = zgb_hal_get_queue();
    1690:	0e 94 1c 0b 	call	0x1638	; 0x1638 <zgb_hal_get_queue>
    1694:	f7 01       	movw	r30, r14
    1696:	ec 0f       	add	r30, r28
    1698:	fd 1f       	adc	r31, r29
    169a:	80 83       	st	Z, r24
	
	numgetbyte = zgb_hal_get_qstate();
	if( numgetbyte > numPacket )
		numgetbyte = numPacket;
	
	for( count=0; count<numgetbyte; count++ )
    169c:	21 96       	adiw	r28, 0x01	; 1
    169e:	c0 17       	cp	r28, r16
    16a0:	d1 07       	cpc	r29, r17
    16a2:	b4 f3       	brlt	.-20     	; 0x1690 <zgb_hal_rx+0x24>
		pPacket[count] = zgb_hal_get_queue();
	
	return numgetbyte;
}
    16a4:	c8 01       	movw	r24, r16
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	08 95       	ret

000016b4 <__fixunssfsi>:
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	7b 01       	movw	r14, r22
    16be:	8c 01       	movw	r16, r24
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e0       	ldi	r20, 0x00	; 0
    16c6:	5f e4       	ldi	r21, 0x4F	; 79
    16c8:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__gesf2>
    16cc:	88 23       	and	r24, r24
    16ce:	8c f0       	brlt	.+34     	; 0x16f2 <__fixunssfsi+0x3e>
    16d0:	c8 01       	movw	r24, r16
    16d2:	b7 01       	movw	r22, r14
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e0       	ldi	r20, 0x00	; 0
    16da:	5f e4       	ldi	r21, 0x4F	; 79
    16dc:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__subsf3>
    16e0:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fixsfsi>
    16e4:	9b 01       	movw	r18, r22
    16e6:	ac 01       	movw	r20, r24
    16e8:	20 50       	subi	r18, 0x00	; 0
    16ea:	30 40       	sbci	r19, 0x00	; 0
    16ec:	40 40       	sbci	r20, 0x00	; 0
    16ee:	50 48       	sbci	r21, 0x80	; 128
    16f0:	06 c0       	rjmp	.+12     	; 0x16fe <__fixunssfsi+0x4a>
    16f2:	c8 01       	movw	r24, r16
    16f4:	b7 01       	movw	r22, r14
    16f6:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fixsfsi>
    16fa:	9b 01       	movw	r18, r22
    16fc:	ac 01       	movw	r20, r24
    16fe:	b9 01       	movw	r22, r18
    1700:	ca 01       	movw	r24, r20
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	08 95       	ret

0000170c <_fpadd_parts>:
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	ec e8       	ldi	r30, 0x8C	; 140
    1712:	fb e0       	ldi	r31, 0x0B	; 11
    1714:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__prologue_saves__>
    1718:	dc 01       	movw	r26, r24
    171a:	2b 01       	movw	r4, r22
    171c:	fa 01       	movw	r30, r20
    171e:	9c 91       	ld	r25, X
    1720:	92 30       	cpi	r25, 0x02	; 2
    1722:	08 f4       	brcc	.+2      	; 0x1726 <_fpadd_parts+0x1a>
    1724:	39 c1       	rjmp	.+626    	; 0x1998 <_fpadd_parts+0x28c>
    1726:	eb 01       	movw	r28, r22
    1728:	88 81       	ld	r24, Y
    172a:	82 30       	cpi	r24, 0x02	; 2
    172c:	08 f4       	brcc	.+2      	; 0x1730 <_fpadd_parts+0x24>
    172e:	33 c1       	rjmp	.+614    	; 0x1996 <_fpadd_parts+0x28a>
    1730:	94 30       	cpi	r25, 0x04	; 4
    1732:	69 f4       	brne	.+26     	; 0x174e <_fpadd_parts+0x42>
    1734:	84 30       	cpi	r24, 0x04	; 4
    1736:	09 f0       	breq	.+2      	; 0x173a <_fpadd_parts+0x2e>
    1738:	2f c1       	rjmp	.+606    	; 0x1998 <_fpadd_parts+0x28c>
    173a:	11 96       	adiw	r26, 0x01	; 1
    173c:	9c 91       	ld	r25, X
    173e:	11 97       	sbiw	r26, 0x01	; 1
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	98 17       	cp	r25, r24
    1744:	09 f4       	brne	.+2      	; 0x1748 <_fpadd_parts+0x3c>
    1746:	28 c1       	rjmp	.+592    	; 0x1998 <_fpadd_parts+0x28c>
    1748:	a3 e1       	ldi	r26, 0x13	; 19
    174a:	b4 e0       	ldi	r27, 0x04	; 4
    174c:	25 c1       	rjmp	.+586    	; 0x1998 <_fpadd_parts+0x28c>
    174e:	84 30       	cpi	r24, 0x04	; 4
    1750:	09 f4       	brne	.+2      	; 0x1754 <_fpadd_parts+0x48>
    1752:	21 c1       	rjmp	.+578    	; 0x1996 <_fpadd_parts+0x28a>
    1754:	82 30       	cpi	r24, 0x02	; 2
    1756:	a9 f4       	brne	.+42     	; 0x1782 <_fpadd_parts+0x76>
    1758:	92 30       	cpi	r25, 0x02	; 2
    175a:	09 f0       	breq	.+2      	; 0x175e <_fpadd_parts+0x52>
    175c:	1d c1       	rjmp	.+570    	; 0x1998 <_fpadd_parts+0x28c>
    175e:	9a 01       	movw	r18, r20
    1760:	ad 01       	movw	r20, r26
    1762:	88 e0       	ldi	r24, 0x08	; 8
    1764:	ea 01       	movw	r28, r20
    1766:	09 90       	ld	r0, Y+
    1768:	ae 01       	movw	r20, r28
    176a:	e9 01       	movw	r28, r18
    176c:	09 92       	st	Y+, r0
    176e:	9e 01       	movw	r18, r28
    1770:	81 50       	subi	r24, 0x01	; 1
    1772:	c1 f7       	brne	.-16     	; 0x1764 <_fpadd_parts+0x58>
    1774:	e2 01       	movw	r28, r4
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	11 96       	adiw	r26, 0x01	; 1
    177a:	9c 91       	ld	r25, X
    177c:	89 23       	and	r24, r25
    177e:	81 83       	std	Z+1, r24	; 0x01
    1780:	08 c1       	rjmp	.+528    	; 0x1992 <_fpadd_parts+0x286>
    1782:	92 30       	cpi	r25, 0x02	; 2
    1784:	09 f4       	brne	.+2      	; 0x1788 <_fpadd_parts+0x7c>
    1786:	07 c1       	rjmp	.+526    	; 0x1996 <_fpadd_parts+0x28a>
    1788:	12 96       	adiw	r26, 0x02	; 2
    178a:	2d 90       	ld	r2, X+
    178c:	3c 90       	ld	r3, X
    178e:	13 97       	sbiw	r26, 0x03	; 3
    1790:	eb 01       	movw	r28, r22
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	9b 81       	ldd	r25, Y+3	; 0x03
    1796:	14 96       	adiw	r26, 0x04	; 4
    1798:	ad 90       	ld	r10, X+
    179a:	bd 90       	ld	r11, X+
    179c:	cd 90       	ld	r12, X+
    179e:	dc 90       	ld	r13, X
    17a0:	17 97       	sbiw	r26, 0x07	; 7
    17a2:	ec 80       	ldd	r14, Y+4	; 0x04
    17a4:	fd 80       	ldd	r15, Y+5	; 0x05
    17a6:	0e 81       	ldd	r16, Y+6	; 0x06
    17a8:	1f 81       	ldd	r17, Y+7	; 0x07
    17aa:	91 01       	movw	r18, r2
    17ac:	28 1b       	sub	r18, r24
    17ae:	39 0b       	sbc	r19, r25
    17b0:	b9 01       	movw	r22, r18
    17b2:	37 ff       	sbrs	r19, 7
    17b4:	04 c0       	rjmp	.+8      	; 0x17be <_fpadd_parts+0xb2>
    17b6:	66 27       	eor	r22, r22
    17b8:	77 27       	eor	r23, r23
    17ba:	62 1b       	sub	r22, r18
    17bc:	73 0b       	sbc	r23, r19
    17be:	60 32       	cpi	r22, 0x20	; 32
    17c0:	71 05       	cpc	r23, r1
    17c2:	0c f0       	brlt	.+2      	; 0x17c6 <_fpadd_parts+0xba>
    17c4:	61 c0       	rjmp	.+194    	; 0x1888 <_fpadd_parts+0x17c>
    17c6:	12 16       	cp	r1, r18
    17c8:	13 06       	cpc	r1, r19
    17ca:	6c f5       	brge	.+90     	; 0x1826 <_fpadd_parts+0x11a>
    17cc:	37 01       	movw	r6, r14
    17ce:	48 01       	movw	r8, r16
    17d0:	06 2e       	mov	r0, r22
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <_fpadd_parts+0xd0>
    17d4:	96 94       	lsr	r9
    17d6:	87 94       	ror	r8
    17d8:	77 94       	ror	r7
    17da:	67 94       	ror	r6
    17dc:	0a 94       	dec	r0
    17de:	d2 f7       	brpl	.-12     	; 0x17d4 <_fpadd_parts+0xc8>
    17e0:	21 e0       	ldi	r18, 0x01	; 1
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <_fpadd_parts+0xe6>
    17ea:	22 0f       	add	r18, r18
    17ec:	33 1f       	adc	r19, r19
    17ee:	44 1f       	adc	r20, r20
    17f0:	55 1f       	adc	r21, r21
    17f2:	6a 95       	dec	r22
    17f4:	d2 f7       	brpl	.-12     	; 0x17ea <_fpadd_parts+0xde>
    17f6:	21 50       	subi	r18, 0x01	; 1
    17f8:	30 40       	sbci	r19, 0x00	; 0
    17fa:	40 40       	sbci	r20, 0x00	; 0
    17fc:	50 40       	sbci	r21, 0x00	; 0
    17fe:	2e 21       	and	r18, r14
    1800:	3f 21       	and	r19, r15
    1802:	40 23       	and	r20, r16
    1804:	51 23       	and	r21, r17
    1806:	21 15       	cp	r18, r1
    1808:	31 05       	cpc	r19, r1
    180a:	41 05       	cpc	r20, r1
    180c:	51 05       	cpc	r21, r1
    180e:	21 f0       	breq	.+8      	; 0x1818 <_fpadd_parts+0x10c>
    1810:	21 e0       	ldi	r18, 0x01	; 1
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	79 01       	movw	r14, r18
    181a:	8a 01       	movw	r16, r20
    181c:	e6 28       	or	r14, r6
    181e:	f7 28       	or	r15, r7
    1820:	08 29       	or	r16, r8
    1822:	19 29       	or	r17, r9
    1824:	3c c0       	rjmp	.+120    	; 0x189e <_fpadd_parts+0x192>
    1826:	23 2b       	or	r18, r19
    1828:	d1 f1       	breq	.+116    	; 0x189e <_fpadd_parts+0x192>
    182a:	26 0e       	add	r2, r22
    182c:	37 1e       	adc	r3, r23
    182e:	35 01       	movw	r6, r10
    1830:	46 01       	movw	r8, r12
    1832:	06 2e       	mov	r0, r22
    1834:	04 c0       	rjmp	.+8      	; 0x183e <_fpadd_parts+0x132>
    1836:	96 94       	lsr	r9
    1838:	87 94       	ror	r8
    183a:	77 94       	ror	r7
    183c:	67 94       	ror	r6
    183e:	0a 94       	dec	r0
    1840:	d2 f7       	brpl	.-12     	; 0x1836 <_fpadd_parts+0x12a>
    1842:	21 e0       	ldi	r18, 0x01	; 1
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	04 c0       	rjmp	.+8      	; 0x1854 <_fpadd_parts+0x148>
    184c:	22 0f       	add	r18, r18
    184e:	33 1f       	adc	r19, r19
    1850:	44 1f       	adc	r20, r20
    1852:	55 1f       	adc	r21, r21
    1854:	6a 95       	dec	r22
    1856:	d2 f7       	brpl	.-12     	; 0x184c <_fpadd_parts+0x140>
    1858:	21 50       	subi	r18, 0x01	; 1
    185a:	30 40       	sbci	r19, 0x00	; 0
    185c:	40 40       	sbci	r20, 0x00	; 0
    185e:	50 40       	sbci	r21, 0x00	; 0
    1860:	2a 21       	and	r18, r10
    1862:	3b 21       	and	r19, r11
    1864:	4c 21       	and	r20, r12
    1866:	5d 21       	and	r21, r13
    1868:	21 15       	cp	r18, r1
    186a:	31 05       	cpc	r19, r1
    186c:	41 05       	cpc	r20, r1
    186e:	51 05       	cpc	r21, r1
    1870:	21 f0       	breq	.+8      	; 0x187a <_fpadd_parts+0x16e>
    1872:	21 e0       	ldi	r18, 0x01	; 1
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	59 01       	movw	r10, r18
    187c:	6a 01       	movw	r12, r20
    187e:	a6 28       	or	r10, r6
    1880:	b7 28       	or	r11, r7
    1882:	c8 28       	or	r12, r8
    1884:	d9 28       	or	r13, r9
    1886:	0b c0       	rjmp	.+22     	; 0x189e <_fpadd_parts+0x192>
    1888:	82 15       	cp	r24, r2
    188a:	93 05       	cpc	r25, r3
    188c:	2c f0       	brlt	.+10     	; 0x1898 <_fpadd_parts+0x18c>
    188e:	1c 01       	movw	r2, r24
    1890:	aa 24       	eor	r10, r10
    1892:	bb 24       	eor	r11, r11
    1894:	65 01       	movw	r12, r10
    1896:	03 c0       	rjmp	.+6      	; 0x189e <_fpadd_parts+0x192>
    1898:	ee 24       	eor	r14, r14
    189a:	ff 24       	eor	r15, r15
    189c:	87 01       	movw	r16, r14
    189e:	11 96       	adiw	r26, 0x01	; 1
    18a0:	9c 91       	ld	r25, X
    18a2:	d2 01       	movw	r26, r4
    18a4:	11 96       	adiw	r26, 0x01	; 1
    18a6:	8c 91       	ld	r24, X
    18a8:	98 17       	cp	r25, r24
    18aa:	09 f4       	brne	.+2      	; 0x18ae <_fpadd_parts+0x1a2>
    18ac:	45 c0       	rjmp	.+138    	; 0x1938 <_fpadd_parts+0x22c>
    18ae:	99 23       	and	r25, r25
    18b0:	39 f0       	breq	.+14     	; 0x18c0 <_fpadd_parts+0x1b4>
    18b2:	a8 01       	movw	r20, r16
    18b4:	97 01       	movw	r18, r14
    18b6:	2a 19       	sub	r18, r10
    18b8:	3b 09       	sbc	r19, r11
    18ba:	4c 09       	sbc	r20, r12
    18bc:	5d 09       	sbc	r21, r13
    18be:	06 c0       	rjmp	.+12     	; 0x18cc <_fpadd_parts+0x1c0>
    18c0:	a6 01       	movw	r20, r12
    18c2:	95 01       	movw	r18, r10
    18c4:	2e 19       	sub	r18, r14
    18c6:	3f 09       	sbc	r19, r15
    18c8:	40 0b       	sbc	r20, r16
    18ca:	51 0b       	sbc	r21, r17
    18cc:	57 fd       	sbrc	r21, 7
    18ce:	08 c0       	rjmp	.+16     	; 0x18e0 <_fpadd_parts+0x1d4>
    18d0:	11 82       	std	Z+1, r1	; 0x01
    18d2:	33 82       	std	Z+3, r3	; 0x03
    18d4:	22 82       	std	Z+2, r2	; 0x02
    18d6:	24 83       	std	Z+4, r18	; 0x04
    18d8:	35 83       	std	Z+5, r19	; 0x05
    18da:	46 83       	std	Z+6, r20	; 0x06
    18dc:	57 83       	std	Z+7, r21	; 0x07
    18de:	1d c0       	rjmp	.+58     	; 0x191a <_fpadd_parts+0x20e>
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	81 83       	std	Z+1, r24	; 0x01
    18e4:	33 82       	std	Z+3, r3	; 0x03
    18e6:	22 82       	std	Z+2, r2	; 0x02
    18e8:	88 27       	eor	r24, r24
    18ea:	99 27       	eor	r25, r25
    18ec:	dc 01       	movw	r26, r24
    18ee:	82 1b       	sub	r24, r18
    18f0:	93 0b       	sbc	r25, r19
    18f2:	a4 0b       	sbc	r26, r20
    18f4:	b5 0b       	sbc	r27, r21
    18f6:	84 83       	std	Z+4, r24	; 0x04
    18f8:	95 83       	std	Z+5, r25	; 0x05
    18fa:	a6 83       	std	Z+6, r26	; 0x06
    18fc:	b7 83       	std	Z+7, r27	; 0x07
    18fe:	0d c0       	rjmp	.+26     	; 0x191a <_fpadd_parts+0x20e>
    1900:	22 0f       	add	r18, r18
    1902:	33 1f       	adc	r19, r19
    1904:	44 1f       	adc	r20, r20
    1906:	55 1f       	adc	r21, r21
    1908:	24 83       	std	Z+4, r18	; 0x04
    190a:	35 83       	std	Z+5, r19	; 0x05
    190c:	46 83       	std	Z+6, r20	; 0x06
    190e:	57 83       	std	Z+7, r21	; 0x07
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	93 83       	std	Z+3, r25	; 0x03
    1918:	82 83       	std	Z+2, r24	; 0x02
    191a:	24 81       	ldd	r18, Z+4	; 0x04
    191c:	35 81       	ldd	r19, Z+5	; 0x05
    191e:	46 81       	ldd	r20, Z+6	; 0x06
    1920:	57 81       	ldd	r21, Z+7	; 0x07
    1922:	da 01       	movw	r26, r20
    1924:	c9 01       	movw	r24, r18
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	a1 09       	sbc	r26, r1
    192a:	b1 09       	sbc	r27, r1
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	9f 4f       	sbci	r25, 0xFF	; 255
    1930:	af 4f       	sbci	r26, 0xFF	; 255
    1932:	bf 43       	sbci	r27, 0x3F	; 63
    1934:	28 f3       	brcs	.-54     	; 0x1900 <_fpadd_parts+0x1f4>
    1936:	0b c0       	rjmp	.+22     	; 0x194e <_fpadd_parts+0x242>
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	33 82       	std	Z+3, r3	; 0x03
    193c:	22 82       	std	Z+2, r2	; 0x02
    193e:	ea 0c       	add	r14, r10
    1940:	fb 1c       	adc	r15, r11
    1942:	0c 1d       	adc	r16, r12
    1944:	1d 1d       	adc	r17, r13
    1946:	e4 82       	std	Z+4, r14	; 0x04
    1948:	f5 82       	std	Z+5, r15	; 0x05
    194a:	06 83       	std	Z+6, r16	; 0x06
    194c:	17 83       	std	Z+7, r17	; 0x07
    194e:	83 e0       	ldi	r24, 0x03	; 3
    1950:	80 83       	st	Z, r24
    1952:	24 81       	ldd	r18, Z+4	; 0x04
    1954:	35 81       	ldd	r19, Z+5	; 0x05
    1956:	46 81       	ldd	r20, Z+6	; 0x06
    1958:	57 81       	ldd	r21, Z+7	; 0x07
    195a:	57 ff       	sbrs	r21, 7
    195c:	1a c0       	rjmp	.+52     	; 0x1992 <_fpadd_parts+0x286>
    195e:	c9 01       	movw	r24, r18
    1960:	aa 27       	eor	r26, r26
    1962:	97 fd       	sbrc	r25, 7
    1964:	a0 95       	com	r26
    1966:	ba 2f       	mov	r27, r26
    1968:	81 70       	andi	r24, 0x01	; 1
    196a:	90 70       	andi	r25, 0x00	; 0
    196c:	a0 70       	andi	r26, 0x00	; 0
    196e:	b0 70       	andi	r27, 0x00	; 0
    1970:	56 95       	lsr	r21
    1972:	47 95       	ror	r20
    1974:	37 95       	ror	r19
    1976:	27 95       	ror	r18
    1978:	82 2b       	or	r24, r18
    197a:	93 2b       	or	r25, r19
    197c:	a4 2b       	or	r26, r20
    197e:	b5 2b       	or	r27, r21
    1980:	84 83       	std	Z+4, r24	; 0x04
    1982:	95 83       	std	Z+5, r25	; 0x05
    1984:	a6 83       	std	Z+6, r26	; 0x06
    1986:	b7 83       	std	Z+7, r27	; 0x07
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	93 83       	std	Z+3, r25	; 0x03
    1990:	82 83       	std	Z+2, r24	; 0x02
    1992:	df 01       	movw	r26, r30
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <_fpadd_parts+0x28c>
    1996:	d2 01       	movw	r26, r4
    1998:	cd 01       	movw	r24, r26
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	e2 e1       	ldi	r30, 0x12	; 18
    19a0:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__epilogue_restores__>

000019a4 <__subsf3>:
    19a4:	a0 e2       	ldi	r26, 0x20	; 32
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e8 ed       	ldi	r30, 0xD8	; 216
    19aa:	fc e0       	ldi	r31, 0x0C	; 12
    19ac:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
    19b0:	69 83       	std	Y+1, r22	; 0x01
    19b2:	7a 83       	std	Y+2, r23	; 0x02
    19b4:	8b 83       	std	Y+3, r24	; 0x03
    19b6:	9c 83       	std	Y+4, r25	; 0x04
    19b8:	2d 83       	std	Y+5, r18	; 0x05
    19ba:	3e 83       	std	Y+6, r19	; 0x06
    19bc:	4f 83       	std	Y+7, r20	; 0x07
    19be:	58 87       	std	Y+8, r21	; 0x08
    19c0:	e9 e0       	ldi	r30, 0x09	; 9
    19c2:	ee 2e       	mov	r14, r30
    19c4:	f1 2c       	mov	r15, r1
    19c6:	ec 0e       	add	r14, r28
    19c8:	fd 1e       	adc	r15, r29
    19ca:	ce 01       	movw	r24, r28
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	b7 01       	movw	r22, r14
    19d0:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    19d4:	8e 01       	movw	r16, r28
    19d6:	0f 5e       	subi	r16, 0xEF	; 239
    19d8:	1f 4f       	sbci	r17, 0xFF	; 255
    19da:	ce 01       	movw	r24, r28
    19dc:	05 96       	adiw	r24, 0x05	; 5
    19de:	b8 01       	movw	r22, r16
    19e0:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    19e4:	8a 89       	ldd	r24, Y+18	; 0x12
    19e6:	91 e0       	ldi	r25, 0x01	; 1
    19e8:	89 27       	eor	r24, r25
    19ea:	8a 8b       	std	Y+18, r24	; 0x12
    19ec:	c7 01       	movw	r24, r14
    19ee:	b8 01       	movw	r22, r16
    19f0:	ae 01       	movw	r20, r28
    19f2:	47 5e       	subi	r20, 0xE7	; 231
    19f4:	5f 4f       	sbci	r21, 0xFF	; 255
    19f6:	0e 94 86 0b 	call	0x170c	; 0x170c <_fpadd_parts>
    19fa:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__pack_f>
    19fe:	a0 96       	adiw	r28, 0x20	; 32
    1a00:	e6 e0       	ldi	r30, 0x06	; 6
    1a02:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

00001a06 <__addsf3>:
    1a06:	a0 e2       	ldi	r26, 0x20	; 32
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e9 e0       	ldi	r30, 0x09	; 9
    1a0c:	fd e0       	ldi	r31, 0x0D	; 13
    1a0e:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
    1a12:	69 83       	std	Y+1, r22	; 0x01
    1a14:	7a 83       	std	Y+2, r23	; 0x02
    1a16:	8b 83       	std	Y+3, r24	; 0x03
    1a18:	9c 83       	std	Y+4, r25	; 0x04
    1a1a:	2d 83       	std	Y+5, r18	; 0x05
    1a1c:	3e 83       	std	Y+6, r19	; 0x06
    1a1e:	4f 83       	std	Y+7, r20	; 0x07
    1a20:	58 87       	std	Y+8, r21	; 0x08
    1a22:	f9 e0       	ldi	r31, 0x09	; 9
    1a24:	ef 2e       	mov	r14, r31
    1a26:	f1 2c       	mov	r15, r1
    1a28:	ec 0e       	add	r14, r28
    1a2a:	fd 1e       	adc	r15, r29
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	b7 01       	movw	r22, r14
    1a32:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    1a36:	8e 01       	movw	r16, r28
    1a38:	0f 5e       	subi	r16, 0xEF	; 239
    1a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	05 96       	adiw	r24, 0x05	; 5
    1a40:	b8 01       	movw	r22, r16
    1a42:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    1a46:	c7 01       	movw	r24, r14
    1a48:	b8 01       	movw	r22, r16
    1a4a:	ae 01       	movw	r20, r28
    1a4c:	47 5e       	subi	r20, 0xE7	; 231
    1a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a50:	0e 94 86 0b 	call	0x170c	; 0x170c <_fpadd_parts>
    1a54:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__pack_f>
    1a58:	a0 96       	adiw	r28, 0x20	; 32
    1a5a:	e6 e0       	ldi	r30, 0x06	; 6
    1a5c:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

00001a60 <__mulsf3>:
    1a60:	a0 e2       	ldi	r26, 0x20	; 32
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e6 e3       	ldi	r30, 0x36	; 54
    1a66:	fd e0       	ldi	r31, 0x0D	; 13
    1a68:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__prologue_saves__>
    1a6c:	69 83       	std	Y+1, r22	; 0x01
    1a6e:	7a 83       	std	Y+2, r23	; 0x02
    1a70:	8b 83       	std	Y+3, r24	; 0x03
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	2d 83       	std	Y+5, r18	; 0x05
    1a76:	3e 83       	std	Y+6, r19	; 0x06
    1a78:	4f 83       	std	Y+7, r20	; 0x07
    1a7a:	58 87       	std	Y+8, r21	; 0x08
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	be 01       	movw	r22, r28
    1a82:	67 5f       	subi	r22, 0xF7	; 247
    1a84:	7f 4f       	sbci	r23, 0xFF	; 255
    1a86:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	05 96       	adiw	r24, 0x05	; 5
    1a8e:	be 01       	movw	r22, r28
    1a90:	6f 5e       	subi	r22, 0xEF	; 239
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    1a98:	99 85       	ldd	r25, Y+9	; 0x09
    1a9a:	92 30       	cpi	r25, 0x02	; 2
    1a9c:	88 f0       	brcs	.+34     	; 0x1ac0 <__mulsf3+0x60>
    1a9e:	89 89       	ldd	r24, Y+17	; 0x11
    1aa0:	82 30       	cpi	r24, 0x02	; 2
    1aa2:	c8 f0       	brcs	.+50     	; 0x1ad6 <__mulsf3+0x76>
    1aa4:	94 30       	cpi	r25, 0x04	; 4
    1aa6:	19 f4       	brne	.+6      	; 0x1aae <__mulsf3+0x4e>
    1aa8:	82 30       	cpi	r24, 0x02	; 2
    1aaa:	51 f4       	brne	.+20     	; 0x1ac0 <__mulsf3+0x60>
    1aac:	04 c0       	rjmp	.+8      	; 0x1ab6 <__mulsf3+0x56>
    1aae:	84 30       	cpi	r24, 0x04	; 4
    1ab0:	29 f4       	brne	.+10     	; 0x1abc <__mulsf3+0x5c>
    1ab2:	92 30       	cpi	r25, 0x02	; 2
    1ab4:	81 f4       	brne	.+32     	; 0x1ad6 <__mulsf3+0x76>
    1ab6:	83 e1       	ldi	r24, 0x13	; 19
    1ab8:	94 e0       	ldi	r25, 0x04	; 4
    1aba:	c6 c0       	rjmp	.+396    	; 0x1c48 <__mulsf3+0x1e8>
    1abc:	92 30       	cpi	r25, 0x02	; 2
    1abe:	49 f4       	brne	.+18     	; 0x1ad2 <__mulsf3+0x72>
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac4:	8a 89       	ldd	r24, Y+18	; 0x12
    1ac6:	98 13       	cpse	r25, r24
    1ac8:	21 e0       	ldi	r18, 0x01	; 1
    1aca:	2a 87       	std	Y+10, r18	; 0x0a
    1acc:	ce 01       	movw	r24, r28
    1ace:	09 96       	adiw	r24, 0x09	; 9
    1ad0:	bb c0       	rjmp	.+374    	; 0x1c48 <__mulsf3+0x1e8>
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	49 f4       	brne	.+18     	; 0x1ae8 <__mulsf3+0x88>
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ada:	8a 89       	ldd	r24, Y+18	; 0x12
    1adc:	98 13       	cpse	r25, r24
    1ade:	21 e0       	ldi	r18, 0x01	; 1
    1ae0:	2a 8b       	std	Y+18, r18	; 0x12
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	41 96       	adiw	r24, 0x11	; 17
    1ae6:	b0 c0       	rjmp	.+352    	; 0x1c48 <__mulsf3+0x1e8>
    1ae8:	2d 84       	ldd	r2, Y+13	; 0x0d
    1aea:	3e 84       	ldd	r3, Y+14	; 0x0e
    1aec:	4f 84       	ldd	r4, Y+15	; 0x0f
    1aee:	58 88       	ldd	r5, Y+16	; 0x10
    1af0:	6d 88       	ldd	r6, Y+21	; 0x15
    1af2:	7e 88       	ldd	r7, Y+22	; 0x16
    1af4:	8f 88       	ldd	r8, Y+23	; 0x17
    1af6:	98 8c       	ldd	r9, Y+24	; 0x18
    1af8:	ee 24       	eor	r14, r14
    1afa:	ff 24       	eor	r15, r15
    1afc:	87 01       	movw	r16, r14
    1afe:	aa 24       	eor	r10, r10
    1b00:	bb 24       	eor	r11, r11
    1b02:	65 01       	movw	r12, r10
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	e0 e0       	ldi	r30, 0x00	; 0
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	c1 01       	movw	r24, r2
    1b12:	81 70       	andi	r24, 0x01	; 1
    1b14:	90 70       	andi	r25, 0x00	; 0
    1b16:	89 2b       	or	r24, r25
    1b18:	e9 f0       	breq	.+58     	; 0x1b54 <__mulsf3+0xf4>
    1b1a:	e6 0c       	add	r14, r6
    1b1c:	f7 1c       	adc	r15, r7
    1b1e:	08 1d       	adc	r16, r8
    1b20:	19 1d       	adc	r17, r9
    1b22:	9a 01       	movw	r18, r20
    1b24:	ab 01       	movw	r20, r22
    1b26:	2a 0d       	add	r18, r10
    1b28:	3b 1d       	adc	r19, r11
    1b2a:	4c 1d       	adc	r20, r12
    1b2c:	5d 1d       	adc	r21, r13
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a0 e0       	ldi	r26, 0x00	; 0
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e6 14       	cp	r14, r6
    1b38:	f7 04       	cpc	r15, r7
    1b3a:	08 05       	cpc	r16, r8
    1b3c:	19 05       	cpc	r17, r9
    1b3e:	20 f4       	brcc	.+8      	; 0x1b48 <__mulsf3+0xe8>
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 e0       	ldi	r26, 0x00	; 0
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	ba 01       	movw	r22, r20
    1b4a:	a9 01       	movw	r20, r18
    1b4c:	48 0f       	add	r20, r24
    1b4e:	59 1f       	adc	r21, r25
    1b50:	6a 1f       	adc	r22, r26
    1b52:	7b 1f       	adc	r23, r27
    1b54:	aa 0c       	add	r10, r10
    1b56:	bb 1c       	adc	r11, r11
    1b58:	cc 1c       	adc	r12, r12
    1b5a:	dd 1c       	adc	r13, r13
    1b5c:	97 fe       	sbrs	r9, 7
    1b5e:	08 c0       	rjmp	.+16     	; 0x1b70 <__mulsf3+0x110>
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a0 e0       	ldi	r26, 0x00	; 0
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	a8 2a       	or	r10, r24
    1b6a:	b9 2a       	or	r11, r25
    1b6c:	ca 2a       	or	r12, r26
    1b6e:	db 2a       	or	r13, r27
    1b70:	31 96       	adiw	r30, 0x01	; 1
    1b72:	e0 32       	cpi	r30, 0x20	; 32
    1b74:	f1 05       	cpc	r31, r1
    1b76:	49 f0       	breq	.+18     	; 0x1b8a <__mulsf3+0x12a>
    1b78:	66 0c       	add	r6, r6
    1b7a:	77 1c       	adc	r7, r7
    1b7c:	88 1c       	adc	r8, r8
    1b7e:	99 1c       	adc	r9, r9
    1b80:	56 94       	lsr	r5
    1b82:	47 94       	ror	r4
    1b84:	37 94       	ror	r3
    1b86:	27 94       	ror	r2
    1b88:	c3 cf       	rjmp	.-122    	; 0x1b10 <__mulsf3+0xb0>
    1b8a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b8c:	ea 89       	ldd	r30, Y+18	; 0x12
    1b8e:	2b 89       	ldd	r18, Y+19	; 0x13
    1b90:	3c 89       	ldd	r19, Y+20	; 0x14
    1b92:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b94:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b96:	28 0f       	add	r18, r24
    1b98:	39 1f       	adc	r19, r25
    1b9a:	2e 5f       	subi	r18, 0xFE	; 254
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9e:	17 c0       	rjmp	.+46     	; 0x1bce <__mulsf3+0x16e>
    1ba0:	ca 01       	movw	r24, r20
    1ba2:	81 70       	andi	r24, 0x01	; 1
    1ba4:	90 70       	andi	r25, 0x00	; 0
    1ba6:	89 2b       	or	r24, r25
    1ba8:	61 f0       	breq	.+24     	; 0x1bc2 <__mulsf3+0x162>
    1baa:	16 95       	lsr	r17
    1bac:	07 95       	ror	r16
    1bae:	f7 94       	ror	r15
    1bb0:	e7 94       	ror	r14
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a0 e0       	ldi	r26, 0x00	; 0
    1bb8:	b0 e8       	ldi	r27, 0x80	; 128
    1bba:	e8 2a       	or	r14, r24
    1bbc:	f9 2a       	or	r15, r25
    1bbe:	0a 2b       	or	r16, r26
    1bc0:	1b 2b       	or	r17, r27
    1bc2:	76 95       	lsr	r23
    1bc4:	67 95       	ror	r22
    1bc6:	57 95       	ror	r21
    1bc8:	47 95       	ror	r20
    1bca:	2f 5f       	subi	r18, 0xFF	; 255
    1bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bce:	77 fd       	sbrc	r23, 7
    1bd0:	e7 cf       	rjmp	.-50     	; 0x1ba0 <__mulsf3+0x140>
    1bd2:	0c c0       	rjmp	.+24     	; 0x1bec <__mulsf3+0x18c>
    1bd4:	44 0f       	add	r20, r20
    1bd6:	55 1f       	adc	r21, r21
    1bd8:	66 1f       	adc	r22, r22
    1bda:	77 1f       	adc	r23, r23
    1bdc:	17 fd       	sbrc	r17, 7
    1bde:	41 60       	ori	r20, 0x01	; 1
    1be0:	ee 0c       	add	r14, r14
    1be2:	ff 1c       	adc	r15, r15
    1be4:	00 1f       	adc	r16, r16
    1be6:	11 1f       	adc	r17, r17
    1be8:	21 50       	subi	r18, 0x01	; 1
    1bea:	30 40       	sbci	r19, 0x00	; 0
    1bec:	40 30       	cpi	r20, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	59 07       	cpc	r21, r25
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	69 07       	cpc	r22, r25
    1bf6:	90 e4       	ldi	r25, 0x40	; 64
    1bf8:	79 07       	cpc	r23, r25
    1bfa:	60 f3       	brcs	.-40     	; 0x1bd4 <__mulsf3+0x174>
    1bfc:	2b 8f       	std	Y+27, r18	; 0x1b
    1bfe:	3c 8f       	std	Y+28, r19	; 0x1c
    1c00:	db 01       	movw	r26, r22
    1c02:	ca 01       	movw	r24, r20
    1c04:	8f 77       	andi	r24, 0x7F	; 127
    1c06:	90 70       	andi	r25, 0x00	; 0
    1c08:	a0 70       	andi	r26, 0x00	; 0
    1c0a:	b0 70       	andi	r27, 0x00	; 0
    1c0c:	80 34       	cpi	r24, 0x40	; 64
    1c0e:	91 05       	cpc	r25, r1
    1c10:	a1 05       	cpc	r26, r1
    1c12:	b1 05       	cpc	r27, r1
    1c14:	61 f4       	brne	.+24     	; 0x1c2e <__mulsf3+0x1ce>
    1c16:	47 fd       	sbrc	r20, 7
    1c18:	0a c0       	rjmp	.+20     	; 0x1c2e <__mulsf3+0x1ce>
    1c1a:	e1 14       	cp	r14, r1
    1c1c:	f1 04       	cpc	r15, r1
    1c1e:	01 05       	cpc	r16, r1
    1c20:	11 05       	cpc	r17, r1
    1c22:	29 f0       	breq	.+10     	; 0x1c2e <__mulsf3+0x1ce>
    1c24:	40 5c       	subi	r20, 0xC0	; 192
    1c26:	5f 4f       	sbci	r21, 0xFF	; 255
    1c28:	6f 4f       	sbci	r22, 0xFF	; 255
    1c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2c:	40 78       	andi	r20, 0x80	; 128
    1c2e:	1a 8e       	std	Y+26, r1	; 0x1a
    1c30:	fe 17       	cp	r31, r30
    1c32:	11 f0       	breq	.+4      	; 0x1c38 <__mulsf3+0x1d8>
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	8a 8f       	std	Y+26, r24	; 0x1a
    1c38:	4d 8f       	std	Y+29, r20	; 0x1d
    1c3a:	5e 8f       	std	Y+30, r21	; 0x1e
    1c3c:	6f 8f       	std	Y+31, r22	; 0x1f
    1c3e:	78 a3       	std	Y+32, r23	; 0x20
    1c40:	83 e0       	ldi	r24, 0x03	; 3
    1c42:	89 8f       	std	Y+25, r24	; 0x19
    1c44:	ce 01       	movw	r24, r28
    1c46:	49 96       	adiw	r24, 0x19	; 25
    1c48:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__pack_f>
    1c4c:	a0 96       	adiw	r28, 0x20	; 32
    1c4e:	e2 e1       	ldi	r30, 0x12	; 18
    1c50:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__epilogue_restores__>

00001c54 <__divsf3>:
    1c54:	a8 e1       	ldi	r26, 0x18	; 24
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e0 e3       	ldi	r30, 0x30	; 48
    1c5a:	fe e0       	ldi	r31, 0x0E	; 14
    1c5c:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__prologue_saves__+0x10>
    1c60:	69 83       	std	Y+1, r22	; 0x01
    1c62:	7a 83       	std	Y+2, r23	; 0x02
    1c64:	8b 83       	std	Y+3, r24	; 0x03
    1c66:	9c 83       	std	Y+4, r25	; 0x04
    1c68:	2d 83       	std	Y+5, r18	; 0x05
    1c6a:	3e 83       	std	Y+6, r19	; 0x06
    1c6c:	4f 83       	std	Y+7, r20	; 0x07
    1c6e:	58 87       	std	Y+8, r21	; 0x08
    1c70:	b9 e0       	ldi	r27, 0x09	; 9
    1c72:	eb 2e       	mov	r14, r27
    1c74:	f1 2c       	mov	r15, r1
    1c76:	ec 0e       	add	r14, r28
    1c78:	fd 1e       	adc	r15, r29
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	01 96       	adiw	r24, 0x01	; 1
    1c7e:	b7 01       	movw	r22, r14
    1c80:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    1c84:	8e 01       	movw	r16, r28
    1c86:	0f 5e       	subi	r16, 0xEF	; 239
    1c88:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	05 96       	adiw	r24, 0x05	; 5
    1c8e:	b8 01       	movw	r22, r16
    1c90:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    1c94:	29 85       	ldd	r18, Y+9	; 0x09
    1c96:	22 30       	cpi	r18, 0x02	; 2
    1c98:	08 f4       	brcc	.+2      	; 0x1c9c <__divsf3+0x48>
    1c9a:	7e c0       	rjmp	.+252    	; 0x1d98 <__divsf3+0x144>
    1c9c:	39 89       	ldd	r19, Y+17	; 0x11
    1c9e:	32 30       	cpi	r19, 0x02	; 2
    1ca0:	10 f4       	brcc	.+4      	; 0x1ca6 <__divsf3+0x52>
    1ca2:	b8 01       	movw	r22, r16
    1ca4:	7c c0       	rjmp	.+248    	; 0x1d9e <__divsf3+0x14a>
    1ca6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ca8:	9a 89       	ldd	r25, Y+18	; 0x12
    1caa:	89 27       	eor	r24, r25
    1cac:	8a 87       	std	Y+10, r24	; 0x0a
    1cae:	24 30       	cpi	r18, 0x04	; 4
    1cb0:	11 f0       	breq	.+4      	; 0x1cb6 <__divsf3+0x62>
    1cb2:	22 30       	cpi	r18, 0x02	; 2
    1cb4:	31 f4       	brne	.+12     	; 0x1cc2 <__divsf3+0x6e>
    1cb6:	23 17       	cp	r18, r19
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <__divsf3+0x68>
    1cba:	6e c0       	rjmp	.+220    	; 0x1d98 <__divsf3+0x144>
    1cbc:	63 e1       	ldi	r22, 0x13	; 19
    1cbe:	74 e0       	ldi	r23, 0x04	; 4
    1cc0:	6e c0       	rjmp	.+220    	; 0x1d9e <__divsf3+0x14a>
    1cc2:	34 30       	cpi	r19, 0x04	; 4
    1cc4:	39 f4       	brne	.+14     	; 0x1cd4 <__divsf3+0x80>
    1cc6:	1d 86       	std	Y+13, r1	; 0x0d
    1cc8:	1e 86       	std	Y+14, r1	; 0x0e
    1cca:	1f 86       	std	Y+15, r1	; 0x0f
    1ccc:	18 8a       	std	Y+16, r1	; 0x10
    1cce:	1c 86       	std	Y+12, r1	; 0x0c
    1cd0:	1b 86       	std	Y+11, r1	; 0x0b
    1cd2:	04 c0       	rjmp	.+8      	; 0x1cdc <__divsf3+0x88>
    1cd4:	32 30       	cpi	r19, 0x02	; 2
    1cd6:	21 f4       	brne	.+8      	; 0x1ce0 <__divsf3+0x8c>
    1cd8:	84 e0       	ldi	r24, 0x04	; 4
    1cda:	89 87       	std	Y+9, r24	; 0x09
    1cdc:	b7 01       	movw	r22, r14
    1cde:	5f c0       	rjmp	.+190    	; 0x1d9e <__divsf3+0x14a>
    1ce0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ce2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce8:	28 1b       	sub	r18, r24
    1cea:	39 0b       	sbc	r19, r25
    1cec:	3c 87       	std	Y+12, r19	; 0x0c
    1cee:	2b 87       	std	Y+11, r18	; 0x0b
    1cf0:	ed 84       	ldd	r14, Y+13	; 0x0d
    1cf2:	fe 84       	ldd	r15, Y+14	; 0x0e
    1cf4:	0f 85       	ldd	r16, Y+15	; 0x0f
    1cf6:	18 89       	ldd	r17, Y+16	; 0x10
    1cf8:	ad 88       	ldd	r10, Y+21	; 0x15
    1cfa:	be 88       	ldd	r11, Y+22	; 0x16
    1cfc:	cf 88       	ldd	r12, Y+23	; 0x17
    1cfe:	d8 8c       	ldd	r13, Y+24	; 0x18
    1d00:	ea 14       	cp	r14, r10
    1d02:	fb 04       	cpc	r15, r11
    1d04:	0c 05       	cpc	r16, r12
    1d06:	1d 05       	cpc	r17, r13
    1d08:	40 f4       	brcc	.+16     	; 0x1d1a <__divsf3+0xc6>
    1d0a:	ee 0c       	add	r14, r14
    1d0c:	ff 1c       	adc	r15, r15
    1d0e:	00 1f       	adc	r16, r16
    1d10:	11 1f       	adc	r17, r17
    1d12:	21 50       	subi	r18, 0x01	; 1
    1d14:	30 40       	sbci	r19, 0x00	; 0
    1d16:	3c 87       	std	Y+12, r19	; 0x0c
    1d18:	2b 87       	std	Y+11, r18	; 0x0b
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a0 e0       	ldi	r26, 0x00	; 0
    1d28:	b0 e4       	ldi	r27, 0x40	; 64
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	ea 14       	cp	r14, r10
    1d30:	fb 04       	cpc	r15, r11
    1d32:	0c 05       	cpc	r16, r12
    1d34:	1d 05       	cpc	r17, r13
    1d36:	40 f0       	brcs	.+16     	; 0x1d48 <__divsf3+0xf4>
    1d38:	28 2b       	or	r18, r24
    1d3a:	39 2b       	or	r19, r25
    1d3c:	4a 2b       	or	r20, r26
    1d3e:	5b 2b       	or	r21, r27
    1d40:	ea 18       	sub	r14, r10
    1d42:	fb 08       	sbc	r15, r11
    1d44:	0c 09       	sbc	r16, r12
    1d46:	1d 09       	sbc	r17, r13
    1d48:	b6 95       	lsr	r27
    1d4a:	a7 95       	ror	r26
    1d4c:	97 95       	ror	r25
    1d4e:	87 95       	ror	r24
    1d50:	ee 0c       	add	r14, r14
    1d52:	ff 1c       	adc	r15, r15
    1d54:	00 1f       	adc	r16, r16
    1d56:	11 1f       	adc	r17, r17
    1d58:	6f 5f       	subi	r22, 0xFF	; 255
    1d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5c:	6f 31       	cpi	r22, 0x1F	; 31
    1d5e:	71 05       	cpc	r23, r1
    1d60:	31 f7       	brne	.-52     	; 0x1d2e <__divsf3+0xda>
    1d62:	da 01       	movw	r26, r20
    1d64:	c9 01       	movw	r24, r18
    1d66:	8f 77       	andi	r24, 0x7F	; 127
    1d68:	90 70       	andi	r25, 0x00	; 0
    1d6a:	a0 70       	andi	r26, 0x00	; 0
    1d6c:	b0 70       	andi	r27, 0x00	; 0
    1d6e:	80 34       	cpi	r24, 0x40	; 64
    1d70:	91 05       	cpc	r25, r1
    1d72:	a1 05       	cpc	r26, r1
    1d74:	b1 05       	cpc	r27, r1
    1d76:	61 f4       	brne	.+24     	; 0x1d90 <__divsf3+0x13c>
    1d78:	27 fd       	sbrc	r18, 7
    1d7a:	0a c0       	rjmp	.+20     	; 0x1d90 <__divsf3+0x13c>
    1d7c:	e1 14       	cp	r14, r1
    1d7e:	f1 04       	cpc	r15, r1
    1d80:	01 05       	cpc	r16, r1
    1d82:	11 05       	cpc	r17, r1
    1d84:	29 f0       	breq	.+10     	; 0x1d90 <__divsf3+0x13c>
    1d86:	20 5c       	subi	r18, 0xC0	; 192
    1d88:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8a:	4f 4f       	sbci	r20, 0xFF	; 255
    1d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d8e:	20 78       	andi	r18, 0x80	; 128
    1d90:	2d 87       	std	Y+13, r18	; 0x0d
    1d92:	3e 87       	std	Y+14, r19	; 0x0e
    1d94:	4f 87       	std	Y+15, r20	; 0x0f
    1d96:	58 8b       	std	Y+16, r21	; 0x10
    1d98:	be 01       	movw	r22, r28
    1d9a:	67 5f       	subi	r22, 0xF7	; 247
    1d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9e:	cb 01       	movw	r24, r22
    1da0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__pack_f>
    1da4:	68 96       	adiw	r28, 0x18	; 24
    1da6:	ea e0       	ldi	r30, 0x0A	; 10
    1da8:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__epilogue_restores__+0x10>

00001dac <__gtsf2>:
    1dac:	a8 e1       	ldi	r26, 0x18	; 24
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	ec ed       	ldi	r30, 0xDC	; 220
    1db2:	fe e0       	ldi	r31, 0x0E	; 14
    1db4:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
    1db8:	69 83       	std	Y+1, r22	; 0x01
    1dba:	7a 83       	std	Y+2, r23	; 0x02
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
    1dbe:	9c 83       	std	Y+4, r25	; 0x04
    1dc0:	2d 83       	std	Y+5, r18	; 0x05
    1dc2:	3e 83       	std	Y+6, r19	; 0x06
    1dc4:	4f 83       	std	Y+7, r20	; 0x07
    1dc6:	58 87       	std	Y+8, r21	; 0x08
    1dc8:	89 e0       	ldi	r24, 0x09	; 9
    1dca:	e8 2e       	mov	r14, r24
    1dcc:	f1 2c       	mov	r15, r1
    1dce:	ec 0e       	add	r14, r28
    1dd0:	fd 1e       	adc	r15, r29
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	b7 01       	movw	r22, r14
    1dd8:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    1ddc:	8e 01       	movw	r16, r28
    1dde:	0f 5e       	subi	r16, 0xEF	; 239
    1de0:	1f 4f       	sbci	r17, 0xFF	; 255
    1de2:	ce 01       	movw	r24, r28
    1de4:	05 96       	adiw	r24, 0x05	; 5
    1de6:	b8 01       	movw	r22, r16
    1de8:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    1dec:	89 85       	ldd	r24, Y+9	; 0x09
    1dee:	82 30       	cpi	r24, 0x02	; 2
    1df0:	40 f0       	brcs	.+16     	; 0x1e02 <__gtsf2+0x56>
    1df2:	89 89       	ldd	r24, Y+17	; 0x11
    1df4:	82 30       	cpi	r24, 0x02	; 2
    1df6:	28 f0       	brcs	.+10     	; 0x1e02 <__gtsf2+0x56>
    1df8:	c7 01       	movw	r24, r14
    1dfa:	b8 01       	movw	r22, r16
    1dfc:	0e 94 2d 12 	call	0x245a	; 0x245a <__fpcmp_parts_f>
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <__gtsf2+0x58>
    1e02:	8f ef       	ldi	r24, 0xFF	; 255
    1e04:	68 96       	adiw	r28, 0x18	; 24
    1e06:	e6 e0       	ldi	r30, 0x06	; 6
    1e08:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

00001e0c <__gesf2>:
    1e0c:	a8 e1       	ldi	r26, 0x18	; 24
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	ec e0       	ldi	r30, 0x0C	; 12
    1e12:	ff e0       	ldi	r31, 0x0F	; 15
    1e14:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
    1e18:	69 83       	std	Y+1, r22	; 0x01
    1e1a:	7a 83       	std	Y+2, r23	; 0x02
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
    1e1e:	9c 83       	std	Y+4, r25	; 0x04
    1e20:	2d 83       	std	Y+5, r18	; 0x05
    1e22:	3e 83       	std	Y+6, r19	; 0x06
    1e24:	4f 83       	std	Y+7, r20	; 0x07
    1e26:	58 87       	std	Y+8, r21	; 0x08
    1e28:	89 e0       	ldi	r24, 0x09	; 9
    1e2a:	e8 2e       	mov	r14, r24
    1e2c:	f1 2c       	mov	r15, r1
    1e2e:	ec 0e       	add	r14, r28
    1e30:	fd 1e       	adc	r15, r29
    1e32:	ce 01       	movw	r24, r28
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	b7 01       	movw	r22, r14
    1e38:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    1e3c:	8e 01       	movw	r16, r28
    1e3e:	0f 5e       	subi	r16, 0xEF	; 239
    1e40:	1f 4f       	sbci	r17, 0xFF	; 255
    1e42:	ce 01       	movw	r24, r28
    1e44:	05 96       	adiw	r24, 0x05	; 5
    1e46:	b8 01       	movw	r22, r16
    1e48:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    1e4c:	89 85       	ldd	r24, Y+9	; 0x09
    1e4e:	82 30       	cpi	r24, 0x02	; 2
    1e50:	40 f0       	brcs	.+16     	; 0x1e62 <__gesf2+0x56>
    1e52:	89 89       	ldd	r24, Y+17	; 0x11
    1e54:	82 30       	cpi	r24, 0x02	; 2
    1e56:	28 f0       	brcs	.+10     	; 0x1e62 <__gesf2+0x56>
    1e58:	c7 01       	movw	r24, r14
    1e5a:	b8 01       	movw	r22, r16
    1e5c:	0e 94 2d 12 	call	0x245a	; 0x245a <__fpcmp_parts_f>
    1e60:	01 c0       	rjmp	.+2      	; 0x1e64 <__gesf2+0x58>
    1e62:	8f ef       	ldi	r24, 0xFF	; 255
    1e64:	68 96       	adiw	r28, 0x18	; 24
    1e66:	e6 e0       	ldi	r30, 0x06	; 6
    1e68:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

00001e6c <__ltsf2>:
    1e6c:	a8 e1       	ldi	r26, 0x18	; 24
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	ec e3       	ldi	r30, 0x3C	; 60
    1e72:	ff e0       	ldi	r31, 0x0F	; 15
    1e74:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
    1e78:	69 83       	std	Y+1, r22	; 0x01
    1e7a:	7a 83       	std	Y+2, r23	; 0x02
    1e7c:	8b 83       	std	Y+3, r24	; 0x03
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	2d 83       	std	Y+5, r18	; 0x05
    1e82:	3e 83       	std	Y+6, r19	; 0x06
    1e84:	4f 83       	std	Y+7, r20	; 0x07
    1e86:	58 87       	std	Y+8, r21	; 0x08
    1e88:	89 e0       	ldi	r24, 0x09	; 9
    1e8a:	e8 2e       	mov	r14, r24
    1e8c:	f1 2c       	mov	r15, r1
    1e8e:	ec 0e       	add	r14, r28
    1e90:	fd 1e       	adc	r15, r29
    1e92:	ce 01       	movw	r24, r28
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	b7 01       	movw	r22, r14
    1e98:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    1e9c:	8e 01       	movw	r16, r28
    1e9e:	0f 5e       	subi	r16, 0xEF	; 239
    1ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	05 96       	adiw	r24, 0x05	; 5
    1ea6:	b8 01       	movw	r22, r16
    1ea8:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    1eac:	89 85       	ldd	r24, Y+9	; 0x09
    1eae:	82 30       	cpi	r24, 0x02	; 2
    1eb0:	40 f0       	brcs	.+16     	; 0x1ec2 <__ltsf2+0x56>
    1eb2:	89 89       	ldd	r24, Y+17	; 0x11
    1eb4:	82 30       	cpi	r24, 0x02	; 2
    1eb6:	28 f0       	brcs	.+10     	; 0x1ec2 <__ltsf2+0x56>
    1eb8:	c7 01       	movw	r24, r14
    1eba:	b8 01       	movw	r22, r16
    1ebc:	0e 94 2d 12 	call	0x245a	; 0x245a <__fpcmp_parts_f>
    1ec0:	01 c0       	rjmp	.+2      	; 0x1ec4 <__ltsf2+0x58>
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	68 96       	adiw	r28, 0x18	; 24
    1ec6:	e6 e0       	ldi	r30, 0x06	; 6
    1ec8:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

00001ecc <__floatsisf>:
    1ecc:	a8 e0       	ldi	r26, 0x08	; 8
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	ec e6       	ldi	r30, 0x6C	; 108
    1ed2:	ff e0       	ldi	r31, 0x0F	; 15
    1ed4:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__prologue_saves__+0x12>
    1ed8:	9b 01       	movw	r18, r22
    1eda:	ac 01       	movw	r20, r24
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	da 01       	movw	r26, r20
    1ee2:	c9 01       	movw	r24, r18
    1ee4:	88 27       	eor	r24, r24
    1ee6:	b7 fd       	sbrc	r27, 7
    1ee8:	83 95       	inc	r24
    1eea:	99 27       	eor	r25, r25
    1eec:	aa 27       	eor	r26, r26
    1eee:	bb 27       	eor	r27, r27
    1ef0:	b8 2e       	mov	r11, r24
    1ef2:	21 15       	cp	r18, r1
    1ef4:	31 05       	cpc	r19, r1
    1ef6:	41 05       	cpc	r20, r1
    1ef8:	51 05       	cpc	r21, r1
    1efa:	19 f4       	brne	.+6      	; 0x1f02 <__floatsisf+0x36>
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	3a c0       	rjmp	.+116    	; 0x1f76 <__floatsisf+0xaa>
    1f02:	88 23       	and	r24, r24
    1f04:	a9 f0       	breq	.+42     	; 0x1f30 <__floatsisf+0x64>
    1f06:	20 30       	cpi	r18, 0x00	; 0
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	38 07       	cpc	r19, r24
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	48 07       	cpc	r20, r24
    1f10:	80 e8       	ldi	r24, 0x80	; 128
    1f12:	58 07       	cpc	r21, r24
    1f14:	29 f4       	brne	.+10     	; 0x1f20 <__floatsisf+0x54>
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	9f ec       	ldi	r25, 0xCF	; 207
    1f1e:	30 c0       	rjmp	.+96     	; 0x1f80 <__floatsisf+0xb4>
    1f20:	ee 24       	eor	r14, r14
    1f22:	ff 24       	eor	r15, r15
    1f24:	87 01       	movw	r16, r14
    1f26:	e2 1a       	sub	r14, r18
    1f28:	f3 0a       	sbc	r15, r19
    1f2a:	04 0b       	sbc	r16, r20
    1f2c:	15 0b       	sbc	r17, r21
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <__floatsisf+0x68>
    1f30:	79 01       	movw	r14, r18
    1f32:	8a 01       	movw	r16, r20
    1f34:	8e e1       	ldi	r24, 0x1E	; 30
    1f36:	c8 2e       	mov	r12, r24
    1f38:	d1 2c       	mov	r13, r1
    1f3a:	dc 82       	std	Y+4, r13	; 0x04
    1f3c:	cb 82       	std	Y+3, r12	; 0x03
    1f3e:	ed 82       	std	Y+5, r14	; 0x05
    1f40:	fe 82       	std	Y+6, r15	; 0x06
    1f42:	0f 83       	std	Y+7, r16	; 0x07
    1f44:	18 87       	std	Y+8, r17	; 0x08
    1f46:	c8 01       	movw	r24, r16
    1f48:	b7 01       	movw	r22, r14
    1f4a:	0e 94 91 10 	call	0x2122	; 0x2122 <__clzsi2>
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	18 16       	cp	r1, r24
    1f52:	19 06       	cpc	r1, r25
    1f54:	84 f4       	brge	.+32     	; 0x1f76 <__floatsisf+0xaa>
    1f56:	08 2e       	mov	r0, r24
    1f58:	04 c0       	rjmp	.+8      	; 0x1f62 <__floatsisf+0x96>
    1f5a:	ee 0c       	add	r14, r14
    1f5c:	ff 1c       	adc	r15, r15
    1f5e:	00 1f       	adc	r16, r16
    1f60:	11 1f       	adc	r17, r17
    1f62:	0a 94       	dec	r0
    1f64:	d2 f7       	brpl	.-12     	; 0x1f5a <__floatsisf+0x8e>
    1f66:	ed 82       	std	Y+5, r14	; 0x05
    1f68:	fe 82       	std	Y+6, r15	; 0x06
    1f6a:	0f 83       	std	Y+7, r16	; 0x07
    1f6c:	18 87       	std	Y+8, r17	; 0x08
    1f6e:	c8 1a       	sub	r12, r24
    1f70:	d9 0a       	sbc	r13, r25
    1f72:	dc 82       	std	Y+4, r13	; 0x04
    1f74:	cb 82       	std	Y+3, r12	; 0x03
    1f76:	ba 82       	std	Y+2, r11	; 0x02
    1f78:	ce 01       	movw	r24, r28
    1f7a:	01 96       	adiw	r24, 0x01	; 1
    1f7c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__pack_f>
    1f80:	28 96       	adiw	r28, 0x08	; 8
    1f82:	e9 e0       	ldi	r30, 0x09	; 9
    1f84:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__epilogue_restores__+0x12>

00001f88 <__fixsfsi>:
    1f88:	ac e0       	ldi	r26, 0x0C	; 12
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	ea ec       	ldi	r30, 0xCA	; 202
    1f8e:	ff e0       	ldi	r31, 0x0F	; 15
    1f90:	0c 94 bd 12 	jmp	0x257a	; 0x257a <__prologue_saves__+0x20>
    1f94:	69 83       	std	Y+1, r22	; 0x01
    1f96:	7a 83       	std	Y+2, r23	; 0x02
    1f98:	8b 83       	std	Y+3, r24	; 0x03
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	be 01       	movw	r22, r28
    1fa2:	6b 5f       	subi	r22, 0xFB	; 251
    1fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa6:	0e 94 b5 11 	call	0x236a	; 0x236a <__unpack_f>
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	82 30       	cpi	r24, 0x02	; 2
    1fae:	61 f1       	breq	.+88     	; 0x2008 <__fixsfsi+0x80>
    1fb0:	82 30       	cpi	r24, 0x02	; 2
    1fb2:	50 f1       	brcs	.+84     	; 0x2008 <__fixsfsi+0x80>
    1fb4:	84 30       	cpi	r24, 0x04	; 4
    1fb6:	21 f4       	brne	.+8      	; 0x1fc0 <__fixsfsi+0x38>
    1fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fba:	88 23       	and	r24, r24
    1fbc:	51 f1       	breq	.+84     	; 0x2012 <__fixsfsi+0x8a>
    1fbe:	2e c0       	rjmp	.+92     	; 0x201c <__fixsfsi+0x94>
    1fc0:	2f 81       	ldd	r18, Y+7	; 0x07
    1fc2:	38 85       	ldd	r19, Y+8	; 0x08
    1fc4:	37 fd       	sbrc	r19, 7
    1fc6:	20 c0       	rjmp	.+64     	; 0x2008 <__fixsfsi+0x80>
    1fc8:	6e 81       	ldd	r22, Y+6	; 0x06
    1fca:	2f 31       	cpi	r18, 0x1F	; 31
    1fcc:	31 05       	cpc	r19, r1
    1fce:	1c f0       	brlt	.+6      	; 0x1fd6 <__fixsfsi+0x4e>
    1fd0:	66 23       	and	r22, r22
    1fd2:	f9 f0       	breq	.+62     	; 0x2012 <__fixsfsi+0x8a>
    1fd4:	23 c0       	rjmp	.+70     	; 0x201c <__fixsfsi+0x94>
    1fd6:	8e e1       	ldi	r24, 0x1E	; 30
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	82 1b       	sub	r24, r18
    1fdc:	93 0b       	sbc	r25, r19
    1fde:	29 85       	ldd	r18, Y+9	; 0x09
    1fe0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fe2:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fe4:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fe6:	04 c0       	rjmp	.+8      	; 0x1ff0 <__fixsfsi+0x68>
    1fe8:	56 95       	lsr	r21
    1fea:	47 95       	ror	r20
    1fec:	37 95       	ror	r19
    1fee:	27 95       	ror	r18
    1ff0:	8a 95       	dec	r24
    1ff2:	d2 f7       	brpl	.-12     	; 0x1fe8 <__fixsfsi+0x60>
    1ff4:	66 23       	and	r22, r22
    1ff6:	b1 f0       	breq	.+44     	; 0x2024 <__fixsfsi+0x9c>
    1ff8:	50 95       	com	r21
    1ffa:	40 95       	com	r20
    1ffc:	30 95       	com	r19
    1ffe:	21 95       	neg	r18
    2000:	3f 4f       	sbci	r19, 0xFF	; 255
    2002:	4f 4f       	sbci	r20, 0xFF	; 255
    2004:	5f 4f       	sbci	r21, 0xFF	; 255
    2006:	0e c0       	rjmp	.+28     	; 0x2024 <__fixsfsi+0x9c>
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	09 c0       	rjmp	.+18     	; 0x2024 <__fixsfsi+0x9c>
    2012:	2f ef       	ldi	r18, 0xFF	; 255
    2014:	3f ef       	ldi	r19, 0xFF	; 255
    2016:	4f ef       	ldi	r20, 0xFF	; 255
    2018:	5f e7       	ldi	r21, 0x7F	; 127
    201a:	04 c0       	rjmp	.+8      	; 0x2024 <__fixsfsi+0x9c>
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	50 e8       	ldi	r21, 0x80	; 128
    2024:	b9 01       	movw	r22, r18
    2026:	ca 01       	movw	r24, r20
    2028:	2c 96       	adiw	r28, 0x0c	; 12
    202a:	e2 e0       	ldi	r30, 0x02	; 2
    202c:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <__epilogue_restores__+0x20>

00002030 <__floatunsisf>:
    2030:	a8 e0       	ldi	r26, 0x08	; 8
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	ee e1       	ldi	r30, 0x1E	; 30
    2036:	f0 e1       	ldi	r31, 0x10	; 16
    2038:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__prologue_saves__+0x10>
    203c:	7b 01       	movw	r14, r22
    203e:	8c 01       	movw	r16, r24
    2040:	61 15       	cp	r22, r1
    2042:	71 05       	cpc	r23, r1
    2044:	81 05       	cpc	r24, r1
    2046:	91 05       	cpc	r25, r1
    2048:	19 f4       	brne	.+6      	; 0x2050 <__floatunsisf+0x20>
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	60 c0       	rjmp	.+192    	; 0x2110 <__floatunsisf+0xe0>
    2050:	83 e0       	ldi	r24, 0x03	; 3
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	8e e1       	ldi	r24, 0x1E	; 30
    2056:	c8 2e       	mov	r12, r24
    2058:	d1 2c       	mov	r13, r1
    205a:	dc 82       	std	Y+4, r13	; 0x04
    205c:	cb 82       	std	Y+3, r12	; 0x03
    205e:	ed 82       	std	Y+5, r14	; 0x05
    2060:	fe 82       	std	Y+6, r15	; 0x06
    2062:	0f 83       	std	Y+7, r16	; 0x07
    2064:	18 87       	std	Y+8, r17	; 0x08
    2066:	c8 01       	movw	r24, r16
    2068:	b7 01       	movw	r22, r14
    206a:	0e 94 91 10 	call	0x2122	; 0x2122 <__clzsi2>
    206e:	fc 01       	movw	r30, r24
    2070:	31 97       	sbiw	r30, 0x01	; 1
    2072:	f7 ff       	sbrs	r31, 7
    2074:	3b c0       	rjmp	.+118    	; 0x20ec <__floatunsisf+0xbc>
    2076:	22 27       	eor	r18, r18
    2078:	33 27       	eor	r19, r19
    207a:	2e 1b       	sub	r18, r30
    207c:	3f 0b       	sbc	r19, r31
    207e:	57 01       	movw	r10, r14
    2080:	68 01       	movw	r12, r16
    2082:	02 2e       	mov	r0, r18
    2084:	04 c0       	rjmp	.+8      	; 0x208e <__floatunsisf+0x5e>
    2086:	d6 94       	lsr	r13
    2088:	c7 94       	ror	r12
    208a:	b7 94       	ror	r11
    208c:	a7 94       	ror	r10
    208e:	0a 94       	dec	r0
    2090:	d2 f7       	brpl	.-12     	; 0x2086 <__floatunsisf+0x56>
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	50 e0       	ldi	r21, 0x00	; 0
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e0       	ldi	r26, 0x00	; 0
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	04 c0       	rjmp	.+8      	; 0x20ac <__floatunsisf+0x7c>
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	aa 1f       	adc	r26, r26
    20aa:	bb 1f       	adc	r27, r27
    20ac:	2a 95       	dec	r18
    20ae:	d2 f7       	brpl	.-12     	; 0x20a4 <__floatunsisf+0x74>
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	a1 09       	sbc	r26, r1
    20b4:	b1 09       	sbc	r27, r1
    20b6:	8e 21       	and	r24, r14
    20b8:	9f 21       	and	r25, r15
    20ba:	a0 23       	and	r26, r16
    20bc:	b1 23       	and	r27, r17
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	a1 05       	cpc	r26, r1
    20c2:	b1 05       	cpc	r27, r1
    20c4:	21 f0       	breq	.+8      	; 0x20ce <__floatunsisf+0x9e>
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	4a 29       	or	r20, r10
    20d0:	5b 29       	or	r21, r11
    20d2:	6c 29       	or	r22, r12
    20d4:	7d 29       	or	r23, r13
    20d6:	4d 83       	std	Y+5, r20	; 0x05
    20d8:	5e 83       	std	Y+6, r21	; 0x06
    20da:	6f 83       	std	Y+7, r22	; 0x07
    20dc:	78 87       	std	Y+8, r23	; 0x08
    20de:	8e e1       	ldi	r24, 0x1E	; 30
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	8e 1b       	sub	r24, r30
    20e4:	9f 0b       	sbc	r25, r31
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	8b 83       	std	Y+3, r24	; 0x03
    20ea:	12 c0       	rjmp	.+36     	; 0x2110 <__floatunsisf+0xe0>
    20ec:	30 97       	sbiw	r30, 0x00	; 0
    20ee:	81 f0       	breq	.+32     	; 0x2110 <__floatunsisf+0xe0>
    20f0:	0e 2e       	mov	r0, r30
    20f2:	04 c0       	rjmp	.+8      	; 0x20fc <__floatunsisf+0xcc>
    20f4:	ee 0c       	add	r14, r14
    20f6:	ff 1c       	adc	r15, r15
    20f8:	00 1f       	adc	r16, r16
    20fa:	11 1f       	adc	r17, r17
    20fc:	0a 94       	dec	r0
    20fe:	d2 f7       	brpl	.-12     	; 0x20f4 <__floatunsisf+0xc4>
    2100:	ed 82       	std	Y+5, r14	; 0x05
    2102:	fe 82       	std	Y+6, r15	; 0x06
    2104:	0f 83       	std	Y+7, r16	; 0x07
    2106:	18 87       	std	Y+8, r17	; 0x08
    2108:	ce 1a       	sub	r12, r30
    210a:	df 0a       	sbc	r13, r31
    210c:	dc 82       	std	Y+4, r13	; 0x04
    210e:	cb 82       	std	Y+3, r12	; 0x03
    2110:	1a 82       	std	Y+2, r1	; 0x02
    2112:	ce 01       	movw	r24, r28
    2114:	01 96       	adiw	r24, 0x01	; 1
    2116:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__pack_f>
    211a:	28 96       	adiw	r28, 0x08	; 8
    211c:	ea e0       	ldi	r30, 0x0A	; 10
    211e:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__epilogue_restores__+0x10>

00002122 <__clzsi2>:
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	7b 01       	movw	r14, r22
    212c:	8c 01       	movw	r16, r24
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	e8 16       	cp	r14, r24
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	f8 06       	cpc	r15, r24
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	08 07       	cpc	r16, r24
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	18 07       	cpc	r17, r24
    213e:	88 f4       	brcc	.+34     	; 0x2162 <__clzsi2+0x40>
    2140:	8f ef       	ldi	r24, 0xFF	; 255
    2142:	e8 16       	cp	r14, r24
    2144:	f1 04       	cpc	r15, r1
    2146:	01 05       	cpc	r16, r1
    2148:	11 05       	cpc	r17, r1
    214a:	31 f0       	breq	.+12     	; 0x2158 <__clzsi2+0x36>
    214c:	28 f0       	brcs	.+10     	; 0x2158 <__clzsi2+0x36>
    214e:	88 e0       	ldi	r24, 0x08	; 8
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	a0 e0       	ldi	r26, 0x00	; 0
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	17 c0       	rjmp	.+46     	; 0x2186 <__clzsi2+0x64>
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	a0 e0       	ldi	r26, 0x00	; 0
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	12 c0       	rjmp	.+36     	; 0x2186 <__clzsi2+0x64>
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	e8 16       	cp	r14, r24
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	f8 06       	cpc	r15, r24
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	08 07       	cpc	r16, r24
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	18 07       	cpc	r17, r24
    2172:	28 f0       	brcs	.+10     	; 0x217e <__clzsi2+0x5c>
    2174:	88 e1       	ldi	r24, 0x18	; 24
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	a0 e0       	ldi	r26, 0x00	; 0
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	04 c0       	rjmp	.+8      	; 0x2186 <__clzsi2+0x64>
    217e:	80 e1       	ldi	r24, 0x10	; 16
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	a0 e0       	ldi	r26, 0x00	; 0
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	20 e2       	ldi	r18, 0x20	; 32
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	28 1b       	sub	r18, r24
    2190:	39 0b       	sbc	r19, r25
    2192:	4a 0b       	sbc	r20, r26
    2194:	5b 0b       	sbc	r21, r27
    2196:	04 c0       	rjmp	.+8      	; 0x21a0 <__clzsi2+0x7e>
    2198:	16 95       	lsr	r17
    219a:	07 95       	ror	r16
    219c:	f7 94       	ror	r15
    219e:	e7 94       	ror	r14
    21a0:	8a 95       	dec	r24
    21a2:	d2 f7       	brpl	.-12     	; 0x2198 <__clzsi2+0x76>
    21a4:	f7 01       	movw	r30, r14
    21a6:	e5 5e       	subi	r30, 0xE5	; 229
    21a8:	fb 4f       	sbci	r31, 0xFB	; 251
    21aa:	80 81       	ld	r24, Z
    21ac:	28 1b       	sub	r18, r24
    21ae:	31 09       	sbc	r19, r1
    21b0:	41 09       	sbc	r20, r1
    21b2:	51 09       	sbc	r21, r1
    21b4:	c9 01       	movw	r24, r18
    21b6:	1f 91       	pop	r17
    21b8:	0f 91       	pop	r16
    21ba:	ff 90       	pop	r15
    21bc:	ef 90       	pop	r14
    21be:	08 95       	ret

000021c0 <__pack_f>:
    21c0:	df 92       	push	r13
    21c2:	ef 92       	push	r14
    21c4:	ff 92       	push	r15
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	fc 01       	movw	r30, r24
    21cc:	e4 80       	ldd	r14, Z+4	; 0x04
    21ce:	f5 80       	ldd	r15, Z+5	; 0x05
    21d0:	06 81       	ldd	r16, Z+6	; 0x06
    21d2:	17 81       	ldd	r17, Z+7	; 0x07
    21d4:	d1 80       	ldd	r13, Z+1	; 0x01
    21d6:	80 81       	ld	r24, Z
    21d8:	82 30       	cpi	r24, 0x02	; 2
    21da:	48 f4       	brcc	.+18     	; 0x21ee <__pack_f+0x2e>
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	a0 e1       	ldi	r26, 0x10	; 16
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e8 2a       	or	r14, r24
    21e6:	f9 2a       	or	r15, r25
    21e8:	0a 2b       	or	r16, r26
    21ea:	1b 2b       	or	r17, r27
    21ec:	a5 c0       	rjmp	.+330    	; 0x2338 <__stack+0x139>
    21ee:	84 30       	cpi	r24, 0x04	; 4
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <__pack_f+0x34>
    21f2:	9f c0       	rjmp	.+318    	; 0x2332 <__stack+0x133>
    21f4:	82 30       	cpi	r24, 0x02	; 2
    21f6:	21 f4       	brne	.+8      	; 0x2200 <__stack+0x1>
    21f8:	ee 24       	eor	r14, r14
    21fa:	ff 24       	eor	r15, r15
    21fc:	87 01       	movw	r16, r14
    21fe:	05 c0       	rjmp	.+10     	; 0x220a <__stack+0xb>
    2200:	e1 14       	cp	r14, r1
    2202:	f1 04       	cpc	r15, r1
    2204:	01 05       	cpc	r16, r1
    2206:	11 05       	cpc	r17, r1
    2208:	19 f4       	brne	.+6      	; 0x2210 <__stack+0x11>
    220a:	e0 e0       	ldi	r30, 0x00	; 0
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	96 c0       	rjmp	.+300    	; 0x233c <__stack+0x13d>
    2210:	62 81       	ldd	r22, Z+2	; 0x02
    2212:	73 81       	ldd	r23, Z+3	; 0x03
    2214:	9f ef       	ldi	r25, 0xFF	; 255
    2216:	62 38       	cpi	r22, 0x82	; 130
    2218:	79 07       	cpc	r23, r25
    221a:	0c f0       	brlt	.+2      	; 0x221e <__stack+0x1f>
    221c:	5b c0       	rjmp	.+182    	; 0x22d4 <__stack+0xd5>
    221e:	22 e8       	ldi	r18, 0x82	; 130
    2220:	3f ef       	ldi	r19, 0xFF	; 255
    2222:	26 1b       	sub	r18, r22
    2224:	37 0b       	sbc	r19, r23
    2226:	2a 31       	cpi	r18, 0x1A	; 26
    2228:	31 05       	cpc	r19, r1
    222a:	2c f0       	brlt	.+10     	; 0x2236 <__stack+0x37>
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	2a c0       	rjmp	.+84     	; 0x228a <__stack+0x8b>
    2236:	b8 01       	movw	r22, r16
    2238:	a7 01       	movw	r20, r14
    223a:	02 2e       	mov	r0, r18
    223c:	04 c0       	rjmp	.+8      	; 0x2246 <__stack+0x47>
    223e:	76 95       	lsr	r23
    2240:	67 95       	ror	r22
    2242:	57 95       	ror	r21
    2244:	47 95       	ror	r20
    2246:	0a 94       	dec	r0
    2248:	d2 f7       	brpl	.-12     	; 0x223e <__stack+0x3f>
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	a0 e0       	ldi	r26, 0x00	; 0
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	04 c0       	rjmp	.+8      	; 0x225c <__stack+0x5d>
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	aa 1f       	adc	r26, r26
    225a:	bb 1f       	adc	r27, r27
    225c:	2a 95       	dec	r18
    225e:	d2 f7       	brpl	.-12     	; 0x2254 <__stack+0x55>
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	a1 09       	sbc	r26, r1
    2264:	b1 09       	sbc	r27, r1
    2266:	8e 21       	and	r24, r14
    2268:	9f 21       	and	r25, r15
    226a:	a0 23       	and	r26, r16
    226c:	b1 23       	and	r27, r17
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	a1 05       	cpc	r26, r1
    2272:	b1 05       	cpc	r27, r1
    2274:	21 f0       	breq	.+8      	; 0x227e <__stack+0x7f>
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a0 e0       	ldi	r26, 0x00	; 0
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	9a 01       	movw	r18, r20
    2280:	ab 01       	movw	r20, r22
    2282:	28 2b       	or	r18, r24
    2284:	39 2b       	or	r19, r25
    2286:	4a 2b       	or	r20, r26
    2288:	5b 2b       	or	r21, r27
    228a:	da 01       	movw	r26, r20
    228c:	c9 01       	movw	r24, r18
    228e:	8f 77       	andi	r24, 0x7F	; 127
    2290:	90 70       	andi	r25, 0x00	; 0
    2292:	a0 70       	andi	r26, 0x00	; 0
    2294:	b0 70       	andi	r27, 0x00	; 0
    2296:	80 34       	cpi	r24, 0x40	; 64
    2298:	91 05       	cpc	r25, r1
    229a:	a1 05       	cpc	r26, r1
    229c:	b1 05       	cpc	r27, r1
    229e:	39 f4       	brne	.+14     	; 0x22ae <__stack+0xaf>
    22a0:	27 ff       	sbrs	r18, 7
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <__stack+0xb7>
    22a4:	20 5c       	subi	r18, 0xC0	; 192
    22a6:	3f 4f       	sbci	r19, 0xFF	; 255
    22a8:	4f 4f       	sbci	r20, 0xFF	; 255
    22aa:	5f 4f       	sbci	r21, 0xFF	; 255
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <__stack+0xb7>
    22ae:	21 5c       	subi	r18, 0xC1	; 193
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	4f 4f       	sbci	r20, 0xFF	; 255
    22b4:	5f 4f       	sbci	r21, 0xFF	; 255
    22b6:	e0 e0       	ldi	r30, 0x00	; 0
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	20 30       	cpi	r18, 0x00	; 0
    22bc:	a0 e0       	ldi	r26, 0x00	; 0
    22be:	3a 07       	cpc	r19, r26
    22c0:	a0 e0       	ldi	r26, 0x00	; 0
    22c2:	4a 07       	cpc	r20, r26
    22c4:	a0 e4       	ldi	r26, 0x40	; 64
    22c6:	5a 07       	cpc	r21, r26
    22c8:	10 f0       	brcs	.+4      	; 0x22ce <__stack+0xcf>
    22ca:	e1 e0       	ldi	r30, 0x01	; 1
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	79 01       	movw	r14, r18
    22d0:	8a 01       	movw	r16, r20
    22d2:	27 c0       	rjmp	.+78     	; 0x2322 <__stack+0x123>
    22d4:	60 38       	cpi	r22, 0x80	; 128
    22d6:	71 05       	cpc	r23, r1
    22d8:	64 f5       	brge	.+88     	; 0x2332 <__stack+0x133>
    22da:	fb 01       	movw	r30, r22
    22dc:	e1 58       	subi	r30, 0x81	; 129
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	d8 01       	movw	r26, r16
    22e2:	c7 01       	movw	r24, r14
    22e4:	8f 77       	andi	r24, 0x7F	; 127
    22e6:	90 70       	andi	r25, 0x00	; 0
    22e8:	a0 70       	andi	r26, 0x00	; 0
    22ea:	b0 70       	andi	r27, 0x00	; 0
    22ec:	80 34       	cpi	r24, 0x40	; 64
    22ee:	91 05       	cpc	r25, r1
    22f0:	a1 05       	cpc	r26, r1
    22f2:	b1 05       	cpc	r27, r1
    22f4:	39 f4       	brne	.+14     	; 0x2304 <__stack+0x105>
    22f6:	e7 fe       	sbrs	r14, 7
    22f8:	0d c0       	rjmp	.+26     	; 0x2314 <__stack+0x115>
    22fa:	80 e4       	ldi	r24, 0x40	; 64
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a0 e0       	ldi	r26, 0x00	; 0
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	04 c0       	rjmp	.+8      	; 0x230c <__stack+0x10d>
    2304:	8f e3       	ldi	r24, 0x3F	; 63
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	a0 e0       	ldi	r26, 0x00	; 0
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e8 0e       	add	r14, r24
    230e:	f9 1e       	adc	r15, r25
    2310:	0a 1f       	adc	r16, r26
    2312:	1b 1f       	adc	r17, r27
    2314:	17 ff       	sbrs	r17, 7
    2316:	05 c0       	rjmp	.+10     	; 0x2322 <__stack+0x123>
    2318:	16 95       	lsr	r17
    231a:	07 95       	ror	r16
    231c:	f7 94       	ror	r15
    231e:	e7 94       	ror	r14
    2320:	31 96       	adiw	r30, 0x01	; 1
    2322:	87 e0       	ldi	r24, 0x07	; 7
    2324:	16 95       	lsr	r17
    2326:	07 95       	ror	r16
    2328:	f7 94       	ror	r15
    232a:	e7 94       	ror	r14
    232c:	8a 95       	dec	r24
    232e:	d1 f7       	brne	.-12     	; 0x2324 <__stack+0x125>
    2330:	05 c0       	rjmp	.+10     	; 0x233c <__stack+0x13d>
    2332:	ee 24       	eor	r14, r14
    2334:	ff 24       	eor	r15, r15
    2336:	87 01       	movw	r16, r14
    2338:	ef ef       	ldi	r30, 0xFF	; 255
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	6e 2f       	mov	r22, r30
    233e:	67 95       	ror	r22
    2340:	66 27       	eor	r22, r22
    2342:	67 95       	ror	r22
    2344:	90 2f       	mov	r25, r16
    2346:	9f 77       	andi	r25, 0x7F	; 127
    2348:	d7 94       	ror	r13
    234a:	dd 24       	eor	r13, r13
    234c:	d7 94       	ror	r13
    234e:	8e 2f       	mov	r24, r30
    2350:	86 95       	lsr	r24
    2352:	49 2f       	mov	r20, r25
    2354:	46 2b       	or	r20, r22
    2356:	58 2f       	mov	r21, r24
    2358:	5d 29       	or	r21, r13
    235a:	b7 01       	movw	r22, r14
    235c:	ca 01       	movw	r24, r20
    235e:	1f 91       	pop	r17
    2360:	0f 91       	pop	r16
    2362:	ff 90       	pop	r15
    2364:	ef 90       	pop	r14
    2366:	df 90       	pop	r13
    2368:	08 95       	ret

0000236a <__unpack_f>:
    236a:	fc 01       	movw	r30, r24
    236c:	db 01       	movw	r26, r22
    236e:	40 81       	ld	r20, Z
    2370:	51 81       	ldd	r21, Z+1	; 0x01
    2372:	22 81       	ldd	r18, Z+2	; 0x02
    2374:	62 2f       	mov	r22, r18
    2376:	6f 77       	andi	r22, 0x7F	; 127
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	22 1f       	adc	r18, r18
    237c:	22 27       	eor	r18, r18
    237e:	22 1f       	adc	r18, r18
    2380:	93 81       	ldd	r25, Z+3	; 0x03
    2382:	89 2f       	mov	r24, r25
    2384:	88 0f       	add	r24, r24
    2386:	82 2b       	or	r24, r18
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	99 1f       	adc	r25, r25
    238e:	99 27       	eor	r25, r25
    2390:	99 1f       	adc	r25, r25
    2392:	11 96       	adiw	r26, 0x01	; 1
    2394:	9c 93       	st	X, r25
    2396:	11 97       	sbiw	r26, 0x01	; 1
    2398:	21 15       	cp	r18, r1
    239a:	31 05       	cpc	r19, r1
    239c:	a9 f5       	brne	.+106    	; 0x2408 <__unpack_f+0x9e>
    239e:	41 15       	cp	r20, r1
    23a0:	51 05       	cpc	r21, r1
    23a2:	61 05       	cpc	r22, r1
    23a4:	71 05       	cpc	r23, r1
    23a6:	11 f4       	brne	.+4      	; 0x23ac <__unpack_f+0x42>
    23a8:	82 e0       	ldi	r24, 0x02	; 2
    23aa:	37 c0       	rjmp	.+110    	; 0x241a <__unpack_f+0xb0>
    23ac:	82 e8       	ldi	r24, 0x82	; 130
    23ae:	9f ef       	ldi	r25, 0xFF	; 255
    23b0:	13 96       	adiw	r26, 0x03	; 3
    23b2:	9c 93       	st	X, r25
    23b4:	8e 93       	st	-X, r24
    23b6:	12 97       	sbiw	r26, 0x02	; 2
    23b8:	9a 01       	movw	r18, r20
    23ba:	ab 01       	movw	r20, r22
    23bc:	67 e0       	ldi	r22, 0x07	; 7
    23be:	22 0f       	add	r18, r18
    23c0:	33 1f       	adc	r19, r19
    23c2:	44 1f       	adc	r20, r20
    23c4:	55 1f       	adc	r21, r21
    23c6:	6a 95       	dec	r22
    23c8:	d1 f7       	brne	.-12     	; 0x23be <__unpack_f+0x54>
    23ca:	83 e0       	ldi	r24, 0x03	; 3
    23cc:	8c 93       	st	X, r24
    23ce:	0d c0       	rjmp	.+26     	; 0x23ea <__unpack_f+0x80>
    23d0:	22 0f       	add	r18, r18
    23d2:	33 1f       	adc	r19, r19
    23d4:	44 1f       	adc	r20, r20
    23d6:	55 1f       	adc	r21, r21
    23d8:	12 96       	adiw	r26, 0x02	; 2
    23da:	8d 91       	ld	r24, X+
    23dc:	9c 91       	ld	r25, X
    23de:	13 97       	sbiw	r26, 0x03	; 3
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	13 96       	adiw	r26, 0x03	; 3
    23e4:	9c 93       	st	X, r25
    23e6:	8e 93       	st	-X, r24
    23e8:	12 97       	sbiw	r26, 0x02	; 2
    23ea:	20 30       	cpi	r18, 0x00	; 0
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	38 07       	cpc	r19, r24
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	48 07       	cpc	r20, r24
    23f4:	80 e4       	ldi	r24, 0x40	; 64
    23f6:	58 07       	cpc	r21, r24
    23f8:	58 f3       	brcs	.-42     	; 0x23d0 <__unpack_f+0x66>
    23fa:	14 96       	adiw	r26, 0x04	; 4
    23fc:	2d 93       	st	X+, r18
    23fe:	3d 93       	st	X+, r19
    2400:	4d 93       	st	X+, r20
    2402:	5c 93       	st	X, r21
    2404:	17 97       	sbiw	r26, 0x07	; 7
    2406:	08 95       	ret
    2408:	2f 3f       	cpi	r18, 0xFF	; 255
    240a:	31 05       	cpc	r19, r1
    240c:	79 f4       	brne	.+30     	; 0x242c <__unpack_f+0xc2>
    240e:	41 15       	cp	r20, r1
    2410:	51 05       	cpc	r21, r1
    2412:	61 05       	cpc	r22, r1
    2414:	71 05       	cpc	r23, r1
    2416:	19 f4       	brne	.+6      	; 0x241e <__unpack_f+0xb4>
    2418:	84 e0       	ldi	r24, 0x04	; 4
    241a:	8c 93       	st	X, r24
    241c:	08 95       	ret
    241e:	64 ff       	sbrs	r22, 4
    2420:	03 c0       	rjmp	.+6      	; 0x2428 <__unpack_f+0xbe>
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	8c 93       	st	X, r24
    2426:	12 c0       	rjmp	.+36     	; 0x244c <__unpack_f+0xe2>
    2428:	1c 92       	st	X, r1
    242a:	10 c0       	rjmp	.+32     	; 0x244c <__unpack_f+0xe2>
    242c:	2f 57       	subi	r18, 0x7F	; 127
    242e:	30 40       	sbci	r19, 0x00	; 0
    2430:	13 96       	adiw	r26, 0x03	; 3
    2432:	3c 93       	st	X, r19
    2434:	2e 93       	st	-X, r18
    2436:	12 97       	sbiw	r26, 0x02	; 2
    2438:	83 e0       	ldi	r24, 0x03	; 3
    243a:	8c 93       	st	X, r24
    243c:	87 e0       	ldi	r24, 0x07	; 7
    243e:	44 0f       	add	r20, r20
    2440:	55 1f       	adc	r21, r21
    2442:	66 1f       	adc	r22, r22
    2444:	77 1f       	adc	r23, r23
    2446:	8a 95       	dec	r24
    2448:	d1 f7       	brne	.-12     	; 0x243e <__unpack_f+0xd4>
    244a:	70 64       	ori	r23, 0x40	; 64
    244c:	14 96       	adiw	r26, 0x04	; 4
    244e:	4d 93       	st	X+, r20
    2450:	5d 93       	st	X+, r21
    2452:	6d 93       	st	X+, r22
    2454:	7c 93       	st	X, r23
    2456:	17 97       	sbiw	r26, 0x07	; 7
    2458:	08 95       	ret

0000245a <__fpcmp_parts_f>:
    245a:	1f 93       	push	r17
    245c:	dc 01       	movw	r26, r24
    245e:	fb 01       	movw	r30, r22
    2460:	9c 91       	ld	r25, X
    2462:	92 30       	cpi	r25, 0x02	; 2
    2464:	08 f4       	brcc	.+2      	; 0x2468 <__fpcmp_parts_f+0xe>
    2466:	47 c0       	rjmp	.+142    	; 0x24f6 <__fpcmp_parts_f+0x9c>
    2468:	80 81       	ld	r24, Z
    246a:	82 30       	cpi	r24, 0x02	; 2
    246c:	08 f4       	brcc	.+2      	; 0x2470 <__fpcmp_parts_f+0x16>
    246e:	43 c0       	rjmp	.+134    	; 0x24f6 <__fpcmp_parts_f+0x9c>
    2470:	94 30       	cpi	r25, 0x04	; 4
    2472:	51 f4       	brne	.+20     	; 0x2488 <__fpcmp_parts_f+0x2e>
    2474:	11 96       	adiw	r26, 0x01	; 1
    2476:	1c 91       	ld	r17, X
    2478:	84 30       	cpi	r24, 0x04	; 4
    247a:	99 f5       	brne	.+102    	; 0x24e2 <__fpcmp_parts_f+0x88>
    247c:	81 81       	ldd	r24, Z+1	; 0x01
    247e:	68 2f       	mov	r22, r24
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	61 1b       	sub	r22, r17
    2484:	71 09       	sbc	r23, r1
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <__fpcmp_parts_f+0xac>
    2488:	84 30       	cpi	r24, 0x04	; 4
    248a:	21 f0       	breq	.+8      	; 0x2494 <__fpcmp_parts_f+0x3a>
    248c:	92 30       	cpi	r25, 0x02	; 2
    248e:	31 f4       	brne	.+12     	; 0x249c <__fpcmp_parts_f+0x42>
    2490:	82 30       	cpi	r24, 0x02	; 2
    2492:	b9 f1       	breq	.+110    	; 0x2502 <__fpcmp_parts_f+0xa8>
    2494:	81 81       	ldd	r24, Z+1	; 0x01
    2496:	88 23       	and	r24, r24
    2498:	89 f1       	breq	.+98     	; 0x24fc <__fpcmp_parts_f+0xa2>
    249a:	2d c0       	rjmp	.+90     	; 0x24f6 <__fpcmp_parts_f+0x9c>
    249c:	11 96       	adiw	r26, 0x01	; 1
    249e:	1c 91       	ld	r17, X
    24a0:	11 97       	sbiw	r26, 0x01	; 1
    24a2:	82 30       	cpi	r24, 0x02	; 2
    24a4:	f1 f0       	breq	.+60     	; 0x24e2 <__fpcmp_parts_f+0x88>
    24a6:	81 81       	ldd	r24, Z+1	; 0x01
    24a8:	18 17       	cp	r17, r24
    24aa:	d9 f4       	brne	.+54     	; 0x24e2 <__fpcmp_parts_f+0x88>
    24ac:	12 96       	adiw	r26, 0x02	; 2
    24ae:	2d 91       	ld	r18, X+
    24b0:	3c 91       	ld	r19, X
    24b2:	13 97       	sbiw	r26, 0x03	; 3
    24b4:	82 81       	ldd	r24, Z+2	; 0x02
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	82 17       	cp	r24, r18
    24ba:	93 07       	cpc	r25, r19
    24bc:	94 f0       	brlt	.+36     	; 0x24e2 <__fpcmp_parts_f+0x88>
    24be:	28 17       	cp	r18, r24
    24c0:	39 07       	cpc	r19, r25
    24c2:	bc f0       	brlt	.+46     	; 0x24f2 <__fpcmp_parts_f+0x98>
    24c4:	14 96       	adiw	r26, 0x04	; 4
    24c6:	8d 91       	ld	r24, X+
    24c8:	9d 91       	ld	r25, X+
    24ca:	0d 90       	ld	r0, X+
    24cc:	bc 91       	ld	r27, X
    24ce:	a0 2d       	mov	r26, r0
    24d0:	24 81       	ldd	r18, Z+4	; 0x04
    24d2:	35 81       	ldd	r19, Z+5	; 0x05
    24d4:	46 81       	ldd	r20, Z+6	; 0x06
    24d6:	57 81       	ldd	r21, Z+7	; 0x07
    24d8:	28 17       	cp	r18, r24
    24da:	39 07       	cpc	r19, r25
    24dc:	4a 07       	cpc	r20, r26
    24de:	5b 07       	cpc	r21, r27
    24e0:	18 f4       	brcc	.+6      	; 0x24e8 <__fpcmp_parts_f+0x8e>
    24e2:	11 23       	and	r17, r17
    24e4:	41 f0       	breq	.+16     	; 0x24f6 <__fpcmp_parts_f+0x9c>
    24e6:	0a c0       	rjmp	.+20     	; 0x24fc <__fpcmp_parts_f+0xa2>
    24e8:	82 17       	cp	r24, r18
    24ea:	93 07       	cpc	r25, r19
    24ec:	a4 07       	cpc	r26, r20
    24ee:	b5 07       	cpc	r27, r21
    24f0:	40 f4       	brcc	.+16     	; 0x2502 <__fpcmp_parts_f+0xa8>
    24f2:	11 23       	and	r17, r17
    24f4:	19 f0       	breq	.+6      	; 0x24fc <__fpcmp_parts_f+0xa2>
    24f6:	61 e0       	ldi	r22, 0x01	; 1
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	05 c0       	rjmp	.+10     	; 0x2506 <__fpcmp_parts_f+0xac>
    24fc:	6f ef       	ldi	r22, 0xFF	; 255
    24fe:	7f ef       	ldi	r23, 0xFF	; 255
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <__fpcmp_parts_f+0xac>
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	cb 01       	movw	r24, r22
    2508:	1f 91       	pop	r17
    250a:	08 95       	ret

0000250c <__divmodhi4>:
    250c:	97 fb       	bst	r25, 7
    250e:	09 2e       	mov	r0, r25
    2510:	07 26       	eor	r0, r23
    2512:	0a d0       	rcall	.+20     	; 0x2528 <__divmodhi4_neg1>
    2514:	77 fd       	sbrc	r23, 7
    2516:	04 d0       	rcall	.+8      	; 0x2520 <__divmodhi4_neg2>
    2518:	0c d0       	rcall	.+24     	; 0x2532 <__udivmodhi4>
    251a:	06 d0       	rcall	.+12     	; 0x2528 <__divmodhi4_neg1>
    251c:	00 20       	and	r0, r0
    251e:	1a f4       	brpl	.+6      	; 0x2526 <__divmodhi4_exit>

00002520 <__divmodhi4_neg2>:
    2520:	70 95       	com	r23
    2522:	61 95       	neg	r22
    2524:	7f 4f       	sbci	r23, 0xFF	; 255

00002526 <__divmodhi4_exit>:
    2526:	08 95       	ret

00002528 <__divmodhi4_neg1>:
    2528:	f6 f7       	brtc	.-4      	; 0x2526 <__divmodhi4_exit>
    252a:	90 95       	com	r25
    252c:	81 95       	neg	r24
    252e:	9f 4f       	sbci	r25, 0xFF	; 255
    2530:	08 95       	ret

00002532 <__udivmodhi4>:
    2532:	aa 1b       	sub	r26, r26
    2534:	bb 1b       	sub	r27, r27
    2536:	51 e1       	ldi	r21, 0x11	; 17
    2538:	07 c0       	rjmp	.+14     	; 0x2548 <__udivmodhi4_ep>

0000253a <__udivmodhi4_loop>:
    253a:	aa 1f       	adc	r26, r26
    253c:	bb 1f       	adc	r27, r27
    253e:	a6 17       	cp	r26, r22
    2540:	b7 07       	cpc	r27, r23
    2542:	10 f0       	brcs	.+4      	; 0x2548 <__udivmodhi4_ep>
    2544:	a6 1b       	sub	r26, r22
    2546:	b7 0b       	sbc	r27, r23

00002548 <__udivmodhi4_ep>:
    2548:	88 1f       	adc	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	5a 95       	dec	r21
    254e:	a9 f7       	brne	.-22     	; 0x253a <__udivmodhi4_loop>
    2550:	80 95       	com	r24
    2552:	90 95       	com	r25
    2554:	bc 01       	movw	r22, r24
    2556:	cd 01       	movw	r24, r26
    2558:	08 95       	ret

0000255a <__prologue_saves__>:
    255a:	2f 92       	push	r2
    255c:	3f 92       	push	r3
    255e:	4f 92       	push	r4
    2560:	5f 92       	push	r5
    2562:	6f 92       	push	r6
    2564:	7f 92       	push	r7
    2566:	8f 92       	push	r8
    2568:	9f 92       	push	r9
    256a:	af 92       	push	r10
    256c:	bf 92       	push	r11
    256e:	cf 92       	push	r12
    2570:	df 92       	push	r13
    2572:	ef 92       	push	r14
    2574:	ff 92       	push	r15
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	ca 1b       	sub	r28, r26
    2584:	db 0b       	sbc	r29, r27
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	19 94       	eijmp

00002592 <__epilogue_restores__>:
    2592:	2a 88       	ldd	r2, Y+18	; 0x12
    2594:	39 88       	ldd	r3, Y+17	; 0x11
    2596:	48 88       	ldd	r4, Y+16	; 0x10
    2598:	5f 84       	ldd	r5, Y+15	; 0x0f
    259a:	6e 84       	ldd	r6, Y+14	; 0x0e
    259c:	7d 84       	ldd	r7, Y+13	; 0x0d
    259e:	8c 84       	ldd	r8, Y+12	; 0x0c
    25a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    25a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    25a4:	b9 84       	ldd	r11, Y+9	; 0x09
    25a6:	c8 84       	ldd	r12, Y+8	; 0x08
    25a8:	df 80       	ldd	r13, Y+7	; 0x07
    25aa:	ee 80       	ldd	r14, Y+6	; 0x06
    25ac:	fd 80       	ldd	r15, Y+5	; 0x05
    25ae:	0c 81       	ldd	r16, Y+4	; 0x04
    25b0:	1b 81       	ldd	r17, Y+3	; 0x03
    25b2:	aa 81       	ldd	r26, Y+2	; 0x02
    25b4:	b9 81       	ldd	r27, Y+1	; 0x01
    25b6:	ce 0f       	add	r28, r30
    25b8:	d1 1d       	adc	r29, r1
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	cd bf       	out	0x3d, r28	; 61
    25c4:	ed 01       	movw	r28, r26
    25c6:	08 95       	ret

000025c8 <printf>:
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	fe 01       	movw	r30, r28
    25d2:	36 96       	adiw	r30, 0x06	; 6
    25d4:	61 91       	ld	r22, Z+
    25d6:	71 91       	ld	r23, Z+
    25d8:	80 91 33 08 	lds	r24, 0x0833
    25dc:	90 91 34 08 	lds	r25, 0x0834
    25e0:	af 01       	movw	r20, r30
    25e2:	0e 94 2b 13 	call	0x2656	; 0x2656 <vfprintf>
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <puts>:
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	8c 01       	movw	r16, r24
    25f6:	e0 91 33 08 	lds	r30, 0x0833
    25fa:	f0 91 34 08 	lds	r31, 0x0834
    25fe:	83 81       	ldd	r24, Z+3	; 0x03
    2600:	81 ff       	sbrs	r24, 1
    2602:	21 c0       	rjmp	.+66     	; 0x2646 <puts+0x5a>
    2604:	c0 e0       	ldi	r28, 0x00	; 0
    2606:	d0 e0       	ldi	r29, 0x00	; 0
    2608:	0d c0       	rjmp	.+26     	; 0x2624 <puts+0x38>
    260a:	e0 91 33 08 	lds	r30, 0x0833
    260e:	f0 91 34 08 	lds	r31, 0x0834
    2612:	20 85       	ldd	r18, Z+8	; 0x08
    2614:	31 85       	ldd	r19, Z+9	; 0x09
    2616:	bf 01       	movw	r22, r30
    2618:	f9 01       	movw	r30, r18
    261a:	19 95       	eicall
    261c:	89 2b       	or	r24, r25
    261e:	11 f0       	breq	.+4      	; 0x2624 <puts+0x38>
    2620:	cf ef       	ldi	r28, 0xFF	; 255
    2622:	df ef       	ldi	r29, 0xFF	; 255
    2624:	f8 01       	movw	r30, r16
    2626:	81 91       	ld	r24, Z+
    2628:	8f 01       	movw	r16, r30
    262a:	88 23       	and	r24, r24
    262c:	71 f7       	brne	.-36     	; 0x260a <puts+0x1e>
    262e:	e0 91 33 08 	lds	r30, 0x0833
    2632:	f0 91 34 08 	lds	r31, 0x0834
    2636:	20 85       	ldd	r18, Z+8	; 0x08
    2638:	31 85       	ldd	r19, Z+9	; 0x09
    263a:	8a e0       	ldi	r24, 0x0A	; 10
    263c:	bf 01       	movw	r22, r30
    263e:	f9 01       	movw	r30, r18
    2640:	19 95       	eicall
    2642:	89 2b       	or	r24, r25
    2644:	11 f0       	breq	.+4      	; 0x264a <puts+0x5e>
    2646:	cf ef       	ldi	r28, 0xFF	; 255
    2648:	df ef       	ldi	r29, 0xFF	; 255
    264a:	ce 01       	movw	r24, r28
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	08 95       	ret

00002656 <vfprintf>:
    2656:	2f 92       	push	r2
    2658:	3f 92       	push	r3
    265a:	4f 92       	push	r4
    265c:	5f 92       	push	r5
    265e:	6f 92       	push	r6
    2660:	7f 92       	push	r7
    2662:	8f 92       	push	r8
    2664:	9f 92       	push	r9
    2666:	af 92       	push	r10
    2668:	bf 92       	push	r11
    266a:	cf 92       	push	r12
    266c:	df 92       	push	r13
    266e:	ef 92       	push	r14
    2670:	ff 92       	push	r15
    2672:	0f 93       	push	r16
    2674:	1f 93       	push	r17
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	2b 97       	sbiw	r28, 0x0b	; 11
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	f8 94       	cli
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	3c 01       	movw	r6, r24
    268c:	2b 01       	movw	r4, r22
    268e:	5a 01       	movw	r10, r20
    2690:	fc 01       	movw	r30, r24
    2692:	17 82       	std	Z+7, r1	; 0x07
    2694:	16 82       	std	Z+6, r1	; 0x06
    2696:	83 81       	ldd	r24, Z+3	; 0x03
    2698:	81 fd       	sbrc	r24, 1
    269a:	03 c0       	rjmp	.+6      	; 0x26a2 <vfprintf+0x4c>
    269c:	6f ef       	ldi	r22, 0xFF	; 255
    269e:	7f ef       	ldi	r23, 0xFF	; 255
    26a0:	c6 c1       	rjmp	.+908    	; 0x2a2e <vfprintf+0x3d8>
    26a2:	9a e0       	ldi	r25, 0x0A	; 10
    26a4:	89 2e       	mov	r8, r25
    26a6:	1e 01       	movw	r2, r28
    26a8:	08 94       	sec
    26aa:	21 1c       	adc	r2, r1
    26ac:	31 1c       	adc	r3, r1
    26ae:	f3 01       	movw	r30, r6
    26b0:	23 81       	ldd	r18, Z+3	; 0x03
    26b2:	f2 01       	movw	r30, r4
    26b4:	23 fd       	sbrc	r18, 3
    26b6:	85 91       	lpm	r24, Z+
    26b8:	23 ff       	sbrs	r18, 3
    26ba:	81 91       	ld	r24, Z+
    26bc:	2f 01       	movw	r4, r30
    26be:	88 23       	and	r24, r24
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <vfprintf+0x6e>
    26c2:	b2 c1       	rjmp	.+868    	; 0x2a28 <vfprintf+0x3d2>
    26c4:	85 32       	cpi	r24, 0x25	; 37
    26c6:	39 f4       	brne	.+14     	; 0x26d6 <vfprintf+0x80>
    26c8:	23 fd       	sbrc	r18, 3
    26ca:	85 91       	lpm	r24, Z+
    26cc:	23 ff       	sbrs	r18, 3
    26ce:	81 91       	ld	r24, Z+
    26d0:	2f 01       	movw	r4, r30
    26d2:	85 32       	cpi	r24, 0x25	; 37
    26d4:	29 f4       	brne	.+10     	; 0x26e0 <vfprintf+0x8a>
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	b3 01       	movw	r22, r6
    26da:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <fputc>
    26de:	e7 cf       	rjmp	.-50     	; 0x26ae <vfprintf+0x58>
    26e0:	98 2f       	mov	r25, r24
    26e2:	ff 24       	eor	r15, r15
    26e4:	ee 24       	eor	r14, r14
    26e6:	99 24       	eor	r9, r9
    26e8:	ff e1       	ldi	r31, 0x1F	; 31
    26ea:	ff 15       	cp	r31, r15
    26ec:	d0 f0       	brcs	.+52     	; 0x2722 <vfprintf+0xcc>
    26ee:	9b 32       	cpi	r25, 0x2B	; 43
    26f0:	69 f0       	breq	.+26     	; 0x270c <vfprintf+0xb6>
    26f2:	9c 32       	cpi	r25, 0x2C	; 44
    26f4:	28 f4       	brcc	.+10     	; 0x2700 <vfprintf+0xaa>
    26f6:	90 32       	cpi	r25, 0x20	; 32
    26f8:	59 f0       	breq	.+22     	; 0x2710 <vfprintf+0xba>
    26fa:	93 32       	cpi	r25, 0x23	; 35
    26fc:	91 f4       	brne	.+36     	; 0x2722 <vfprintf+0xcc>
    26fe:	0e c0       	rjmp	.+28     	; 0x271c <vfprintf+0xc6>
    2700:	9d 32       	cpi	r25, 0x2D	; 45
    2702:	49 f0       	breq	.+18     	; 0x2716 <vfprintf+0xc0>
    2704:	90 33       	cpi	r25, 0x30	; 48
    2706:	69 f4       	brne	.+26     	; 0x2722 <vfprintf+0xcc>
    2708:	41 e0       	ldi	r20, 0x01	; 1
    270a:	24 c0       	rjmp	.+72     	; 0x2754 <vfprintf+0xfe>
    270c:	52 e0       	ldi	r21, 0x02	; 2
    270e:	f5 2a       	or	r15, r21
    2710:	84 e0       	ldi	r24, 0x04	; 4
    2712:	f8 2a       	or	r15, r24
    2714:	28 c0       	rjmp	.+80     	; 0x2766 <vfprintf+0x110>
    2716:	98 e0       	ldi	r25, 0x08	; 8
    2718:	f9 2a       	or	r15, r25
    271a:	25 c0       	rjmp	.+74     	; 0x2766 <vfprintf+0x110>
    271c:	e0 e1       	ldi	r30, 0x10	; 16
    271e:	fe 2a       	or	r15, r30
    2720:	22 c0       	rjmp	.+68     	; 0x2766 <vfprintf+0x110>
    2722:	f7 fc       	sbrc	r15, 7
    2724:	29 c0       	rjmp	.+82     	; 0x2778 <vfprintf+0x122>
    2726:	89 2f       	mov	r24, r25
    2728:	80 53       	subi	r24, 0x30	; 48
    272a:	8a 30       	cpi	r24, 0x0A	; 10
    272c:	70 f4       	brcc	.+28     	; 0x274a <vfprintf+0xf4>
    272e:	f6 fe       	sbrs	r15, 6
    2730:	05 c0       	rjmp	.+10     	; 0x273c <vfprintf+0xe6>
    2732:	98 9c       	mul	r9, r8
    2734:	90 2c       	mov	r9, r0
    2736:	11 24       	eor	r1, r1
    2738:	98 0e       	add	r9, r24
    273a:	15 c0       	rjmp	.+42     	; 0x2766 <vfprintf+0x110>
    273c:	e8 9c       	mul	r14, r8
    273e:	e0 2c       	mov	r14, r0
    2740:	11 24       	eor	r1, r1
    2742:	e8 0e       	add	r14, r24
    2744:	f0 e2       	ldi	r31, 0x20	; 32
    2746:	ff 2a       	or	r15, r31
    2748:	0e c0       	rjmp	.+28     	; 0x2766 <vfprintf+0x110>
    274a:	9e 32       	cpi	r25, 0x2E	; 46
    274c:	29 f4       	brne	.+10     	; 0x2758 <vfprintf+0x102>
    274e:	f6 fc       	sbrc	r15, 6
    2750:	6b c1       	rjmp	.+726    	; 0x2a28 <vfprintf+0x3d2>
    2752:	40 e4       	ldi	r20, 0x40	; 64
    2754:	f4 2a       	or	r15, r20
    2756:	07 c0       	rjmp	.+14     	; 0x2766 <vfprintf+0x110>
    2758:	9c 36       	cpi	r25, 0x6C	; 108
    275a:	19 f4       	brne	.+6      	; 0x2762 <vfprintf+0x10c>
    275c:	50 e8       	ldi	r21, 0x80	; 128
    275e:	f5 2a       	or	r15, r21
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <vfprintf+0x110>
    2762:	98 36       	cpi	r25, 0x68	; 104
    2764:	49 f4       	brne	.+18     	; 0x2778 <vfprintf+0x122>
    2766:	f2 01       	movw	r30, r4
    2768:	23 fd       	sbrc	r18, 3
    276a:	95 91       	lpm	r25, Z+
    276c:	23 ff       	sbrs	r18, 3
    276e:	91 91       	ld	r25, Z+
    2770:	2f 01       	movw	r4, r30
    2772:	99 23       	and	r25, r25
    2774:	09 f0       	breq	.+2      	; 0x2778 <vfprintf+0x122>
    2776:	b8 cf       	rjmp	.-144    	; 0x26e8 <vfprintf+0x92>
    2778:	89 2f       	mov	r24, r25
    277a:	85 54       	subi	r24, 0x45	; 69
    277c:	83 30       	cpi	r24, 0x03	; 3
    277e:	18 f0       	brcs	.+6      	; 0x2786 <vfprintf+0x130>
    2780:	80 52       	subi	r24, 0x20	; 32
    2782:	83 30       	cpi	r24, 0x03	; 3
    2784:	38 f4       	brcc	.+14     	; 0x2794 <vfprintf+0x13e>
    2786:	44 e0       	ldi	r20, 0x04	; 4
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	a4 0e       	add	r10, r20
    278c:	b5 1e       	adc	r11, r21
    278e:	5f e3       	ldi	r21, 0x3F	; 63
    2790:	59 83       	std	Y+1, r21	; 0x01
    2792:	0f c0       	rjmp	.+30     	; 0x27b2 <vfprintf+0x15c>
    2794:	93 36       	cpi	r25, 0x63	; 99
    2796:	31 f0       	breq	.+12     	; 0x27a4 <vfprintf+0x14e>
    2798:	93 37       	cpi	r25, 0x73	; 115
    279a:	79 f0       	breq	.+30     	; 0x27ba <vfprintf+0x164>
    279c:	93 35       	cpi	r25, 0x53	; 83
    279e:	09 f0       	breq	.+2      	; 0x27a2 <vfprintf+0x14c>
    27a0:	56 c0       	rjmp	.+172    	; 0x284e <vfprintf+0x1f8>
    27a2:	20 c0       	rjmp	.+64     	; 0x27e4 <vfprintf+0x18e>
    27a4:	f5 01       	movw	r30, r10
    27a6:	80 81       	ld	r24, Z
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	42 e0       	ldi	r20, 0x02	; 2
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	a4 0e       	add	r10, r20
    27b0:	b5 1e       	adc	r11, r21
    27b2:	61 01       	movw	r12, r2
    27b4:	01 e0       	ldi	r16, 0x01	; 1
    27b6:	10 e0       	ldi	r17, 0x00	; 0
    27b8:	12 c0       	rjmp	.+36     	; 0x27de <vfprintf+0x188>
    27ba:	f5 01       	movw	r30, r10
    27bc:	c0 80       	ld	r12, Z
    27be:	d1 80       	ldd	r13, Z+1	; 0x01
    27c0:	f6 fc       	sbrc	r15, 6
    27c2:	03 c0       	rjmp	.+6      	; 0x27ca <vfprintf+0x174>
    27c4:	6f ef       	ldi	r22, 0xFF	; 255
    27c6:	7f ef       	ldi	r23, 0xFF	; 255
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <vfprintf+0x178>
    27ca:	69 2d       	mov	r22, r9
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	42 e0       	ldi	r20, 0x02	; 2
    27d0:	50 e0       	ldi	r21, 0x00	; 0
    27d2:	a4 0e       	add	r10, r20
    27d4:	b5 1e       	adc	r11, r21
    27d6:	c6 01       	movw	r24, r12
    27d8:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <strnlen>
    27dc:	8c 01       	movw	r16, r24
    27de:	5f e7       	ldi	r21, 0x7F	; 127
    27e0:	f5 22       	and	r15, r21
    27e2:	14 c0       	rjmp	.+40     	; 0x280c <vfprintf+0x1b6>
    27e4:	f5 01       	movw	r30, r10
    27e6:	c0 80       	ld	r12, Z
    27e8:	d1 80       	ldd	r13, Z+1	; 0x01
    27ea:	f6 fc       	sbrc	r15, 6
    27ec:	03 c0       	rjmp	.+6      	; 0x27f4 <vfprintf+0x19e>
    27ee:	6f ef       	ldi	r22, 0xFF	; 255
    27f0:	7f ef       	ldi	r23, 0xFF	; 255
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <vfprintf+0x1a2>
    27f4:	69 2d       	mov	r22, r9
    27f6:	70 e0       	ldi	r23, 0x00	; 0
    27f8:	42 e0       	ldi	r20, 0x02	; 2
    27fa:	50 e0       	ldi	r21, 0x00	; 0
    27fc:	a4 0e       	add	r10, r20
    27fe:	b5 1e       	adc	r11, r21
    2800:	c6 01       	movw	r24, r12
    2802:	0e 94 31 15 	call	0x2a62	; 0x2a62 <strnlen_P>
    2806:	8c 01       	movw	r16, r24
    2808:	50 e8       	ldi	r21, 0x80	; 128
    280a:	f5 2a       	or	r15, r21
    280c:	f3 fe       	sbrs	r15, 3
    280e:	07 c0       	rjmp	.+14     	; 0x281e <vfprintf+0x1c8>
    2810:	1a c0       	rjmp	.+52     	; 0x2846 <vfprintf+0x1f0>
    2812:	80 e2       	ldi	r24, 0x20	; 32
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	b3 01       	movw	r22, r6
    2818:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <fputc>
    281c:	ea 94       	dec	r14
    281e:	8e 2d       	mov	r24, r14
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	08 17       	cp	r16, r24
    2824:	19 07       	cpc	r17, r25
    2826:	a8 f3       	brcs	.-22     	; 0x2812 <vfprintf+0x1bc>
    2828:	0e c0       	rjmp	.+28     	; 0x2846 <vfprintf+0x1f0>
    282a:	f6 01       	movw	r30, r12
    282c:	f7 fc       	sbrc	r15, 7
    282e:	85 91       	lpm	r24, Z+
    2830:	f7 fe       	sbrs	r15, 7
    2832:	81 91       	ld	r24, Z+
    2834:	6f 01       	movw	r12, r30
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	b3 01       	movw	r22, r6
    283a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <fputc>
    283e:	e1 10       	cpse	r14, r1
    2840:	ea 94       	dec	r14
    2842:	01 50       	subi	r16, 0x01	; 1
    2844:	10 40       	sbci	r17, 0x00	; 0
    2846:	01 15       	cp	r16, r1
    2848:	11 05       	cpc	r17, r1
    284a:	79 f7       	brne	.-34     	; 0x282a <vfprintf+0x1d4>
    284c:	ea c0       	rjmp	.+468    	; 0x2a22 <vfprintf+0x3cc>
    284e:	94 36       	cpi	r25, 0x64	; 100
    2850:	11 f0       	breq	.+4      	; 0x2856 <vfprintf+0x200>
    2852:	99 36       	cpi	r25, 0x69	; 105
    2854:	69 f5       	brne	.+90     	; 0x28b0 <vfprintf+0x25a>
    2856:	f7 fe       	sbrs	r15, 7
    2858:	08 c0       	rjmp	.+16     	; 0x286a <vfprintf+0x214>
    285a:	f5 01       	movw	r30, r10
    285c:	20 81       	ld	r18, Z
    285e:	31 81       	ldd	r19, Z+1	; 0x01
    2860:	42 81       	ldd	r20, Z+2	; 0x02
    2862:	53 81       	ldd	r21, Z+3	; 0x03
    2864:	84 e0       	ldi	r24, 0x04	; 4
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	0a c0       	rjmp	.+20     	; 0x287e <vfprintf+0x228>
    286a:	f5 01       	movw	r30, r10
    286c:	80 81       	ld	r24, Z
    286e:	91 81       	ldd	r25, Z+1	; 0x01
    2870:	9c 01       	movw	r18, r24
    2872:	44 27       	eor	r20, r20
    2874:	37 fd       	sbrc	r19, 7
    2876:	40 95       	com	r20
    2878:	54 2f       	mov	r21, r20
    287a:	82 e0       	ldi	r24, 0x02	; 2
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	a8 0e       	add	r10, r24
    2880:	b9 1e       	adc	r11, r25
    2882:	9f e6       	ldi	r25, 0x6F	; 111
    2884:	f9 22       	and	r15, r25
    2886:	57 ff       	sbrs	r21, 7
    2888:	09 c0       	rjmp	.+18     	; 0x289c <vfprintf+0x246>
    288a:	50 95       	com	r21
    288c:	40 95       	com	r20
    288e:	30 95       	com	r19
    2890:	21 95       	neg	r18
    2892:	3f 4f       	sbci	r19, 0xFF	; 255
    2894:	4f 4f       	sbci	r20, 0xFF	; 255
    2896:	5f 4f       	sbci	r21, 0xFF	; 255
    2898:	e0 e8       	ldi	r30, 0x80	; 128
    289a:	fe 2a       	or	r15, r30
    289c:	ca 01       	movw	r24, r20
    289e:	b9 01       	movw	r22, r18
    28a0:	a1 01       	movw	r20, r2
    28a2:	2a e0       	ldi	r18, 0x0A	; 10
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__ultoa_invert>
    28aa:	d8 2e       	mov	r13, r24
    28ac:	d2 18       	sub	r13, r2
    28ae:	40 c0       	rjmp	.+128    	; 0x2930 <vfprintf+0x2da>
    28b0:	95 37       	cpi	r25, 0x75	; 117
    28b2:	29 f4       	brne	.+10     	; 0x28be <vfprintf+0x268>
    28b4:	1f 2d       	mov	r17, r15
    28b6:	1f 7e       	andi	r17, 0xEF	; 239
    28b8:	2a e0       	ldi	r18, 0x0A	; 10
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	1d c0       	rjmp	.+58     	; 0x28f8 <vfprintf+0x2a2>
    28be:	1f 2d       	mov	r17, r15
    28c0:	19 7f       	andi	r17, 0xF9	; 249
    28c2:	9f 36       	cpi	r25, 0x6F	; 111
    28c4:	61 f0       	breq	.+24     	; 0x28de <vfprintf+0x288>
    28c6:	90 37       	cpi	r25, 0x70	; 112
    28c8:	20 f4       	brcc	.+8      	; 0x28d2 <vfprintf+0x27c>
    28ca:	98 35       	cpi	r25, 0x58	; 88
    28cc:	09 f0       	breq	.+2      	; 0x28d0 <vfprintf+0x27a>
    28ce:	ac c0       	rjmp	.+344    	; 0x2a28 <vfprintf+0x3d2>
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <vfprintf+0x29a>
    28d2:	90 37       	cpi	r25, 0x70	; 112
    28d4:	39 f0       	breq	.+14     	; 0x28e4 <vfprintf+0x28e>
    28d6:	98 37       	cpi	r25, 0x78	; 120
    28d8:	09 f0       	breq	.+2      	; 0x28dc <vfprintf+0x286>
    28da:	a6 c0       	rjmp	.+332    	; 0x2a28 <vfprintf+0x3d2>
    28dc:	04 c0       	rjmp	.+8      	; 0x28e6 <vfprintf+0x290>
    28de:	28 e0       	ldi	r18, 0x08	; 8
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	0a c0       	rjmp	.+20     	; 0x28f8 <vfprintf+0x2a2>
    28e4:	10 61       	ori	r17, 0x10	; 16
    28e6:	14 fd       	sbrc	r17, 4
    28e8:	14 60       	ori	r17, 0x04	; 4
    28ea:	20 e1       	ldi	r18, 0x10	; 16
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	04 c0       	rjmp	.+8      	; 0x28f8 <vfprintf+0x2a2>
    28f0:	14 fd       	sbrc	r17, 4
    28f2:	16 60       	ori	r17, 0x06	; 6
    28f4:	20 e1       	ldi	r18, 0x10	; 16
    28f6:	32 e0       	ldi	r19, 0x02	; 2
    28f8:	17 ff       	sbrs	r17, 7
    28fa:	08 c0       	rjmp	.+16     	; 0x290c <vfprintf+0x2b6>
    28fc:	f5 01       	movw	r30, r10
    28fe:	60 81       	ld	r22, Z
    2900:	71 81       	ldd	r23, Z+1	; 0x01
    2902:	82 81       	ldd	r24, Z+2	; 0x02
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	44 e0       	ldi	r20, 0x04	; 4
    2908:	50 e0       	ldi	r21, 0x00	; 0
    290a:	08 c0       	rjmp	.+16     	; 0x291c <vfprintf+0x2c6>
    290c:	f5 01       	movw	r30, r10
    290e:	80 81       	ld	r24, Z
    2910:	91 81       	ldd	r25, Z+1	; 0x01
    2912:	bc 01       	movw	r22, r24
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	42 e0       	ldi	r20, 0x02	; 2
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	a4 0e       	add	r10, r20
    291e:	b5 1e       	adc	r11, r21
    2920:	a1 01       	movw	r20, r2
    2922:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__ultoa_invert>
    2926:	d8 2e       	mov	r13, r24
    2928:	d2 18       	sub	r13, r2
    292a:	8f e7       	ldi	r24, 0x7F	; 127
    292c:	f8 2e       	mov	r15, r24
    292e:	f1 22       	and	r15, r17
    2930:	f6 fe       	sbrs	r15, 6
    2932:	0b c0       	rjmp	.+22     	; 0x294a <vfprintf+0x2f4>
    2934:	5e ef       	ldi	r21, 0xFE	; 254
    2936:	f5 22       	and	r15, r21
    2938:	d9 14       	cp	r13, r9
    293a:	38 f4       	brcc	.+14     	; 0x294a <vfprintf+0x2f4>
    293c:	f4 fe       	sbrs	r15, 4
    293e:	07 c0       	rjmp	.+14     	; 0x294e <vfprintf+0x2f8>
    2940:	f2 fc       	sbrc	r15, 2
    2942:	05 c0       	rjmp	.+10     	; 0x294e <vfprintf+0x2f8>
    2944:	8f ee       	ldi	r24, 0xEF	; 239
    2946:	f8 22       	and	r15, r24
    2948:	02 c0       	rjmp	.+4      	; 0x294e <vfprintf+0x2f8>
    294a:	1d 2d       	mov	r17, r13
    294c:	01 c0       	rjmp	.+2      	; 0x2950 <vfprintf+0x2fa>
    294e:	19 2d       	mov	r17, r9
    2950:	f4 fe       	sbrs	r15, 4
    2952:	0d c0       	rjmp	.+26     	; 0x296e <vfprintf+0x318>
    2954:	fe 01       	movw	r30, r28
    2956:	ed 0d       	add	r30, r13
    2958:	f1 1d       	adc	r31, r1
    295a:	80 81       	ld	r24, Z
    295c:	80 33       	cpi	r24, 0x30	; 48
    295e:	19 f4       	brne	.+6      	; 0x2966 <vfprintf+0x310>
    2960:	99 ee       	ldi	r25, 0xE9	; 233
    2962:	f9 22       	and	r15, r25
    2964:	08 c0       	rjmp	.+16     	; 0x2976 <vfprintf+0x320>
    2966:	1f 5f       	subi	r17, 0xFF	; 255
    2968:	f2 fe       	sbrs	r15, 2
    296a:	05 c0       	rjmp	.+10     	; 0x2976 <vfprintf+0x320>
    296c:	03 c0       	rjmp	.+6      	; 0x2974 <vfprintf+0x31e>
    296e:	8f 2d       	mov	r24, r15
    2970:	86 78       	andi	r24, 0x86	; 134
    2972:	09 f0       	breq	.+2      	; 0x2976 <vfprintf+0x320>
    2974:	1f 5f       	subi	r17, 0xFF	; 255
    2976:	0f 2d       	mov	r16, r15
    2978:	f3 fc       	sbrc	r15, 3
    297a:	14 c0       	rjmp	.+40     	; 0x29a4 <vfprintf+0x34e>
    297c:	f0 fe       	sbrs	r15, 0
    297e:	0f c0       	rjmp	.+30     	; 0x299e <vfprintf+0x348>
    2980:	1e 15       	cp	r17, r14
    2982:	10 f0       	brcs	.+4      	; 0x2988 <vfprintf+0x332>
    2984:	9d 2c       	mov	r9, r13
    2986:	0b c0       	rjmp	.+22     	; 0x299e <vfprintf+0x348>
    2988:	9d 2c       	mov	r9, r13
    298a:	9e 0c       	add	r9, r14
    298c:	91 1a       	sub	r9, r17
    298e:	1e 2d       	mov	r17, r14
    2990:	06 c0       	rjmp	.+12     	; 0x299e <vfprintf+0x348>
    2992:	80 e2       	ldi	r24, 0x20	; 32
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	b3 01       	movw	r22, r6
    2998:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <fputc>
    299c:	1f 5f       	subi	r17, 0xFF	; 255
    299e:	1e 15       	cp	r17, r14
    29a0:	c0 f3       	brcs	.-16     	; 0x2992 <vfprintf+0x33c>
    29a2:	04 c0       	rjmp	.+8      	; 0x29ac <vfprintf+0x356>
    29a4:	1e 15       	cp	r17, r14
    29a6:	10 f4       	brcc	.+4      	; 0x29ac <vfprintf+0x356>
    29a8:	e1 1a       	sub	r14, r17
    29aa:	01 c0       	rjmp	.+2      	; 0x29ae <vfprintf+0x358>
    29ac:	ee 24       	eor	r14, r14
    29ae:	04 ff       	sbrs	r16, 4
    29b0:	0f c0       	rjmp	.+30     	; 0x29d0 <vfprintf+0x37a>
    29b2:	80 e3       	ldi	r24, 0x30	; 48
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	b3 01       	movw	r22, r6
    29b8:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <fputc>
    29bc:	02 ff       	sbrs	r16, 2
    29be:	1d c0       	rjmp	.+58     	; 0x29fa <vfprintf+0x3a4>
    29c0:	01 fd       	sbrc	r16, 1
    29c2:	03 c0       	rjmp	.+6      	; 0x29ca <vfprintf+0x374>
    29c4:	88 e7       	ldi	r24, 0x78	; 120
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	0e c0       	rjmp	.+28     	; 0x29e6 <vfprintf+0x390>
    29ca:	88 e5       	ldi	r24, 0x58	; 88
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0b c0       	rjmp	.+22     	; 0x29e6 <vfprintf+0x390>
    29d0:	80 2f       	mov	r24, r16
    29d2:	86 78       	andi	r24, 0x86	; 134
    29d4:	91 f0       	breq	.+36     	; 0x29fa <vfprintf+0x3a4>
    29d6:	01 ff       	sbrs	r16, 1
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <vfprintf+0x388>
    29da:	8b e2       	ldi	r24, 0x2B	; 43
    29dc:	01 c0       	rjmp	.+2      	; 0x29e0 <vfprintf+0x38a>
    29de:	80 e2       	ldi	r24, 0x20	; 32
    29e0:	f7 fc       	sbrc	r15, 7
    29e2:	8d e2       	ldi	r24, 0x2D	; 45
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	b3 01       	movw	r22, r6
    29e8:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <fputc>
    29ec:	06 c0       	rjmp	.+12     	; 0x29fa <vfprintf+0x3a4>
    29ee:	80 e3       	ldi	r24, 0x30	; 48
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	b3 01       	movw	r22, r6
    29f4:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <fputc>
    29f8:	9a 94       	dec	r9
    29fa:	d9 14       	cp	r13, r9
    29fc:	c0 f3       	brcs	.-16     	; 0x29ee <vfprintf+0x398>
    29fe:	da 94       	dec	r13
    2a00:	f1 01       	movw	r30, r2
    2a02:	ed 0d       	add	r30, r13
    2a04:	f1 1d       	adc	r31, r1
    2a06:	80 81       	ld	r24, Z
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	b3 01       	movw	r22, r6
    2a0c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <fputc>
    2a10:	dd 20       	and	r13, r13
    2a12:	a9 f7       	brne	.-22     	; 0x29fe <vfprintf+0x3a8>
    2a14:	06 c0       	rjmp	.+12     	; 0x2a22 <vfprintf+0x3cc>
    2a16:	80 e2       	ldi	r24, 0x20	; 32
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	b3 01       	movw	r22, r6
    2a1c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <fputc>
    2a20:	ea 94       	dec	r14
    2a22:	ee 20       	and	r14, r14
    2a24:	c1 f7       	brne	.-16     	; 0x2a16 <vfprintf+0x3c0>
    2a26:	43 ce       	rjmp	.-890    	; 0x26ae <vfprintf+0x58>
    2a28:	f3 01       	movw	r30, r6
    2a2a:	66 81       	ldd	r22, Z+6	; 0x06
    2a2c:	77 81       	ldd	r23, Z+7	; 0x07
    2a2e:	cb 01       	movw	r24, r22
    2a30:	2b 96       	adiw	r28, 0x0b	; 11
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	f8 94       	cli
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	cd bf       	out	0x3d, r28	; 61
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	1f 91       	pop	r17
    2a42:	0f 91       	pop	r16
    2a44:	ff 90       	pop	r15
    2a46:	ef 90       	pop	r14
    2a48:	df 90       	pop	r13
    2a4a:	cf 90       	pop	r12
    2a4c:	bf 90       	pop	r11
    2a4e:	af 90       	pop	r10
    2a50:	9f 90       	pop	r9
    2a52:	8f 90       	pop	r8
    2a54:	7f 90       	pop	r7
    2a56:	6f 90       	pop	r6
    2a58:	5f 90       	pop	r5
    2a5a:	4f 90       	pop	r4
    2a5c:	3f 90       	pop	r3
    2a5e:	2f 90       	pop	r2
    2a60:	08 95       	ret

00002a62 <strnlen_P>:
    2a62:	fc 01       	movw	r30, r24
    2a64:	05 90       	lpm	r0, Z+
    2a66:	61 50       	subi	r22, 0x01	; 1
    2a68:	70 40       	sbci	r23, 0x00	; 0
    2a6a:	01 10       	cpse	r0, r1
    2a6c:	d8 f7       	brcc	.-10     	; 0x2a64 <strnlen_P+0x2>
    2a6e:	80 95       	com	r24
    2a70:	90 95       	com	r25
    2a72:	8e 0f       	add	r24, r30
    2a74:	9f 1f       	adc	r25, r31
    2a76:	08 95       	ret

00002a78 <strnlen>:
    2a78:	fc 01       	movw	r30, r24
    2a7a:	61 50       	subi	r22, 0x01	; 1
    2a7c:	70 40       	sbci	r23, 0x00	; 0
    2a7e:	01 90       	ld	r0, Z+
    2a80:	01 10       	cpse	r0, r1
    2a82:	d8 f7       	brcc	.-10     	; 0x2a7a <strnlen+0x2>
    2a84:	80 95       	com	r24
    2a86:	90 95       	com	r25
    2a88:	8e 0f       	add	r24, r30
    2a8a:	9f 1f       	adc	r25, r31
    2a8c:	08 95       	ret

00002a8e <fputc>:
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	8c 01       	movw	r16, r24
    2a98:	eb 01       	movw	r28, r22
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	81 ff       	sbrs	r24, 1
    2a9e:	1b c0       	rjmp	.+54     	; 0x2ad6 <fputc+0x48>
    2aa0:	82 ff       	sbrs	r24, 2
    2aa2:	0d c0       	rjmp	.+26     	; 0x2abe <fputc+0x30>
    2aa4:	2e 81       	ldd	r18, Y+6	; 0x06
    2aa6:	3f 81       	ldd	r19, Y+7	; 0x07
    2aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    2aac:	28 17       	cp	r18, r24
    2aae:	39 07       	cpc	r19, r25
    2ab0:	64 f4       	brge	.+24     	; 0x2aca <fputc+0x3c>
    2ab2:	e8 81       	ld	r30, Y
    2ab4:	f9 81       	ldd	r31, Y+1	; 0x01
    2ab6:	01 93       	st	Z+, r16
    2ab8:	f9 83       	std	Y+1, r31	; 0x01
    2aba:	e8 83       	st	Y, r30
    2abc:	06 c0       	rjmp	.+12     	; 0x2aca <fputc+0x3c>
    2abe:	e8 85       	ldd	r30, Y+8	; 0x08
    2ac0:	f9 85       	ldd	r31, Y+9	; 0x09
    2ac2:	80 2f       	mov	r24, r16
    2ac4:	19 95       	eicall
    2ac6:	89 2b       	or	r24, r25
    2ac8:	31 f4       	brne	.+12     	; 0x2ad6 <fputc+0x48>
    2aca:	8e 81       	ldd	r24, Y+6	; 0x06
    2acc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ace:	01 96       	adiw	r24, 0x01	; 1
    2ad0:	9f 83       	std	Y+7, r25	; 0x07
    2ad2:	8e 83       	std	Y+6, r24	; 0x06
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <fputc+0x4c>
    2ad6:	0f ef       	ldi	r16, 0xFF	; 255
    2ad8:	1f ef       	ldi	r17, 0xFF	; 255
    2ada:	c8 01       	movw	r24, r16
    2adc:	df 91       	pop	r29
    2ade:	cf 91       	pop	r28
    2ae0:	1f 91       	pop	r17
    2ae2:	0f 91       	pop	r16
    2ae4:	08 95       	ret

00002ae6 <__ultoa_invert>:
    2ae6:	fa 01       	movw	r30, r20
    2ae8:	aa 27       	eor	r26, r26
    2aea:	28 30       	cpi	r18, 0x08	; 8
    2aec:	51 f1       	breq	.+84     	; 0x2b42 <__ultoa_invert+0x5c>
    2aee:	20 31       	cpi	r18, 0x10	; 16
    2af0:	81 f1       	breq	.+96     	; 0x2b52 <__ultoa_invert+0x6c>
    2af2:	e8 94       	clt
    2af4:	6f 93       	push	r22
    2af6:	6e 7f       	andi	r22, 0xFE	; 254
    2af8:	6e 5f       	subi	r22, 0xFE	; 254
    2afa:	7f 4f       	sbci	r23, 0xFF	; 255
    2afc:	8f 4f       	sbci	r24, 0xFF	; 255
    2afe:	9f 4f       	sbci	r25, 0xFF	; 255
    2b00:	af 4f       	sbci	r26, 0xFF	; 255
    2b02:	b1 e0       	ldi	r27, 0x01	; 1
    2b04:	3e d0       	rcall	.+124    	; 0x2b82 <__ultoa_invert+0x9c>
    2b06:	b4 e0       	ldi	r27, 0x04	; 4
    2b08:	3c d0       	rcall	.+120    	; 0x2b82 <__ultoa_invert+0x9c>
    2b0a:	67 0f       	add	r22, r23
    2b0c:	78 1f       	adc	r23, r24
    2b0e:	89 1f       	adc	r24, r25
    2b10:	9a 1f       	adc	r25, r26
    2b12:	a1 1d       	adc	r26, r1
    2b14:	68 0f       	add	r22, r24
    2b16:	79 1f       	adc	r23, r25
    2b18:	8a 1f       	adc	r24, r26
    2b1a:	91 1d       	adc	r25, r1
    2b1c:	a1 1d       	adc	r26, r1
    2b1e:	6a 0f       	add	r22, r26
    2b20:	71 1d       	adc	r23, r1
    2b22:	81 1d       	adc	r24, r1
    2b24:	91 1d       	adc	r25, r1
    2b26:	a1 1d       	adc	r26, r1
    2b28:	20 d0       	rcall	.+64     	; 0x2b6a <__ultoa_invert+0x84>
    2b2a:	09 f4       	brne	.+2      	; 0x2b2e <__ultoa_invert+0x48>
    2b2c:	68 94       	set
    2b2e:	3f 91       	pop	r19
    2b30:	2a e0       	ldi	r18, 0x0A	; 10
    2b32:	26 9f       	mul	r18, r22
    2b34:	11 24       	eor	r1, r1
    2b36:	30 19       	sub	r19, r0
    2b38:	30 5d       	subi	r19, 0xD0	; 208
    2b3a:	31 93       	st	Z+, r19
    2b3c:	de f6       	brtc	.-74     	; 0x2af4 <__ultoa_invert+0xe>
    2b3e:	cf 01       	movw	r24, r30
    2b40:	08 95       	ret
    2b42:	46 2f       	mov	r20, r22
    2b44:	47 70       	andi	r20, 0x07	; 7
    2b46:	40 5d       	subi	r20, 0xD0	; 208
    2b48:	41 93       	st	Z+, r20
    2b4a:	b3 e0       	ldi	r27, 0x03	; 3
    2b4c:	0f d0       	rcall	.+30     	; 0x2b6c <__ultoa_invert+0x86>
    2b4e:	c9 f7       	brne	.-14     	; 0x2b42 <__ultoa_invert+0x5c>
    2b50:	f6 cf       	rjmp	.-20     	; 0x2b3e <__ultoa_invert+0x58>
    2b52:	46 2f       	mov	r20, r22
    2b54:	4f 70       	andi	r20, 0x0F	; 15
    2b56:	40 5d       	subi	r20, 0xD0	; 208
    2b58:	4a 33       	cpi	r20, 0x3A	; 58
    2b5a:	18 f0       	brcs	.+6      	; 0x2b62 <__ultoa_invert+0x7c>
    2b5c:	49 5d       	subi	r20, 0xD9	; 217
    2b5e:	31 fd       	sbrc	r19, 1
    2b60:	40 52       	subi	r20, 0x20	; 32
    2b62:	41 93       	st	Z+, r20
    2b64:	02 d0       	rcall	.+4      	; 0x2b6a <__ultoa_invert+0x84>
    2b66:	a9 f7       	brne	.-22     	; 0x2b52 <__ultoa_invert+0x6c>
    2b68:	ea cf       	rjmp	.-44     	; 0x2b3e <__ultoa_invert+0x58>
    2b6a:	b4 e0       	ldi	r27, 0x04	; 4
    2b6c:	a6 95       	lsr	r26
    2b6e:	97 95       	ror	r25
    2b70:	87 95       	ror	r24
    2b72:	77 95       	ror	r23
    2b74:	67 95       	ror	r22
    2b76:	ba 95       	dec	r27
    2b78:	c9 f7       	brne	.-14     	; 0x2b6c <__ultoa_invert+0x86>
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	61 05       	cpc	r22, r1
    2b7e:	71 05       	cpc	r23, r1
    2b80:	08 95       	ret
    2b82:	9b 01       	movw	r18, r22
    2b84:	ac 01       	movw	r20, r24
    2b86:	0a 2e       	mov	r0, r26
    2b88:	06 94       	lsr	r0
    2b8a:	57 95       	ror	r21
    2b8c:	47 95       	ror	r20
    2b8e:	37 95       	ror	r19
    2b90:	27 95       	ror	r18
    2b92:	ba 95       	dec	r27
    2b94:	c9 f7       	brne	.-14     	; 0x2b88 <__ultoa_invert+0xa2>
    2b96:	62 0f       	add	r22, r18
    2b98:	73 1f       	adc	r23, r19
    2b9a:	84 1f       	adc	r24, r20
    2b9c:	95 1f       	adc	r25, r21
    2b9e:	a0 1d       	adc	r26, r0
    2ba0:	08 95       	ret

00002ba2 <_exit>:
    2ba2:	f8 94       	cli

00002ba4 <__stop_program>:
    2ba4:	ff cf       	rjmp	.-2      	; 0x2ba4 <__stop_program>
